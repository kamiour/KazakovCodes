!function(e,t){"object"==typeof module&&"object"==typeof module.exports?module.exports=e.document?t(e,!0):function(e){if(!e.document)throw new Error("jQuery requires a window with a document");return t(e)}:t(e)}("undefined"!=typeof window?window:this,function(C,e){function t(e,t){return t.toUpperCase()}var i=[],E=C.document,u=i.slice,v=i.concat,o=i.push,a=i.indexOf,n={},r=n.toString,f=n.hasOwnProperty,m={},s="2.2.4",S=function(e,t){return new S.fn.init(e,t)},l=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,d=/^-ms-/,c=/-([\da-z])/gi;function p(e){var t=!!e&&"length"in e&&e.length,i=S.type(e);return"function"!==i&&!S.isWindow(e)&&("array"===i||0===t||"number"==typeof t&&0<t&&t-1 in e)}S.fn=S.prototype={jquery:s,constructor:S,selector:"",length:0,toArray:function(){return u.call(this)},get:function(e){return null!=e?e<0?this[e+this.length]:this[e]:u.call(this)},pushStack:function(e){var t=S.merge(this.constructor(),e);return t.prevObject=this,t.context=this.context,t},each:function(e){return S.each(this,e)},map:function(i){return this.pushStack(S.map(this,function(e,t){return i.call(e,t,e)}))},slice:function(){return this.pushStack(u.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(e){var t=this.length,i=+e+(e<0?t:0);return this.pushStack(0<=i&&i<t?[this[i]]:[])},end:function(){return this.prevObject||this.constructor()},push:o,sort:i.sort,splice:i.splice},S.extend=S.fn.extend=function(){var e,t,i,n,a,r,s=arguments[0]||{},o=1,l=arguments.length,d=!1;for("boolean"==typeof s&&(d=s,s=arguments[o]||{},o++),"object"==typeof s||S.isFunction(s)||(s={}),o===l&&(s=this,o--);o<l;o++)if(null!=(e=arguments[o]))for(t in e)i=s[t],s!==(n=e[t])&&(d&&n&&(S.isPlainObject(n)||(a=S.isArray(n)))?(r=a?(a=!1,i&&S.isArray(i)?i:[]):i&&S.isPlainObject(i)?i:{},s[t]=S.extend(d,r,n)):void 0!==n&&(s[t]=n));return s},S.extend({expando:"jQuery"+(s+Math.random()).replace(/\D/g,""),isReady:!0,error:function(e){throw new Error(e)},noop:function(){},isFunction:function(e){return"function"===S.type(e)},isArray:Array.isArray,isWindow:function(e){return null!=e&&e===e.window},isNumeric:function(e){var t=e&&e.toString();return!S.isArray(e)&&0<=t-parseFloat(t)+1},isPlainObject:function(e){var t;if("object"!==S.type(e)||e.nodeType||S.isWindow(e))return!1;if(e.constructor&&!f.call(e,"constructor")&&!f.call(e.constructor.prototype||{},"isPrototypeOf"))return!1;for(t in e);return void 0===t||f.call(e,t)},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},type:function(e){return null==e?e+"":"object"==typeof e||"function"==typeof e?n[r.call(e)]||"object":typeof e},globalEval:function(e){var t,i=eval;(e=S.trim(e))&&(1===e.indexOf("use strict")?((t=E.createElement("script")).text=e,E.head.appendChild(t).parentNode.removeChild(t)):i(e))},camelCase:function(e){return e.replace(d,"ms-").replace(c,t)},nodeName:function(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()},each:function(e,t){var i,n=0;if(p(e))for(i=e.length;n<i&&!1!==t.call(e[n],n,e[n]);n++);else for(n in e)if(!1===t.call(e[n],n,e[n]))break;return e},trim:function(e){return null==e?"":(e+"").replace(l,"")},makeArray:function(e,t){var i=t||[];return null!=e&&(p(Object(e))?S.merge(i,"string"==typeof e?[e]:e):o.call(i,e)),i},inArray:function(e,t,i){return null==t?-1:a.call(t,e,i)},merge:function(e,t){for(var i=+t.length,n=0,a=e.length;n<i;n++)e[a++]=t[n];return e.length=a,e},grep:function(e,t,i){for(var n=[],a=0,r=e.length,s=!i;a<r;a++)!t(e[a],a)!=s&&n.push(e[a]);return n},map:function(e,t,i){var n,a,r=0,s=[];if(p(e))for(n=e.length;r<n;r++)null!=(a=t(e[r],r,i))&&s.push(a);else for(r in e)null!=(a=t(e[r],r,i))&&s.push(a);return v.apply([],s)},guid:1,proxy:function(e,t){var i,n,a;if("string"==typeof t&&(i=e[t],t=e,e=i),S.isFunction(e))return n=u.call(arguments,2),(a=function(){return e.apply(t||this,n.concat(u.call(arguments)))}).guid=e.guid=e.guid||S.guid++,a},now:Date.now,support:m}),"function"==typeof Symbol&&(S.fn[Symbol.iterator]=i[Symbol.iterator]),S.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(e,t){n["[object "+t+"]"]=t.toLowerCase()});var h=function(i){function c(e,t,i){var n="0x"+t-65536;return n!=n||i?t:n<0?String.fromCharCode(65536+n):String.fromCharCode(n>>10|55296,1023&n|56320)}function a(){T()}var e,f,x,r,s,v,p,m,w,l,d,T,C,o,E,g,u,h,y,S="sizzle"+1*new Date,b=i.document,k=0,n=0,M=ae(),P=ae(),$=ae(),L=function(e,t){return e===t&&(d=!0),0},D={}.hasOwnProperty,t=[],z=t.pop,I=t.push,N=t.push,A=t.slice,O=function(e,t){for(var i=0,n=e.length;i<n;i++)if(e[i]===t)return i;return-1},H="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",j="[\\x20\\t\\r\\n\\f]",q="(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",B="\\["+j+"*("+q+")(?:"+j+"*([*^$|!~]?=)"+j+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+q+"))|)"+j+"*\\]",F=":("+q+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+B+")*)|.*)\\)|)",R=new RegExp(j+"+","g"),X=new RegExp("^"+j+"+|((?:^|[^\\\\])(?:\\\\.)*)"+j+"+$","g"),G=new RegExp("^"+j+"*,"+j+"*"),V=new RegExp("^"+j+"*([>+~]|"+j+")"+j+"*"),W=new RegExp("="+j+"*([^\\]'\"]*?)"+j+"*\\]","g"),Y=new RegExp(F),_=new RegExp("^"+q+"$"),U={ID:new RegExp("^#("+q+")"),CLASS:new RegExp("^\\.("+q+")"),TAG:new RegExp("^("+q+"|[*])"),ATTR:new RegExp("^"+B),PSEUDO:new RegExp("^"+F),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+j+"*(even|odd|(([+-]|)(\\d*)n|)"+j+"*(?:([+-]|)"+j+"*(\\d+)|))"+j+"*\\)|)","i"),bool:new RegExp("^(?:"+H+")$","i"),needsContext:new RegExp("^"+j+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+j+"*((?:-\\d)?\\d*)"+j+"*\\)|)(?=[^-]|$)","i")},K=/^(?:input|select|textarea|button)$/i,Q=/^h\d$/i,J=/^[^{]+\{\s*\[native \w/,Z=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,ee=/[+~]/,te=/'|\\/g,ie=new RegExp("\\\\([\\da-f]{1,6}"+j+"?|("+j+")|.)","ig");try{N.apply(t=A.call(b.childNodes),b.childNodes),t[b.childNodes.length].nodeType}catch(e){N={apply:t.length?function(e,t){I.apply(e,A.call(t))}:function(e,t){for(var i=e.length,n=0;e[i++]=t[n++];);e.length=i-1}}}function ne(e,t,i,n){var a,r,s,o,l,d,u,c,p=t&&t.ownerDocument,h=t?t.nodeType:9;if(i=i||[],"string"!=typeof e||!e||1!==h&&9!==h&&11!==h)return i;if(!n&&((t?t.ownerDocument||t:b)!==C&&T(t),t=t||C,E)){if(11!==h&&(d=Z.exec(e)))if(a=d[1]){if(9===h){if(!(s=t.getElementById(a)))return i;if(s.id===a)return i.push(s),i}else if(p&&(s=p.getElementById(a))&&y(t,s)&&s.id===a)return i.push(s),i}else{if(d[2])return N.apply(i,t.getElementsByTagName(e)),i;if((a=d[3])&&f.getElementsByClassName&&t.getElementsByClassName)return N.apply(i,t.getElementsByClassName(a)),i}if(f.qsa&&!$[e+" "]&&(!g||!g.test(e))){if(1!==h)p=t,c=e;else if("object"!==t.nodeName.toLowerCase()){for((o=t.getAttribute("id"))?o=o.replace(te,"\\$&"):t.setAttribute("id",o=S),r=(u=v(e)).length,l=_.test(o)?"#"+o:"[id='"+o+"']";r--;)u[r]=l+" "+fe(u[r]);c=u.join(","),p=ee.test(e)&&pe(t.parentNode)||t}if(c)try{return N.apply(i,p.querySelectorAll(c)),i}catch(e){}finally{o===S&&t.removeAttribute("id")}}}return m(e.replace(X,"$1"),t,i,n)}function ae(){var n=[];return function e(t,i){return n.push(t+" ")>x.cacheLength&&delete e[n.shift()],e[t+" "]=i}}function re(e){return e[S]=!0,e}function se(e){var t=C.createElement("div");try{return!!e(t)}catch(e){return!1}finally{t.parentNode&&t.parentNode.removeChild(t),t=null}}function oe(e,t){for(var i=e.split("|"),n=i.length;n--;)x.attrHandle[i[n]]=t}function le(e,t){var i=t&&e,n=i&&1===e.nodeType&&1===t.nodeType&&(~t.sourceIndex||1<<31)-(~e.sourceIndex||1<<31);if(n)return n;if(i)for(;i=i.nextSibling;)if(i===t)return-1;return e?1:-1}function de(t){return function(e){return"input"===e.nodeName.toLowerCase()&&e.type===t}}function ue(i){return function(e){var t=e.nodeName.toLowerCase();return("input"===t||"button"===t)&&e.type===i}}function ce(s){return re(function(r){return r=+r,re(function(e,t){for(var i,n=s([],e.length,r),a=n.length;a--;)e[i=n[a]]&&(e[i]=!(t[i]=e[i]))})})}function pe(e){return e&&void 0!==e.getElementsByTagName&&e}for(e in f=ne.support={},s=ne.isXML=function(e){var t=e&&(e.ownerDocument||e).documentElement;return!!t&&"HTML"!==t.nodeName},T=ne.setDocument=function(e){var t,i,n=e?e.ownerDocument||e:b;return n!==C&&9===n.nodeType&&n.documentElement&&(o=(C=n).documentElement,E=!s(C),(i=C.defaultView)&&i.top!==i&&(i.addEventListener?i.addEventListener("unload",a,!1):i.attachEvent&&i.attachEvent("onunload",a)),f.attributes=se(function(e){return e.className="i",!e.getAttribute("className")}),f.getElementsByTagName=se(function(e){return e.appendChild(C.createComment("")),!e.getElementsByTagName("*").length}),f.getElementsByClassName=J.test(C.getElementsByClassName),f.getById=se(function(e){return o.appendChild(e).id=S,!C.getElementsByName||!C.getElementsByName(S).length}),f.getById?(x.find.ID=function(e,t){if(void 0!==t.getElementById&&E){var i=t.getElementById(e);return i?[i]:[]}},x.filter.ID=function(e){var t=e.replace(ie,c);return function(e){return e.getAttribute("id")===t}}):(delete x.find.ID,x.filter.ID=function(e){var i=e.replace(ie,c);return function(e){var t=void 0!==e.getAttributeNode&&e.getAttributeNode("id");return t&&t.value===i}}),x.find.TAG=f.getElementsByTagName?function(e,t){return void 0!==t.getElementsByTagName?t.getElementsByTagName(e):f.qsa?t.querySelectorAll(e):void 0}:function(e,t){var i,n=[],a=0,r=t.getElementsByTagName(e);if("*"!==e)return r;for(;i=r[a++];)1===i.nodeType&&n.push(i);return n},x.find.CLASS=f.getElementsByClassName&&function(e,t){if(void 0!==t.getElementsByClassName&&E)return t.getElementsByClassName(e)},u=[],g=[],(f.qsa=J.test(C.querySelectorAll))&&(se(function(e){o.appendChild(e).innerHTML="<a id='"+S+"'></a><select id='"+S+"-\r\\' msallowcapture=''><option selected=''></option></select>",e.querySelectorAll("[msallowcapture^='']").length&&g.push("[*^$]="+j+"*(?:''|\"\")"),e.querySelectorAll("[selected]").length||g.push("\\["+j+"*(?:value|"+H+")"),e.querySelectorAll("[id~="+S+"-]").length||g.push("~="),e.querySelectorAll(":checked").length||g.push(":checked"),e.querySelectorAll("a#"+S+"+*").length||g.push(".#.+[+~]")}),se(function(e){var t=C.createElement("input");t.setAttribute("type","hidden"),e.appendChild(t).setAttribute("name","D"),e.querySelectorAll("[name=d]").length&&g.push("name"+j+"*[*^$|!~]?="),e.querySelectorAll(":enabled").length||g.push(":enabled",":disabled"),e.querySelectorAll("*,:x"),g.push(",.*:")})),(f.matchesSelector=J.test(h=o.matches||o.webkitMatchesSelector||o.mozMatchesSelector||o.oMatchesSelector||o.msMatchesSelector))&&se(function(e){f.disconnectedMatch=h.call(e,"div"),h.call(e,"[s!='']:x"),u.push("!=",F)}),g=g.length&&new RegExp(g.join("|")),u=u.length&&new RegExp(u.join("|")),t=J.test(o.compareDocumentPosition),y=t||J.test(o.contains)?function(e,t){var i=9===e.nodeType?e.documentElement:e,n=t&&t.parentNode;return e===n||!(!n||1!==n.nodeType||!(i.contains?i.contains(n):e.compareDocumentPosition&&16&e.compareDocumentPosition(n)))}:function(e,t){if(t)for(;t=t.parentNode;)if(t===e)return!0;return!1},L=t?function(e,t){if(e===t)return d=!0,0;var i=!e.compareDocumentPosition-!t.compareDocumentPosition;return i||(1&(i=(e.ownerDocument||e)===(t.ownerDocument||t)?e.compareDocumentPosition(t):1)||!f.sortDetached&&t.compareDocumentPosition(e)===i?e===C||e.ownerDocument===b&&y(b,e)?-1:t===C||t.ownerDocument===b&&y(b,t)?1:l?O(l,e)-O(l,t):0:4&i?-1:1)}:function(e,t){if(e===t)return d=!0,0;var i,n=0,a=e.parentNode,r=t.parentNode,s=[e],o=[t];if(!a||!r)return e===C?-1:t===C?1:a?-1:r?1:l?O(l,e)-O(l,t):0;if(a===r)return le(e,t);for(i=e;i=i.parentNode;)s.unshift(i);for(i=t;i=i.parentNode;)o.unshift(i);for(;s[n]===o[n];)n++;return n?le(s[n],o[n]):s[n]===b?-1:o[n]===b?1:0}),C},ne.matches=function(e,t){return ne(e,null,null,t)},ne.matchesSelector=function(e,t){if((e.ownerDocument||e)!==C&&T(e),t=t.replace(W,"='$1']"),f.matchesSelector&&E&&!$[t+" "]&&(!u||!u.test(t))&&(!g||!g.test(t)))try{var i=h.call(e,t);if(i||f.disconnectedMatch||e.document&&11!==e.document.nodeType)return i}catch(e){}return 0<ne(t,C,null,[e]).length},ne.contains=function(e,t){return(e.ownerDocument||e)!==C&&T(e),y(e,t)},ne.attr=function(e,t){(e.ownerDocument||e)!==C&&T(e);var i=x.attrHandle[t.toLowerCase()],n=i&&D.call(x.attrHandle,t.toLowerCase())?i(e,t,!E):void 0;return void 0!==n?n:f.attributes||!E?e.getAttribute(t):(n=e.getAttributeNode(t))&&n.specified?n.value:null},ne.error=function(e){throw new Error("Syntax error, unrecognized expression: "+e)},ne.uniqueSort=function(e){var t,i=[],n=0,a=0;if(d=!f.detectDuplicates,l=!f.sortStable&&e.slice(0),e.sort(L),d){for(;t=e[a++];)t===e[a]&&(n=i.push(a));for(;n--;)e.splice(i[n],1)}return l=null,e},r=ne.getText=function(e){var t,i="",n=0,a=e.nodeType;if(a){if(1===a||9===a||11===a){if("string"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)i+=r(e)}else if(3===a||4===a)return e.nodeValue}else for(;t=e[n++];)i+=r(t);return i},(x=ne.selectors={cacheLength:50,createPseudo:re,match:U,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(ie,c),e[3]=(e[3]||e[4]||e[5]||"").replace(ie,c),"~="===e[2]&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),"nth"===e[1].slice(0,3)?(e[3]||ne.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*("even"===e[3]||"odd"===e[3])),e[5]=+(e[7]+e[8]||"odd"===e[3])):e[3]&&ne.error(e[0]),e},PSEUDO:function(e){var t,i=!e[6]&&e[2];return U.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||"":i&&Y.test(i)&&(t=v(i,!0))&&(t=i.indexOf(")",i.length-t)-i.length)&&(e[0]=e[0].slice(0,t),e[2]=i.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(ie,c).toLowerCase();return"*"===e?function(){return!0}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===t}},CLASS:function(e){var t=M[e+" "];return t||(t=new RegExp("(^|"+j+")"+e+"("+j+"|$)"))&&M(e,function(e){return t.test("string"==typeof e.className&&e.className||void 0!==e.getAttribute&&e.getAttribute("class")||"")})},ATTR:function(i,n,a){return function(e){var t=ne.attr(e,i);return null==t?"!="===n:!n||(t+="","="===n?t===a:"!="===n?t!==a:"^="===n?a&&0===t.indexOf(a):"*="===n?a&&-1<t.indexOf(a):"$="===n?a&&t.slice(-a.length)===a:"~="===n?-1<(" "+t.replace(R," ")+" ").indexOf(a):"|="===n&&(t===a||t.slice(0,a.length+1)===a+"-"))}},CHILD:function(f,e,t,v,m){var g="nth"!==f.slice(0,3),y="last"!==f.slice(-4),b="of-type"===e;return 1===v&&0===m?function(e){return!!e.parentNode}:function(e,t,i){var n,a,r,s,o,l,d=g!=y?"nextSibling":"previousSibling",u=e.parentNode,c=b&&e.nodeName.toLowerCase(),p=!i&&!b,h=!1;if(u){if(g){for(;d;){for(s=e;s=s[d];)if(b?s.nodeName.toLowerCase()===c:1===s.nodeType)return!1;l=d="only"===f&&!l&&"nextSibling"}return!0}if(l=[y?u.firstChild:u.lastChild],y&&p){for(h=(o=(n=(a=(r=(s=u)[S]||(s[S]={}))[s.uniqueID]||(r[s.uniqueID]={}))[f]||[])[0]===k&&n[1])&&n[2],s=o&&u.childNodes[o];s=++o&&s&&s[d]||(h=o=0)||l.pop();)if(1===s.nodeType&&++h&&s===e){a[f]=[k,o,h];break}}else if(p&&(h=o=(n=(a=(r=(s=e)[S]||(s[S]={}))[s.uniqueID]||(r[s.uniqueID]={}))[f]||[])[0]===k&&n[1]),!1===h)for(;(s=++o&&s&&s[d]||(h=o=0)||l.pop())&&((b?s.nodeName.toLowerCase()!==c:1!==s.nodeType)||!++h||(p&&((a=(r=s[S]||(s[S]={}))[s.uniqueID]||(r[s.uniqueID]={}))[f]=[k,h]),s!==e)););return(h-=m)===v||h%v==0&&0<=h/v}}},PSEUDO:function(e,r){var t,s=x.pseudos[e]||x.setFilters[e.toLowerCase()]||ne.error("unsupported pseudo: "+e);return s[S]?s(r):1<s.length?(t=[e,e,"",r],x.setFilters.hasOwnProperty(e.toLowerCase())?re(function(e,t){for(var i,n=s(e,r),a=n.length;a--;)e[i=O(e,n[a])]=!(t[i]=n[a])}):function(e){return s(e,0,t)}):s}},pseudos:{not:re(function(e){var n=[],a=[],o=p(e.replace(X,"$1"));return o[S]?re(function(e,t,i,n){for(var a,r=o(e,null,n,[]),s=e.length;s--;)(a=r[s])&&(e[s]=!(t[s]=a))}):function(e,t,i){return n[0]=e,o(n,null,i,a),n[0]=null,!a.pop()}}),has:re(function(t){return function(e){return 0<ne(t,e).length}}),contains:re(function(t){return t=t.replace(ie,c),function(e){return-1<(e.textContent||e.innerText||r(e)).indexOf(t)}}),lang:re(function(i){return _.test(i||"")||ne.error("unsupported lang: "+i),i=i.replace(ie,c).toLowerCase(),function(e){var t;do{if(t=E?e.lang:e.getAttribute("xml:lang")||e.getAttribute("lang"))return(t=t.toLowerCase())===i||0===t.indexOf(i+"-")}while((e=e.parentNode)&&1===e.nodeType);return!1}}),target:function(e){var t=i.location&&i.location.hash;return t&&t.slice(1)===e.id},root:function(e){return e===o},focus:function(e){return e===C.activeElement&&(!C.hasFocus||C.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:function(e){return!1===e.disabled},disabled:function(e){return!0===e.disabled},checked:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&!!e.checked||"option"===t&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,!0===e.selected},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeType<6)return!1;return!0},parent:function(e){return!x.pseudos.empty(e)},header:function(e){return Q.test(e.nodeName)},input:function(e){return K.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&"button"===e.type||"button"===t},text:function(e){var t;return"input"===e.nodeName.toLowerCase()&&"text"===e.type&&(null==(t=e.getAttribute("type"))||"text"===t.toLowerCase())},first:ce(function(){return[0]}),last:ce(function(e,t){return[t-1]}),eq:ce(function(e,t,i){return[i<0?i+t:i]}),even:ce(function(e,t){for(var i=0;i<t;i+=2)e.push(i);return e}),odd:ce(function(e,t){for(var i=1;i<t;i+=2)e.push(i);return e}),lt:ce(function(e,t,i){for(var n=i<0?i+t:i;0<=--n;)e.push(n);return e}),gt:ce(function(e,t,i){for(var n=i<0?i+t:i;++n<t;)e.push(n);return e})}}).pseudos.nth=x.pseudos.eq,{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})x.pseudos[e]=de(e);for(e in{submit:!0,reset:!0})x.pseudos[e]=ue(e);function he(){}function fe(e){for(var t=0,i=e.length,n="";t<i;t++)n+=e[t].value;return n}function ve(o,e,t){var l=e.dir,d=t&&"parentNode"===l,u=n++;return e.first?function(e,t,i){for(;e=e[l];)if(1===e.nodeType||d)return o(e,t,i)}:function(e,t,i){var n,a,r,s=[k,u];if(i){for(;e=e[l];)if((1===e.nodeType||d)&&o(e,t,i))return!0}else for(;e=e[l];)if(1===e.nodeType||d){if((n=(a=(r=e[S]||(e[S]={}))[e.uniqueID]||(r[e.uniqueID]={}))[l])&&n[0]===k&&n[1]===u)return s[2]=n[2];if((a[l]=s)[2]=o(e,t,i))return!0}}}function me(a){return 1<a.length?function(e,t,i){for(var n=a.length;n--;)if(!a[n](e,t,i))return!1;return!0}:a[0]}function ge(e,t,i,n,a){for(var r,s=[],o=0,l=e.length,d=null!=t;o<l;o++)(r=e[o])&&(i&&!i(r,n,a)||(s.push(r),d&&t.push(o)));return s}function ye(h,f,v,m,g,e){return m&&!m[S]&&(m=ye(m)),g&&!g[S]&&(g=ye(g,e)),re(function(e,t,i,n){var a,r,s,o=[],l=[],d=t.length,u=e||function(e,t,i){for(var n=0,a=t.length;n<a;n++)ne(e,t[n],i);return i}(f||"*",i.nodeType?[i]:i,[]),c=!h||!e&&f?u:ge(u,o,h,i,n),p=v?g||(e?h:d||m)?[]:t:c;if(v&&v(c,p,i,n),m)for(a=ge(p,l),m(a,[],i,n),r=a.length;r--;)(s=a[r])&&(p[l[r]]=!(c[l[r]]=s));if(e){if(g||h){if(g){for(a=[],r=p.length;r--;)(s=p[r])&&a.push(c[r]=s);g(null,p=[],a,n)}for(r=p.length;r--;)(s=p[r])&&-1<(a=g?O(e,s):o[r])&&(e[a]=!(t[a]=s))}}else p=ge(p===t?p.splice(d,p.length):p),g?g(null,t,p,n):N.apply(t,p)})}function be(e){for(var a,t,i,n=e.length,r=x.relative[e[0].type],s=r||x.relative[" "],o=r?1:0,l=ve(function(e){return e===a},s,!0),d=ve(function(e){return-1<O(a,e)},s,!0),u=[function(e,t,i){var n=!r&&(i||t!==w)||((a=t).nodeType?l(e,t,i):d(e,t,i));return a=null,n}];o<n;o++)if(t=x.relative[e[o].type])u=[ve(me(u),t)];else{if((t=x.filter[e[o].type].apply(null,e[o].matches))[S]){for(i=++o;i<n&&!x.relative[e[i].type];i++);return ye(1<o&&me(u),1<o&&fe(e.slice(0,o-1).concat({value:" "===e[o-2].type?"*":""})).replace(X,"$1"),t,o<i&&be(e.slice(o,i)),i<n&&be(e=e.slice(i)),i<n&&fe(e))}u.push(t)}return me(u)}return he.prototype=x.filters=x.pseudos,x.setFilters=new he,v=ne.tokenize=function(e,t){var i,n,a,r,s,o,l,d=P[e+" "];if(d)return t?0:d.slice(0);for(s=e,o=[],l=x.preFilter;s;){for(r in i&&!(n=G.exec(s))||(n&&(s=s.slice(n[0].length)||s),o.push(a=[])),i=!1,(n=V.exec(s))&&(i=n.shift(),a.push({value:i,type:n[0].replace(X," ")}),s=s.slice(i.length)),x.filter)!(n=U[r].exec(s))||l[r]&&!(n=l[r](n))||(i=n.shift(),a.push({value:i,type:r,matches:n}),s=s.slice(i.length));if(!i)break}return t?s.length:s?ne.error(e):P(e,o).slice(0)},p=ne.compile=function(e,t){var i,n=[],a=[],r=$[e+" "];if(!r){for(i=(t=t||v(e)).length;i--;)(r=be(t[i]))[S]?n.push(r):a.push(r);(r=$(e,function(m,g){function e(e,t,i,n,a){var r,s,o,l=0,d="0",u=e&&[],c=[],p=w,h=e||b&&x.find.TAG("*",a),f=k+=null==p?1:Math.random()||.1,v=h.length;for(a&&(w=t===C||t||a);d!==v&&null!=(r=h[d]);d++){if(b&&r){for(s=0,t||r.ownerDocument===C||(T(r),i=!E);o=m[s++];)if(o(r,t||C,i)){n.push(r);break}a&&(k=f)}y&&((r=!o&&r)&&l--,e&&u.push(r))}if(l+=d,y&&d!==l){for(s=0;o=g[s++];)o(u,c,t,i);if(e){if(0<l)for(;d--;)u[d]||c[d]||(c[d]=z.call(n));c=ge(c)}N.apply(n,c),a&&!e&&0<c.length&&1<l+g.length&&ne.uniqueSort(n)}return a&&(k=f,w=p),u}var y=0<g.length,b=0<m.length;return y?re(e):e}(a,n))).selector=e}return r},m=ne.select=function(e,t,i,n){var a,r,s,o,l,d="function"==typeof e&&e,u=!n&&v(e=d.selector||e);if(i=i||[],1===u.length){if(2<(r=u[0]=u[0].slice(0)).length&&"ID"===(s=r[0]).type&&f.getById&&9===t.nodeType&&E&&x.relative[r[1].type]){if(!(t=(x.find.ID(s.matches[0].replace(ie,c),t)||[])[0]))return i;d&&(t=t.parentNode),e=e.slice(r.shift().value.length)}for(a=U.needsContext.test(e)?0:r.length;a--&&(s=r[a],!x.relative[o=s.type]);)if((l=x.find[o])&&(n=l(s.matches[0].replace(ie,c),ee.test(r[0].type)&&pe(t.parentNode)||t))){if(r.splice(a,1),!(e=n.length&&fe(r)))return N.apply(i,n),i;break}}return(d||p(e,u))(n,t,!E,i,!t||ee.test(e)&&pe(t.parentNode)||t),i},f.sortStable=S.split("").sort(L).join("")===S,f.detectDuplicates=!!d,T(),f.sortDetached=se(function(e){return 1&e.compareDocumentPosition(C.createElement("div"))}),se(function(e){return e.innerHTML="<a href='#'></a>","#"===e.firstChild.getAttribute("href")})||oe("type|href|height|width",function(e,t,i){if(!i)return e.getAttribute(t,"type"===t.toLowerCase()?1:2)}),f.attributes&&se(function(e){return e.innerHTML="<input/>",e.firstChild.setAttribute("value",""),""===e.firstChild.getAttribute("value")})||oe("value",function(e,t,i){if(!i&&"input"===e.nodeName.toLowerCase())return e.defaultValue}),se(function(e){return null==e.getAttribute("disabled")})||oe(H,function(e,t,i){var n;if(!i)return!0===e[t]?t.toLowerCase():(n=e.getAttributeNode(t))&&n.specified?n.value:null}),ne}(C);S.find=h,S.expr=h.selectors,S.expr[":"]=S.expr.pseudos,S.uniqueSort=S.unique=h.uniqueSort,S.text=h.getText,S.isXMLDoc=h.isXML,S.contains=h.contains;function g(e,t,i){for(var n=[],a=void 0!==i;(e=e[t])&&9!==e.nodeType;)if(1===e.nodeType){if(a&&S(e).is(i))break;n.push(e)}return n}function y(e,t){for(var i=[];e;e=e.nextSibling)1===e.nodeType&&e!==t&&i.push(e);return i}var b=S.expr.match.needsContext,x=/^<([\w-]+)\s*\/?>(?:<\/\1>|)$/,w=/^.[^:#\[\.,]*$/;function T(e,i,n){if(S.isFunction(i))return S.grep(e,function(e,t){return!!i.call(e,t,e)!==n});if(i.nodeType)return S.grep(e,function(e){return e===i!==n});if("string"==typeof i){if(w.test(i))return S.filter(i,e,n);i=S.filter(i,e)}return S.grep(e,function(e){return-1<a.call(i,e)!==n})}S.filter=function(e,t,i){var n=t[0];return i&&(e=":not("+e+")"),1===t.length&&1===n.nodeType?S.find.matchesSelector(n,e)?[n]:[]:S.find.matches(e,S.grep(t,function(e){return 1===e.nodeType}))},S.fn.extend({find:function(e){var t,i=this.length,n=[],a=this;if("string"!=typeof e)return this.pushStack(S(e).filter(function(){for(t=0;t<i;t++)if(S.contains(a[t],this))return!0}));for(t=0;t<i;t++)S.find(e,a[t],n);return(n=this.pushStack(1<i?S.unique(n):n)).selector=this.selector?this.selector+" "+e:e,n},filter:function(e){return this.pushStack(T(this,e||[],!1))},not:function(e){return this.pushStack(T(this,e||[],!0))},is:function(e){return!!T(this,"string"==typeof e&&b.test(e)?S(e):e||[],!1).length}});var k,M=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/;(S.fn.init=function(e,t,i){var n,a;if(!e)return this;if(i=i||k,"string"!=typeof e)return e.nodeType?(this.context=this[0]=e,this.length=1,this):S.isFunction(e)?void 0!==i.ready?i.ready(e):e(S):(void 0!==e.selector&&(this.selector=e.selector,this.context=e.context),S.makeArray(e,this));if(!(n="<"===e[0]&&">"===e[e.length-1]&&3<=e.length?[null,e,null]:M.exec(e))||!n[1]&&t)return!t||t.jquery?(t||i).find(e):this.constructor(t).find(e);if(n[1]){if(t=t instanceof S?t[0]:t,S.merge(this,S.parseHTML(n[1],t&&t.nodeType?t.ownerDocument||t:E,!0)),x.test(n[1])&&S.isPlainObject(t))for(n in t)S.isFunction(this[n])?this[n](t[n]):this.attr(n,t[n]);return this}return(a=E.getElementById(n[2]))&&a.parentNode&&(this.length=1,this[0]=a),this.context=E,this.selector=e,this}).prototype=S.fn,k=S(E);var P=/^(?:parents|prev(?:Until|All))/,$={children:!0,contents:!0,next:!0,prev:!0};function L(e,t){for(;(e=e[t])&&1!==e.nodeType;);return e}S.fn.extend({has:function(e){var t=S(e,this),i=t.length;return this.filter(function(){for(var e=0;e<i;e++)if(S.contains(this,t[e]))return!0})},closest:function(e,t){for(var i,n=0,a=this.length,r=[],s=b.test(e)||"string"!=typeof e?S(e,t||this.context):0;n<a;n++)for(i=this[n];i&&i!==t;i=i.parentNode)if(i.nodeType<11&&(s?-1<s.index(i):1===i.nodeType&&S.find.matchesSelector(i,e))){r.push(i);break}return this.pushStack(1<r.length?S.uniqueSort(r):r)},index:function(e){return e?"string"==typeof e?a.call(S(e),this[0]):a.call(this,e.jquery?e[0]:e):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){return this.pushStack(S.uniqueSort(S.merge(this.get(),S(e,t))))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}}),S.each({parent:function(e){var t=e.parentNode;return t&&11!==t.nodeType?t:null},parents:function(e){return g(e,"parentNode")},parentsUntil:function(e,t,i){return g(e,"parentNode",i)},next:function(e){return L(e,"nextSibling")},prev:function(e){return L(e,"previousSibling")},nextAll:function(e){return g(e,"nextSibling")},prevAll:function(e){return g(e,"previousSibling")},nextUntil:function(e,t,i){return g(e,"nextSibling",i)},prevUntil:function(e,t,i){return g(e,"previousSibling",i)},siblings:function(e){return y((e.parentNode||{}).firstChild,e)},children:function(e){return y(e.firstChild)},contents:function(e){return e.contentDocument||S.merge([],e.childNodes)}},function(n,a){S.fn[n]=function(e,t){var i=S.map(this,a,e);return"Until"!==n.slice(-5)&&(t=e),t&&"string"==typeof t&&(i=S.filter(t,i)),1<this.length&&($[n]||S.uniqueSort(i),P.test(n)&&i.reverse()),this.pushStack(i)}});var D,z=/\S+/g;function I(){E.removeEventListener("DOMContentLoaded",I),C.removeEventListener("load",I),S.ready()}S.Callbacks=function(n){n="string"==typeof n?function(e){var i={};return S.each(e.match(z)||[],function(e,t){i[t]=!0}),i}(n):S.extend({},n);function i(){for(r=n.once,t=a=!0;o.length;l=-1)for(e=o.shift();++l<s.length;)!1===s[l].apply(e[0],e[1])&&n.stopOnFalse&&(l=s.length,e=!1);n.memory||(e=!1),a=!1,r&&(s=e?[]:"")}var a,e,t,r,s=[],o=[],l=-1,d={add:function(){return s&&(e&&!a&&(l=s.length-1,o.push(e)),function i(e){S.each(e,function(e,t){S.isFunction(t)?n.unique&&d.has(t)||s.push(t):t&&t.length&&"string"!==S.type(t)&&i(t)})}(arguments),e&&!a&&i()),this},remove:function(){return S.each(arguments,function(e,t){for(var i;-1<(i=S.inArray(t,s,i));)s.splice(i,1),i<=l&&l--}),this},has:function(e){return e?-1<S.inArray(e,s):0<s.length},empty:function(){return s=s&&[],this},disable:function(){return r=o=[],s=e="",this},disabled:function(){return!s},lock:function(){return r=o=[],e||(s=e=""),this},locked:function(){return!!r},fireWith:function(e,t){return r||(t=[e,(t=t||[]).slice?t.slice():t],o.push(t),a||i()),this},fire:function(){return d.fireWith(this,arguments),this},fired:function(){return!!t}};return d},S.extend({Deferred:function(e){var r=[["resolve","done",S.Callbacks("once memory"),"resolved"],["reject","fail",S.Callbacks("once memory"),"rejected"],["notify","progress",S.Callbacks("memory")]],a="pending",s={state:function(){return a},always:function(){return o.done(arguments).fail(arguments),this},then:function(){var a=arguments;return S.Deferred(function(n){S.each(r,function(e,t){var i=S.isFunction(a[e])&&a[e];o[t[1]](function(){var e=i&&i.apply(this,arguments);e&&S.isFunction(e.promise)?e.promise().progress(n.notify).done(n.resolve).fail(n.reject):n[t[0]+"With"](this===s?n.promise():this,i?[e]:arguments)})}),a=null}).promise()},promise:function(e){return null!=e?S.extend(e,s):s}},o={};return s.pipe=s.then,S.each(r,function(e,t){var i=t[2],n=t[3];s[t[1]]=i.add,n&&i.add(function(){a=n},r[1^e][2].disable,r[2][2].lock),o[t[0]]=function(){return o[t[0]+"With"](this===o?s:this,arguments),this},o[t[0]+"With"]=i.fireWith}),s.promise(o),e&&e.call(o,o),o},when:function(e){function t(t,i,n){return function(e){i[t]=this,n[t]=1<arguments.length?u.call(arguments):e,n===a?d.notifyWith(i,n):--l||d.resolveWith(i,n)}}var a,i,n,r=0,s=u.call(arguments),o=s.length,l=1!==o||e&&S.isFunction(e.promise)?o:0,d=1===l?e:S.Deferred();if(1<o)for(a=new Array(o),i=new Array(o),n=new Array(o);r<o;r++)s[r]&&S.isFunction(s[r].promise)?s[r].promise().progress(t(r,i,a)).done(t(r,n,s)).fail(d.reject):--l;return l||d.resolveWith(n,s),d.promise()}}),S.fn.ready=function(e){return S.ready.promise().done(e),this},S.extend({isReady:!1,readyWait:1,holdReady:function(e){e?S.readyWait++:S.ready(!0)},ready:function(e){(!0===e?--S.readyWait:S.isReady)||(S.isReady=!0)!==e&&0<--S.readyWait||(D.resolveWith(E,[S]),S.fn.triggerHandler&&(S(E).triggerHandler("ready"),S(E).off("ready")))}}),S.ready.promise=function(e){return D||(D=S.Deferred(),"complete"===E.readyState||"loading"!==E.readyState&&!E.documentElement.doScroll?C.setTimeout(S.ready):(E.addEventListener("DOMContentLoaded",I),C.addEventListener("load",I))),D.promise(e)},S.ready.promise();function N(e){return 1===e.nodeType||9===e.nodeType||!+e.nodeType}var A=function(e,t,i,n,a,r,s){var o=0,l=e.length,d=null==i;if("object"===S.type(i))for(o in a=!0,i)A(e,t,o,i[o],!0,r,s);else if(void 0!==n&&(a=!0,S.isFunction(n)||(s=!0),d&&(t=s?(t.call(e,n),null):(d=t,function(e,t,i){return d.call(S(e),i)})),t))for(;o<l;o++)t(e[o],i,s?n:n.call(e[o],o,t(e[o],i)));return a?e:d?t.call(e):l?t(e[0],i):r};function O(){this.expando=S.expando+O.uid++}O.uid=1,O.prototype={register:function(e,t){var i=t||{};return e.nodeType?e[this.expando]=i:Object.defineProperty(e,this.expando,{value:i,writable:!0,configurable:!0}),e[this.expando]},cache:function(e){if(!N(e))return{};var t=e[this.expando];return t||(t={},N(e)&&(e.nodeType?e[this.expando]=t:Object.defineProperty(e,this.expando,{value:t,configurable:!0}))),t},set:function(e,t,i){var n,a=this.cache(e);if("string"==typeof t)a[t]=i;else for(n in t)a[n]=t[n];return a},get:function(e,t){return void 0===t?this.cache(e):e[this.expando]&&e[this.expando][t]},access:function(e,t,i){var n;return void 0===t||t&&"string"==typeof t&&void 0===i?void 0!==(n=this.get(e,t))?n:this.get(e,S.camelCase(t)):(this.set(e,t,i),void 0!==i?i:t)},remove:function(e,t){var i,n,a,r=e[this.expando];if(void 0!==r){if(void 0===t)this.register(e);else{i=(n=S.isArray(t)?t.concat(t.map(S.camelCase)):(a=S.camelCase(t),t in r?[t,a]:(n=a)in r?[n]:n.match(z)||[])).length;for(;i--;)delete r[n[i]]}void 0!==t&&!S.isEmptyObject(r)||(e.nodeType?e[this.expando]=void 0:delete e[this.expando])}},hasData:function(e){var t=e[this.expando];return void 0!==t&&!S.isEmptyObject(t)}};var H=new O,j=new O,q=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,B=/[A-Z]/g;function F(e,t,i){var n;if(void 0===i&&1===e.nodeType)if(n="data-"+t.replace(B,"-$&").toLowerCase(),"string"==typeof(i=e.getAttribute(n))){try{i="true"===i||"false"!==i&&("null"===i?null:+i+""===i?+i:q.test(i)?S.parseJSON(i):i)}catch(e){}j.set(e,t,i)}else i=void 0;return i}S.extend({hasData:function(e){return j.hasData(e)||H.hasData(e)},data:function(e,t,i){return j.access(e,t,i)},removeData:function(e,t){j.remove(e,t)},_data:function(e,t,i){return H.access(e,t,i)},_removeData:function(e,t){H.remove(e,t)}}),S.fn.extend({data:function(n,e){var t,i,a,r=this[0],s=r&&r.attributes;if(void 0!==n)return"object"==typeof n?this.each(function(){j.set(this,n)}):A(this,function(t){var e,i;if(r&&void 0===t)return void 0!==(e=j.get(r,n)||j.get(r,n.replace(B,"-$&").toLowerCase()))?e:(i=S.camelCase(n),void 0!==(e=j.get(r,i))?e:void 0!==(e=F(r,i,void 0))?e:void 0);i=S.camelCase(n),this.each(function(){var e=j.get(this,i);j.set(this,i,t),-1<n.indexOf("-")&&void 0!==e&&j.set(this,n,t)})},null,e,1<arguments.length,null,!0);if(this.length&&(a=j.get(r),1===r.nodeType&&!H.get(r,"hasDataAttrs"))){for(t=s.length;t--;)s[t]&&0===(i=s[t].name).indexOf("data-")&&(i=S.camelCase(i.slice(5)),F(r,i,a[i]));H.set(r,"hasDataAttrs",!0)}return a},removeData:function(e){return this.each(function(){j.remove(this,e)})}}),S.extend({queue:function(e,t,i){var n;if(e)return t=(t||"fx")+"queue",n=H.get(e,t),i&&(!n||S.isArray(i)?n=H.access(e,t,S.makeArray(i)):n.push(i)),n||[]},dequeue:function(e,t){t=t||"fx";var i=S.queue(e,t),n=i.length,a=i.shift(),r=S._queueHooks(e,t);"inprogress"===a&&(a=i.shift(),n--),a&&("fx"===t&&i.unshift("inprogress"),delete r.stop,a.call(e,function(){S.dequeue(e,t)},r)),!n&&r&&r.empty.fire()},_queueHooks:function(e,t){var i=t+"queueHooks";return H.get(e,i)||H.access(e,i,{empty:S.Callbacks("once memory").add(function(){H.remove(e,[t+"queue",i])})})}}),S.fn.extend({queue:function(t,i){var e=2;return"string"!=typeof t&&(i=t,t="fx",e--),arguments.length<e?S.queue(this[0],t):void 0===i?this:this.each(function(){var e=S.queue(this,t,i);S._queueHooks(this,t),"fx"===t&&"inprogress"!==e[0]&&S.dequeue(this,t)})},dequeue:function(e){return this.each(function(){S.dequeue(this,e)})},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,t){function i(){--a||r.resolveWith(s,[s])}var n,a=1,r=S.Deferred(),s=this,o=this.length;for("string"!=typeof e&&(t=e,e=void 0),e=e||"fx";o--;)(n=H.get(s[o],e+"queueHooks"))&&n.empty&&(a++,n.empty.add(i));return i(),r.promise(t)}});function R(e,t){return e=t||e,"none"===S.css(e,"display")||!S.contains(e.ownerDocument,e)}var X=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,G=new RegExp("^(?:([+-])=|)("+X+")([a-z%]*)$","i"),V=["Top","Right","Bottom","Left"];function W(e,t,i,n){var a,r=1,s=20,o=n?function(){return n.cur()}:function(){return S.css(e,t,"")},l=o(),d=i&&i[3]||(S.cssNumber[t]?"":"px"),u=(S.cssNumber[t]||"px"!==d&&+l)&&G.exec(S.css(e,t));if(u&&u[3]!==d)for(d=d||u[3],i=i||[],u=+l||1;u/=r=r||".5",S.style(e,t,u+d),r!==(r=o()/l)&&1!==r&&--s;);return i&&(u=+u||+l||0,a=i[1]?u+(i[1]+1)*i[2]:+i[2],n&&(n.unit=d,n.start=u,n.end=a)),a}var Y=/^(?:checkbox|radio)$/i,_=/<([\w:-]+)/,U=/^$|\/(?:java|ecma)script/i,K={option:[1,"<select multiple='multiple'>","</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};function Q(e,t){var i=void 0!==e.getElementsByTagName?e.getElementsByTagName(t||"*"):void 0!==e.querySelectorAll?e.querySelectorAll(t||"*"):[];return void 0===t||t&&S.nodeName(e,t)?S.merge([e],i):i}function J(e,t){for(var i=0,n=e.length;i<n;i++)H.set(e[i],"globalEval",!t||H.get(t[i],"globalEval"))}K.optgroup=K.option,K.tbody=K.tfoot=K.colgroup=K.caption=K.thead,K.th=K.td;var Z,ee,te=/<|&#?\w+;/;function ie(e,t,i,n,a){for(var r,s,o,l,d,u,c=t.createDocumentFragment(),p=[],h=0,f=e.length;h<f;h++)if((r=e[h])||0===r)if("object"===S.type(r))S.merge(p,r.nodeType?[r]:r);else if(te.test(r)){for(s=s||c.appendChild(t.createElement("div")),o=(_.exec(r)||["",""])[1].toLowerCase(),l=K[o]||K._default,s.innerHTML=l[1]+S.htmlPrefilter(r)+l[2],u=l[0];u--;)s=s.lastChild;S.merge(p,s.childNodes),(s=c.firstChild).textContent=""}else p.push(t.createTextNode(r));for(c.textContent="",h=0;r=p[h++];)if(n&&-1<S.inArray(r,n))a&&a.push(r);else if(d=S.contains(r.ownerDocument,r),s=Q(c.appendChild(r),"script"),d&&J(s),i)for(u=0;r=s[u++];)U.test(r.type||"")&&i.push(r);return c}Z=E.createDocumentFragment().appendChild(E.createElement("div")),(ee=E.createElement("input")).setAttribute("type","radio"),ee.setAttribute("checked","checked"),ee.setAttribute("name","t"),Z.appendChild(ee),m.checkClone=Z.cloneNode(!0).cloneNode(!0).lastChild.checked,Z.innerHTML="<textarea>x</textarea>",m.noCloneChecked=!!Z.cloneNode(!0).lastChild.defaultValue;var ne=/^key/,ae=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,re=/^([^.]*)(?:\.(.+)|)/;function se(){return!0}function oe(){return!1}function le(){try{return E.activeElement}catch(e){}}function de(e,t,i,n,a,r){var s,o;if("object"==typeof t){for(o in"string"!=typeof i&&(n=n||i,i=void 0),t)de(e,o,i,n,t[o],r);return e}if(null==n&&null==a?(a=i,n=i=void 0):null==a&&("string"==typeof i?(a=n,n=void 0):(a=n,n=i,i=void 0)),!1===a)a=oe;else if(!a)return e;return 1===r&&(s=a,(a=function(e){return S().off(e),s.apply(this,arguments)}).guid=s.guid||(s.guid=S.guid++)),e.each(function(){S.event.add(this,t,a,n,i)})}S.event={global:{},add:function(t,e,i,n,a){var r,s,o,l,d,u,c,p,h,f,v,m=H.get(t);if(m)for(i.handler&&(i=(r=i).handler,a=r.selector),i.guid||(i.guid=S.guid++),(l=m.events)||(l=m.events={}),(s=m.handle)||(s=m.handle=function(e){return void 0!==S&&S.event.triggered!==e.type?S.event.dispatch.apply(t,arguments):void 0}),d=(e=(e||"").match(z)||[""]).length;d--;)h=v=(o=re.exec(e[d])||[])[1],f=(o[2]||"").split(".").sort(),h&&(c=S.event.special[h]||{},h=(a?c.delegateType:c.bindType)||h,c=S.event.special[h]||{},u=S.extend({type:h,origType:v,data:n,handler:i,guid:i.guid,selector:a,needsContext:a&&S.expr.match.needsContext.test(a),namespace:f.join(".")},r),(p=l[h])||((p=l[h]=[]).delegateCount=0,c.setup&&!1!==c.setup.call(t,n,f,s)||t.addEventListener&&t.addEventListener(h,s)),c.add&&(c.add.call(t,u),u.handler.guid||(u.handler.guid=i.guid)),a?p.splice(p.delegateCount++,0,u):p.push(u),S.event.global[h]=!0)},remove:function(e,t,i,n,a){var r,s,o,l,d,u,c,p,h,f,v,m=H.hasData(e)&&H.get(e);if(m&&(l=m.events)){for(d=(t=(t||"").match(z)||[""]).length;d--;)if(h=v=(o=re.exec(t[d])||[])[1],f=(o[2]||"").split(".").sort(),h){for(c=S.event.special[h]||{},p=l[h=(n?c.delegateType:c.bindType)||h]||[],o=o[2]&&new RegExp("(^|\\.)"+f.join("\\.(?:.*\\.|)")+"(\\.|$)"),s=r=p.length;r--;)u=p[r],!a&&v!==u.origType||i&&i.guid!==u.guid||o&&!o.test(u.namespace)||n&&n!==u.selector&&("**"!==n||!u.selector)||(p.splice(r,1),u.selector&&p.delegateCount--,c.remove&&c.remove.call(e,u));s&&!p.length&&(c.teardown&&!1!==c.teardown.call(e,f,m.handle)||S.removeEvent(e,h,m.handle),delete l[h])}else for(h in l)S.event.remove(e,h+t[d],i,n,!0);S.isEmptyObject(l)&&H.remove(e,"handle events")}},dispatch:function(e){e=S.event.fix(e);var t,i,n,a,r,s,o=u.call(arguments),l=(H.get(this,"events")||{})[e.type]||[],d=S.event.special[e.type]||{};if((o[0]=e).delegateTarget=this,!d.preDispatch||!1!==d.preDispatch.call(this,e)){for(s=S.event.handlers.call(this,e,l),t=0;(a=s[t++])&&!e.isPropagationStopped();)for(e.currentTarget=a.elem,i=0;(r=a.handlers[i++])&&!e.isImmediatePropagationStopped();)e.rnamespace&&!e.rnamespace.test(r.namespace)||(e.handleObj=r,e.data=r.data,void 0!==(n=((S.event.special[r.origType]||{}).handle||r.handler).apply(a.elem,o))&&!1===(e.result=n)&&(e.preventDefault(),e.stopPropagation()));return d.postDispatch&&d.postDispatch.call(this,e),e.result}},handlers:function(e,t){var i,n,a,r,s=[],o=t.delegateCount,l=e.target;if(o&&l.nodeType&&("click"!==e.type||isNaN(e.button)||e.button<1))for(;l!==this;l=l.parentNode||this)if(1===l.nodeType&&(!0!==l.disabled||"click"!==e.type)){for(n=[],i=0;i<o;i++)void 0===n[a=(r=t[i]).selector+" "]&&(n[a]=r.needsContext?-1<S(a,this).index(l):S.find(a,this,null,[l]).length),n[a]&&n.push(r);n.length&&s.push({elem:l,handlers:n})}return o<t.length&&s.push({elem:this,handlers:t.slice(o)}),s},props:"altKey bubbles cancelable ctrlKey currentTarget detail eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),fixHooks:{},keyHooks:{props:"char charCode key keyCode".split(" "),filter:function(e,t){return null==e.which&&(e.which=null!=t.charCode?t.charCode:t.keyCode),e}},mouseHooks:{props:"button buttons clientX clientY offsetX offsetY pageX pageY screenX screenY toElement".split(" "),filter:function(e,t){var i,n,a,r=t.button;return null==e.pageX&&null!=t.clientX&&(n=(i=e.target.ownerDocument||E).documentElement,a=i.body,e.pageX=t.clientX+(n&&n.scrollLeft||a&&a.scrollLeft||0)-(n&&n.clientLeft||a&&a.clientLeft||0),e.pageY=t.clientY+(n&&n.scrollTop||a&&a.scrollTop||0)-(n&&n.clientTop||a&&a.clientTop||0)),e.which||void 0===r||(e.which=1&r?1:2&r?3:4&r?2:0),e}},fix:function(e){if(e[S.expando])return e;var t,i,n,a=e.type,r=e,s=this.fixHooks[a];for(s||(this.fixHooks[a]=s=ae.test(a)?this.mouseHooks:ne.test(a)?this.keyHooks:{}),n=s.props?this.props.concat(s.props):this.props,e=new S.Event(r),t=n.length;t--;)e[i=n[t]]=r[i];return e.target||(e.target=E),3===e.target.nodeType&&(e.target=e.target.parentNode),s.filter?s.filter(e,r):e},special:{load:{noBubble:!0},focus:{trigger:function(){if(this!==le()&&this.focus)return this.focus(),!1},delegateType:"focusin"},blur:{trigger:function(){if(this===le()&&this.blur)return this.blur(),!1},delegateType:"focusout"},click:{trigger:function(){if("checkbox"===this.type&&this.click&&S.nodeName(this,"input"))return this.click(),!1},_default:function(e){return S.nodeName(e.target,"a")}},beforeunload:{postDispatch:function(e){void 0!==e.result&&e.originalEvent&&(e.originalEvent.returnValue=e.result)}}}},S.removeEvent=function(e,t,i){e.removeEventListener&&e.removeEventListener(t,i)},S.Event=function(e,t){if(!(this instanceof S.Event))return new S.Event(e,t);e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||void 0===e.defaultPrevented&&!1===e.returnValue?se:oe):this.type=e,t&&S.extend(this,t),this.timeStamp=e&&e.timeStamp||S.now(),this[S.expando]=!0},S.Event.prototype={constructor:S.Event,isDefaultPrevented:oe,isPropagationStopped:oe,isImmediatePropagationStopped:oe,isSimulated:!1,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=se,e&&!this.isSimulated&&e.preventDefault()},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=se,e&&!this.isSimulated&&e.stopPropagation()},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=se,e&&!this.isSimulated&&e.stopImmediatePropagation(),this.stopPropagation()}},S.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(e,a){S.event.special[e]={delegateType:a,bindType:a,handle:function(e){var t,i=e.relatedTarget,n=e.handleObj;return i&&(i===this||S.contains(this,i))||(e.type=n.origType,t=n.handler.apply(this,arguments),e.type=a),t}}}),S.fn.extend({on:function(e,t,i,n){return de(this,e,t,i,n)},one:function(e,t,i,n){return de(this,e,t,i,n,1)},off:function(e,t,i){var n,a;if(e&&e.preventDefault&&e.handleObj)return n=e.handleObj,S(e.delegateTarget).off(n.namespace?n.origType+"."+n.namespace:n.origType,n.selector,n.handler),this;if("object"!=typeof e)return!1!==t&&"function"!=typeof t||(i=t,t=void 0),!1===i&&(i=oe),this.each(function(){S.event.remove(this,e,i,t)});for(a in e)this.off(a,t,e[a]);return this}});var ue=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:-]+)[^>]*)\/>/gi,ce=/<script|<style|<link/i,pe=/checked\s*(?:[^=]|=\s*.checked.)/i,he=/^true\/(.*)/,fe=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;function ve(e,t){return S.nodeName(e,"table")&&S.nodeName(11!==t.nodeType?t:t.firstChild,"tr")?e.getElementsByTagName("tbody")[0]||e.appendChild(e.ownerDocument.createElement("tbody")):e}function me(e){return e.type=(null!==e.getAttribute("type"))+"/"+e.type,e}function ge(e){var t=he.exec(e.type);return t?e.type=t[1]:e.removeAttribute("type"),e}function ye(e,t){var i,n,a,r,s,o,l,d;if(1===t.nodeType){if(H.hasData(e)&&(r=H.access(e),s=H.set(t,r),d=r.events))for(a in delete s.handle,s.events={},d)for(i=0,n=d[a].length;i<n;i++)S.event.add(t,a,d[a][i]);j.hasData(e)&&(o=j.access(e),l=S.extend({},o),j.set(t,l))}}function be(i,n,a,r){n=v.apply([],n);var e,t,s,o,l,d,u=0,c=i.length,p=c-1,h=n[0],f=S.isFunction(h);if(f||1<c&&"string"==typeof h&&!m.checkClone&&pe.test(h))return i.each(function(e){var t=i.eq(e);f&&(n[0]=h.call(this,e,t.html())),be(t,n,a,r)});if(c&&(t=(e=ie(n,i[0].ownerDocument,!1,i,r)).firstChild,1===e.childNodes.length&&(e=t),t||r)){for(o=(s=S.map(Q(e,"script"),me)).length;u<c;u++)l=e,u!==p&&(l=S.clone(l,!0,!0),o&&S.merge(s,Q(l,"script"))),a.call(i[u],l,u);if(o)for(d=s[s.length-1].ownerDocument,S.map(s,ge),u=0;u<o;u++)l=s[u],U.test(l.type||"")&&!H.access(l,"globalEval")&&S.contains(d,l)&&(l.src?S._evalUrl&&S._evalUrl(l.src):S.globalEval(l.textContent.replace(fe,"")))}return i}function xe(e,t,i){for(var n,a=t?S.filter(t,e):e,r=0;null!=(n=a[r]);r++)i||1!==n.nodeType||S.cleanData(Q(n)),n.parentNode&&(i&&S.contains(n.ownerDocument,n)&&J(Q(n,"script")),n.parentNode.removeChild(n));return e}S.extend({htmlPrefilter:function(e){return e.replace(ue,"<$1></$2>")},clone:function(e,t,i){var n,a,r,s,o,l,d,u=e.cloneNode(!0),c=S.contains(e.ownerDocument,e);if(!(m.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||S.isXMLDoc(e)))for(s=Q(u),n=0,a=(r=Q(e)).length;n<a;n++)o=r[n],l=s[n],void 0,"input"===(d=l.nodeName.toLowerCase())&&Y.test(o.type)?l.checked=o.checked:"input"!==d&&"textarea"!==d||(l.defaultValue=o.defaultValue);if(t)if(i)for(r=r||Q(e),s=s||Q(u),n=0,a=r.length;n<a;n++)ye(r[n],s[n]);else ye(e,u);return 0<(s=Q(u,"script")).length&&J(s,!c&&Q(e,"script")),u},cleanData:function(e){for(var t,i,n,a=S.event.special,r=0;void 0!==(i=e[r]);r++)if(N(i)){if(t=i[H.expando]){if(t.events)for(n in t.events)a[n]?S.event.remove(i,n):S.removeEvent(i,n,t.handle);i[H.expando]=void 0}i[j.expando]&&(i[j.expando]=void 0)}}}),S.fn.extend({domManip:be,detach:function(e){return xe(this,e,!0)},remove:function(e){return xe(this,e)},text:function(e){return A(this,function(e){return void 0===e?S.text(this):this.empty().each(function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=e)})},null,e,arguments.length)},append:function(){return be(this,arguments,function(e){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||ve(this,e).appendChild(e)})},prepend:function(){return be(this,arguments,function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=ve(this,e);t.insertBefore(e,t.firstChild)}})},before:function(){return be(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this)})},after:function(){return be(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)})},empty:function(){for(var e,t=0;null!=(e=this[t]);t++)1===e.nodeType&&(S.cleanData(Q(e,!1)),e.textContent="");return this},clone:function(e,t){return e=null!=e&&e,t=null==t?e:t,this.map(function(){return S.clone(this,e,t)})},html:function(e){return A(this,function(e){var t=this[0]||{},i=0,n=this.length;if(void 0===e&&1===t.nodeType)return t.innerHTML;if("string"==typeof e&&!ce.test(e)&&!K[(_.exec(e)||["",""])[1].toLowerCase()]){e=S.htmlPrefilter(e);try{for(;i<n;i++)1===(t=this[i]||{}).nodeType&&(S.cleanData(Q(t,!1)),t.innerHTML=e);t=0}catch(e){}}t&&this.empty().append(e)},null,e,arguments.length)},replaceWith:function(){var i=[];return be(this,arguments,function(e){var t=this.parentNode;S.inArray(this,i)<0&&(S.cleanData(Q(this)),t&&t.replaceChild(e,this))},i)}}),S.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(e,s){S.fn[e]=function(e){for(var t,i=[],n=S(e),a=n.length-1,r=0;r<=a;r++)t=r===a?this:this.clone(!0),S(n[r])[s](t),o.apply(i,t.get());return this.pushStack(i)}});var we,Te={HTML:"block",BODY:"block"};function Ce(e,t){var i=S(t.createElement(e)).appendTo(t.body),n=S.css(i[0],"display");return i.detach(),n}function Ee(e){var t=E,i=Te[e];return i||("none"!==(i=Ce(e,t))&&i||((t=(we=(we||S("<iframe frameborder='0' width='0' height='0'/>")).appendTo(t.documentElement))[0].contentDocument).write(),t.close(),i=Ce(e,t),we.detach()),Te[e]=i),i}function Se(e,t,i,n){var a,r,s={};for(r in t)s[r]=e.style[r],e.style[r]=t[r];for(r in a=i.apply(e,n||[]),t)e.style[r]=s[r];return a}var ke,Me,Pe,$e,Le,De,ze=/^margin/,Ie=new RegExp("^("+X+")(?!px)[a-z%]+$","i"),Ne=function(e){var t=e.ownerDocument.defaultView;return t&&t.opener||(t=C),t.getComputedStyle(e)},Ae=E.documentElement;function Oe(){De.style.cssText="-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;position:relative;display:block;margin:auto;border:1px;padding:1px;top:1%;width:50%",De.innerHTML="",Ae.appendChild(Le);var e=C.getComputedStyle(De);ke="1%"!==e.top,$e="2px"===e.marginLeft,Me="4px"===e.width,De.style.marginRight="50%",Pe="4px"===e.marginRight,Ae.removeChild(Le)}function He(e,t,i){var n,a,r,s,o=e.style;return""!==(s=(i=i||Ne(e))?i.getPropertyValue(t)||i[t]:void 0)&&void 0!==s||S.contains(e.ownerDocument,e)||(s=S.style(e,t)),i&&!m.pixelMarginRight()&&Ie.test(s)&&ze.test(t)&&(n=o.width,a=o.minWidth,r=o.maxWidth,o.minWidth=o.maxWidth=o.width=s,s=i.width,o.width=n,o.minWidth=a,o.maxWidth=r),void 0!==s?s+"":s}function je(e,t){return{get:function(){if(!e())return(this.get=t).apply(this,arguments);delete this.get}}}Le=E.createElement("div"),(De=E.createElement("div")).style&&(De.style.backgroundClip="content-box",De.cloneNode(!0).style.backgroundClip="",m.clearCloneStyle="content-box"===De.style.backgroundClip,Le.style.cssText="border:0;width:8px;height:0;top:0;left:-9999px;padding:0;margin-top:1px;position:absolute",Le.appendChild(De),S.extend(m,{pixelPosition:function(){return Oe(),ke},boxSizingReliable:function(){return null==Me&&Oe(),Me},pixelMarginRight:function(){return null==Me&&Oe(),Pe},reliableMarginLeft:function(){return null==Me&&Oe(),$e},reliableMarginRight:function(){var e,t=De.appendChild(E.createElement("div"));return t.style.cssText=De.style.cssText="-webkit-box-sizing:content-box;box-sizing:content-box;display:block;margin:0;border:0;padding:0",t.style.marginRight=t.style.width="0",De.style.width="1px",Ae.appendChild(Le),e=!parseFloat(C.getComputedStyle(t).marginRight),Ae.removeChild(Le),De.removeChild(t),e}}));var qe=/^(none|table(?!-c[ea]).+)/,Be={position:"absolute",visibility:"hidden",display:"block"},Fe={letterSpacing:"0",fontWeight:"400"},Re=["Webkit","O","Moz","ms"],Xe=E.createElement("div").style;function Ge(e){if(e in Xe)return e;for(var t=e[0].toUpperCase()+e.slice(1),i=Re.length;i--;)if((e=Re[i]+t)in Xe)return e}function Ve(e,t,i){var n=G.exec(t);return n?Math.max(0,n[2]-(i||0))+(n[3]||"px"):t}function We(e,t,i,n,a){for(var r=i===(n?"border":"content")?4:"width"===t?1:0,s=0;r<4;r+=2)"margin"===i&&(s+=S.css(e,i+V[r],!0,a)),n?("content"===i&&(s-=S.css(e,"padding"+V[r],!0,a)),"margin"!==i&&(s-=S.css(e,"border"+V[r]+"Width",!0,a))):(s+=S.css(e,"padding"+V[r],!0,a),"padding"!==i&&(s+=S.css(e,"border"+V[r]+"Width",!0,a)));return s}function Ye(e,t,i){var n=!0,a="width"===t?e.offsetWidth:e.offsetHeight,r=Ne(e),s="border-box"===S.css(e,"boxSizing",!1,r);if(a<=0||null==a){if(((a=He(e,t,r))<0||null==a)&&(a=e.style[t]),Ie.test(a))return a;n=s&&(m.boxSizingReliable()||a===e.style[t]),a=parseFloat(a)||0}return a+We(e,t,i||(s?"border":"content"),n,r)+"px"}function _e(e,t){for(var i,n,a,r=[],s=0,o=e.length;s<o;s++)(n=e[s]).style&&(r[s]=H.get(n,"olddisplay"),i=n.style.display,t?(r[s]||"none"!==i||(n.style.display=""),""===n.style.display&&R(n)&&(r[s]=H.access(n,"olddisplay",Ee(n.nodeName)))):(a=R(n),"none"===i&&a||H.set(n,"olddisplay",a?i:S.css(n,"display"))));for(s=0;s<o;s++)(n=e[s]).style&&(t&&"none"!==n.style.display&&""!==n.style.display||(n.style.display=t?r[s]||"":"none"));return e}function Ue(e,t,i,n,a){return new Ue.prototype.init(e,t,i,n,a)}S.extend({cssHooks:{opacity:{get:function(e,t){if(t){var i=He(e,"opacity");return""===i?"1":i}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{float:"cssFloat"},style:function(e,t,i,n){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var a,r,s,o=S.camelCase(t),l=e.style;if(t=S.cssProps[o]||(S.cssProps[o]=Ge(o)||o),s=S.cssHooks[t]||S.cssHooks[o],void 0===i)return s&&"get"in s&&void 0!==(a=s.get(e,!1,n))?a:l[t];"string"===(r=typeof i)&&(a=G.exec(i))&&a[1]&&(i=W(e,t,a),r="number"),null!=i&&i==i&&("number"===r&&(i+=a&&a[3]||(S.cssNumber[o]?"":"px")),m.clearCloneStyle||""!==i||0!==t.indexOf("background")||(l[t]="inherit"),s&&"set"in s&&void 0===(i=s.set(e,i,n))||(l[t]=i))}},css:function(e,t,i,n){var a,r,s,o=S.camelCase(t);return t=S.cssProps[o]||(S.cssProps[o]=Ge(o)||o),(s=S.cssHooks[t]||S.cssHooks[o])&&"get"in s&&(a=s.get(e,!0,i)),void 0===a&&(a=He(e,t,n)),"normal"===a&&t in Fe&&(a=Fe[t]),""===i||i?(r=parseFloat(a),!0===i||isFinite(r)?r||0:a):a}}),S.each(["height","width"],function(e,s){S.cssHooks[s]={get:function(e,t,i){if(t)return qe.test(S.css(e,"display"))&&0===e.offsetWidth?Se(e,Be,function(){return Ye(e,s,i)}):Ye(e,s,i)},set:function(e,t,i){var n,a=i&&Ne(e),r=i&&We(e,s,i,"border-box"===S.css(e,"boxSizing",!1,a),a);return r&&(n=G.exec(t))&&"px"!==(n[3]||"px")&&(e.style[s]=t,t=S.css(e,s)),Ve(0,t,r)}}}),S.cssHooks.marginLeft=je(m.reliableMarginLeft,function(e,t){if(t)return(parseFloat(He(e,"marginLeft"))||e.getBoundingClientRect().left-Se(e,{marginLeft:0},function(){return e.getBoundingClientRect().left}))+"px"}),S.cssHooks.marginRight=je(m.reliableMarginRight,function(e,t){if(t)return Se(e,{display:"inline-block"},He,[e,"marginRight"])}),S.each({margin:"",padding:"",border:"Width"},function(a,r){S.cssHooks[a+r]={expand:function(e){for(var t=0,i={},n="string"==typeof e?e.split(" "):[e];t<4;t++)i[a+V[t]+r]=n[t]||n[t-2]||n[0];return i}},ze.test(a)||(S.cssHooks[a+r].set=Ve)}),S.fn.extend({css:function(e,t){return A(this,function(e,t,i){var n,a,r={},s=0;if(S.isArray(t)){for(n=Ne(e),a=t.length;s<a;s++)r[t[s]]=S.css(e,t[s],!1,n);return r}return void 0!==i?S.style(e,t,i):S.css(e,t)},e,t,1<arguments.length)},show:function(){return _e(this,!0)},hide:function(){return _e(this)},toggle:function(e){return"boolean"==typeof e?e?this.show():this.hide():this.each(function(){R(this)?S(this).show():S(this).hide()})}}),((S.Tween=Ue).prototype={constructor:Ue,init:function(e,t,i,n,a,r){this.elem=e,this.prop=i,this.easing=a||S.easing._default,this.options=t,this.start=this.now=this.cur(),this.end=n,this.unit=r||(S.cssNumber[i]?"":"px")},cur:function(){var e=Ue.propHooks[this.prop];return e&&e.get?e.get(this):Ue.propHooks._default.get(this)},run:function(e){var t,i=Ue.propHooks[this.prop];return this.options.duration?this.pos=t=S.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration):this.pos=t=e,this.now=(this.end-this.start)*t+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),i&&i.set?i.set(this):Ue.propHooks._default.set(this),this}}).init.prototype=Ue.prototype,(Ue.propHooks={_default:{get:function(e){var t;return 1!==e.elem.nodeType||null!=e.elem[e.prop]&&null==e.elem.style[e.prop]?e.elem[e.prop]:(t=S.css(e.elem,e.prop,""))&&"auto"!==t?t:0},set:function(e){S.fx.step[e.prop]?S.fx.step[e.prop](e):1!==e.elem.nodeType||null==e.elem.style[S.cssProps[e.prop]]&&!S.cssHooks[e.prop]?e.elem[e.prop]=e.now:S.style(e.elem,e.prop,e.now+e.unit)}}}).scrollTop=Ue.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},S.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2},_default:"swing"},S.fx=Ue.prototype.init,S.fx.step={};var Ke,Qe,Je,Ze,et,tt=/^(?:toggle|show|hide)$/,it=/queueHooks$/;function nt(){return C.setTimeout(function(){Ke=void 0}),Ke=S.now()}function at(e,t){var i,n=0,a={height:e};for(t=t?1:0;n<4;n+=2-t)a["margin"+(i=V[n])]=a["padding"+i]=e;return t&&(a.opacity=a.width=e),a}function rt(e,t,i){for(var n,a=(st.tweeners[t]||[]).concat(st.tweeners["*"]),r=0,s=a.length;r<s;r++)if(n=a[r].call(i,t,e))return n}function st(r,e,t){var i,s,n=0,a=st.prefilters.length,o=S.Deferred().always(function(){delete l.elem}),l=function(){if(s)return!1;for(var e=Ke||nt(),t=Math.max(0,d.startTime+d.duration-e),i=1-(t/d.duration||0),n=0,a=d.tweens.length;n<a;n++)d.tweens[n].run(i);return o.notifyWith(r,[d,i,t]),i<1&&a?t:(o.resolveWith(r,[d]),!1)},d=o.promise({elem:r,props:S.extend({},e),opts:S.extend(!0,{specialEasing:{},easing:S.easing._default},t),originalProperties:e,originalOptions:t,startTime:Ke||nt(),duration:t.duration,tweens:[],createTween:function(e,t){var i=S.Tween(r,d.opts,e,t,d.opts.specialEasing[e]||d.opts.easing);return d.tweens.push(i),i},stop:function(e){var t=0,i=e?d.tweens.length:0;if(s)return this;for(s=!0;t<i;t++)d.tweens[t].run(1);return e?(o.notifyWith(r,[d,1,0]),o.resolveWith(r,[d,e])):o.rejectWith(r,[d,e]),this}}),u=d.props;for(!function(e,t){var i,n,a,r,s;for(i in e)if(a=t[n=S.camelCase(i)],r=e[i],S.isArray(r)&&(a=r[1],r=e[i]=r[0]),i!==n&&(e[n]=r,delete e[i]),(s=S.cssHooks[n])&&"expand"in s)for(i in r=s.expand(r),delete e[n],r)i in e||(e[i]=r[i],t[i]=a);else t[n]=a}(u,d.opts.specialEasing);n<a;n++)if(i=st.prefilters[n].call(d,r,u,d.opts))return S.isFunction(i.stop)&&(S._queueHooks(d.elem,d.opts.queue).stop=S.proxy(i.stop,i)),i;return S.map(u,rt,d),S.isFunction(d.opts.start)&&d.opts.start.call(r,d),S.fx.timer(S.extend(l,{elem:r,anim:d,queue:d.opts.queue})),d.progress(d.opts.progress).done(d.opts.done,d.opts.complete).fail(d.opts.fail).always(d.opts.always)}S.Animation=S.extend(st,{tweeners:{"*":[function(e,t){var i=this.createTween(e,t);return W(i.elem,e,G.exec(t),i),i}]},tweener:function(e,t){for(var i,n=0,a=(e=S.isFunction(e)?(t=e,["*"]):e.match(z)).length;n<a;n++)i=e[n],st.tweeners[i]=st.tweeners[i]||[],st.tweeners[i].unshift(t)},prefilters:[function(t,e,i){var n,a,r,s,o,l,d,u=this,c={},p=t.style,h=t.nodeType&&R(t),f=H.get(t,"fxshow");for(n in i.queue||(null==(o=S._queueHooks(t,"fx")).unqueued&&(o.unqueued=0,l=o.empty.fire,o.empty.fire=function(){o.unqueued||l()}),o.unqueued++,u.always(function(){u.always(function(){o.unqueued--,S.queue(t,"fx").length||o.empty.fire()})})),1===t.nodeType&&("height"in e||"width"in e)&&(i.overflow=[p.overflow,p.overflowX,p.overflowY],"inline"===("none"===(d=S.css(t,"display"))?H.get(t,"olddisplay")||Ee(t.nodeName):d)&&"none"===S.css(t,"float")&&(p.display="inline-block")),i.overflow&&(p.overflow="hidden",u.always(function(){p.overflow=i.overflow[0],p.overflowX=i.overflow[1],p.overflowY=i.overflow[2]})),e)if(a=e[n],tt.exec(a)){if(delete e[n],r=r||"toggle"===a,a===(h?"hide":"show")){if("show"!==a||!f||void 0===f[n])continue;h=!0}c[n]=f&&f[n]||S.style(t,n)}else d=void 0;if(S.isEmptyObject(c))"inline"===("none"===d?Ee(t.nodeName):d)&&(p.display=d);else for(n in f?"hidden"in f&&(h=f.hidden):f=H.access(t,"fxshow",{}),r&&(f.hidden=!h),h?S(t).show():u.done(function(){S(t).hide()}),u.done(function(){var e;for(e in H.remove(t,"fxshow"),c)S.style(t,e,c[e])}),c)s=rt(h?f[n]:0,n,u),n in f||(f[n]=s.start,h&&(s.end=s.start,s.start="width"===n||"height"===n?1:0))}],prefilter:function(e,t){t?st.prefilters.unshift(e):st.prefilters.push(e)}}),S.speed=function(e,t,i){var n=e&&"object"==typeof e?S.extend({},e):{complete:i||!i&&t||S.isFunction(e)&&e,duration:e,easing:i&&t||t&&!S.isFunction(t)&&t};return n.duration=S.fx.off?0:"number"==typeof n.duration?n.duration:n.duration in S.fx.speeds?S.fx.speeds[n.duration]:S.fx.speeds._default,null!=n.queue&&!0!==n.queue||(n.queue="fx"),n.old=n.complete,n.complete=function(){S.isFunction(n.old)&&n.old.call(this),n.queue&&S.dequeue(this,n.queue)},n},S.fn.extend({fadeTo:function(e,t,i,n){return this.filter(R).css("opacity",0).show().end().animate({opacity:t},e,i,n)},animate:function(t,e,i,n){function a(){var e=st(this,S.extend({},t),s);(r||H.get(this,"finish"))&&e.stop(!0)}var r=S.isEmptyObject(t),s=S.speed(e,i,n);return a.finish=a,r||!1===s.queue?this.each(a):this.queue(s.queue,a)},stop:function(a,e,r){function s(e){var t=e.stop;delete e.stop,t(r)}return"string"!=typeof a&&(r=e,e=a,a=void 0),e&&!1!==a&&this.queue(a||"fx",[]),this.each(function(){var e=!0,t=null!=a&&a+"queueHooks",i=S.timers,n=H.get(this);if(t)n[t]&&n[t].stop&&s(n[t]);else for(t in n)n[t]&&n[t].stop&&it.test(t)&&s(n[t]);for(t=i.length;t--;)i[t].elem!==this||null!=a&&i[t].queue!==a||(i[t].anim.stop(r),e=!1,i.splice(t,1));!e&&r||S.dequeue(this,a)})},finish:function(s){return!1!==s&&(s=s||"fx"),this.each(function(){var e,t=H.get(this),i=t[s+"queue"],n=t[s+"queueHooks"],a=S.timers,r=i?i.length:0;for(t.finish=!0,S.queue(this,s,[]),n&&n.stop&&n.stop.call(this,!0),e=a.length;e--;)a[e].elem===this&&a[e].queue===s&&(a[e].anim.stop(!0),a.splice(e,1));for(e=0;e<r;e++)i[e]&&i[e].finish&&i[e].finish.call(this);delete t.finish})}}),S.each(["toggle","show","hide"],function(e,n){var a=S.fn[n];S.fn[n]=function(e,t,i){return null==e||"boolean"==typeof e?a.apply(this,arguments):this.animate(at(n,!0),e,t,i)}}),S.each({slideDown:at("show"),slideUp:at("hide"),slideToggle:at("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(e,n){S.fn[e]=function(e,t,i){return this.animate(n,e,t,i)}}),S.timers=[],S.fx.tick=function(){var e,t=0,i=S.timers;for(Ke=S.now();t<i.length;t++)(e=i[t])()||i[t]!==e||i.splice(t--,1);i.length||S.fx.stop(),Ke=void 0},S.fx.timer=function(e){S.timers.push(e),e()?S.fx.start():S.timers.pop()},S.fx.interval=13,S.fx.start=function(){Qe=Qe||C.setInterval(S.fx.tick,S.fx.interval)},S.fx.stop=function(){C.clearInterval(Qe),Qe=null},S.fx.speeds={slow:600,fast:200,_default:400},S.fn.delay=function(n,e){return n=S.fx&&S.fx.speeds[n]||n,e=e||"fx",this.queue(e,function(e,t){var i=C.setTimeout(e,n);t.stop=function(){C.clearTimeout(i)}})},Je=E.createElement("input"),Ze=E.createElement("select"),et=Ze.appendChild(E.createElement("option")),Je.type="checkbox",m.checkOn=""!==Je.value,m.optSelected=et.selected,Ze.disabled=!0,m.optDisabled=!et.disabled,(Je=E.createElement("input")).value="t",Je.type="radio",m.radioValue="t"===Je.value;var ot,lt=S.expr.attrHandle;S.fn.extend({attr:function(e,t){return A(this,S.attr,e,t,1<arguments.length)},removeAttr:function(e){return this.each(function(){S.removeAttr(this,e)})}}),S.extend({attr:function(e,t,i){var n,a,r=e.nodeType;if(3!==r&&8!==r&&2!==r)return void 0===e.getAttribute?S.prop(e,t,i):(1===r&&S.isXMLDoc(e)||(t=t.toLowerCase(),a=S.attrHooks[t]||(S.expr.match.bool.test(t)?ot:void 0)),void 0!==i?null===i?void S.removeAttr(e,t):a&&"set"in a&&void 0!==(n=a.set(e,i,t))?n:(e.setAttribute(t,i+""),i):a&&"get"in a&&null!==(n=a.get(e,t))?n:null==(n=S.find.attr(e,t))?void 0:n)},attrHooks:{type:{set:function(e,t){if(!m.radioValue&&"radio"===t&&S.nodeName(e,"input")){var i=e.value;return e.setAttribute("type",t),i&&(e.value=i),t}}}},removeAttr:function(e,t){var i,n,a=0,r=t&&t.match(z);if(r&&1===e.nodeType)for(;i=r[a++];)n=S.propFix[i]||i,S.expr.match.bool.test(i)&&(e[n]=!1),e.removeAttribute(i)}}),ot={set:function(e,t,i){return!1===t?S.removeAttr(e,i):e.setAttribute(i,i),i}},S.each(S.expr.match.bool.source.match(/\w+/g),function(e,t){var r=lt[t]||S.find.attr;lt[t]=function(e,t,i){var n,a;return i||(a=lt[t],lt[t]=n,n=null!=r(e,t,i)?t.toLowerCase():null,lt[t]=a),n}});var dt=/^(?:input|select|textarea|button)$/i,ut=/^(?:a|area)$/i;S.fn.extend({prop:function(e,t){return A(this,S.prop,e,t,1<arguments.length)},removeProp:function(e){return this.each(function(){delete this[S.propFix[e]||e]})}}),S.extend({prop:function(e,t,i){var n,a,r=e.nodeType;if(3!==r&&8!==r&&2!==r)return 1===r&&S.isXMLDoc(e)||(t=S.propFix[t]||t,a=S.propHooks[t]),void 0!==i?a&&"set"in a&&void 0!==(n=a.set(e,i,t))?n:e[t]=i:a&&"get"in a&&null!==(n=a.get(e,t))?n:e[t]},propHooks:{tabIndex:{get:function(e){var t=S.find.attr(e,"tabindex");return t?parseInt(t,10):dt.test(e.nodeName)||ut.test(e.nodeName)&&e.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),m.optSelected||(S.propHooks.selected={get:function(e){var t=e.parentNode;return t&&t.parentNode&&t.parentNode.selectedIndex,null},set:function(e){var t=e.parentNode;t&&(t.selectedIndex,t.parentNode&&t.parentNode.selectedIndex)}}),S.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){S.propFix[this.toLowerCase()]=this});var ct=/[\t\r\n\f]/g;function pt(e){return e.getAttribute&&e.getAttribute("class")||""}S.fn.extend({addClass:function(t){var e,i,n,a,r,s,o,l=0;if(S.isFunction(t))return this.each(function(e){S(this).addClass(t.call(this,e,pt(this)))});if("string"==typeof t&&t)for(e=t.match(z)||[];i=this[l++];)if(a=pt(i),n=1===i.nodeType&&(" "+a+" ").replace(ct," ")){for(s=0;r=e[s++];)n.indexOf(" "+r+" ")<0&&(n+=r+" ");a!==(o=S.trim(n))&&i.setAttribute("class",o)}return this},removeClass:function(t){var e,i,n,a,r,s,o,l=0;if(S.isFunction(t))return this.each(function(e){S(this).removeClass(t.call(this,e,pt(this)))});if(!arguments.length)return this.attr("class","");if("string"==typeof t&&t)for(e=t.match(z)||[];i=this[l++];)if(a=pt(i),n=1===i.nodeType&&(" "+a+" ").replace(ct," ")){for(s=0;r=e[s++];)for(;-1<n.indexOf(" "+r+" ");)n=n.replace(" "+r+" "," ");a!==(o=S.trim(n))&&i.setAttribute("class",o)}return this},toggleClass:function(a,t){var r=typeof a;return"boolean"==typeof t&&"string"==r?t?this.addClass(a):this.removeClass(a):S.isFunction(a)?this.each(function(e){S(this).toggleClass(a.call(this,e,pt(this),t),t)}):this.each(function(){var e,t,i,n;if("string"==r)for(t=0,i=S(this),n=a.match(z)||[];e=n[t++];)i.hasClass(e)?i.removeClass(e):i.addClass(e);else void 0!==a&&"boolean"!=r||((e=pt(this))&&H.set(this,"__className__",e),this.setAttribute&&this.setAttribute("class",e||!1===a?"":H.get(this,"__className__")||""))})},hasClass:function(e){var t,i,n=0;for(t=" "+e+" ";i=this[n++];)if(1===i.nodeType&&-1<(" "+pt(i)+" ").replace(ct," ").indexOf(t))return!0;return!1}});var ht=/\r/g,ft=/[\x20\t\r\n\f]+/g;S.fn.extend({val:function(i){var n,e,a,t=this[0];return arguments.length?(a=S.isFunction(i),this.each(function(e){var t;1===this.nodeType&&(null==(t=a?i.call(this,e,S(this).val()):i)?t="":"number"==typeof t?t+="":S.isArray(t)&&(t=S.map(t,function(e){return null==e?"":e+""})),(n=S.valHooks[this.type]||S.valHooks[this.nodeName.toLowerCase()])&&"set"in n&&void 0!==n.set(this,t,"value")||(this.value=t))})):t?(n=S.valHooks[t.type]||S.valHooks[t.nodeName.toLowerCase()])&&"get"in n&&void 0!==(e=n.get(t,"value"))?e:"string"==typeof(e=t.value)?e.replace(ht,""):null==e?"":e:void 0}}),S.extend({valHooks:{option:{get:function(e){var t=S.find.attr(e,"value");return null!=t?t:S.trim(S.text(e)).replace(ft," ")}},select:{get:function(e){for(var t,i,n=e.options,a=e.selectedIndex,r="select-one"===e.type||a<0,s=r?null:[],o=r?a+1:n.length,l=a<0?o:r?a:0;l<o;l++)if(((i=n[l]).selected||l===a)&&(m.optDisabled?!i.disabled:null===i.getAttribute("disabled"))&&(!i.parentNode.disabled||!S.nodeName(i.parentNode,"optgroup"))){if(t=S(i).val(),r)return t;s.push(t)}return s},set:function(e,t){for(var i,n,a=e.options,r=S.makeArray(t),s=a.length;s--;)((n=a[s]).selected=-1<S.inArray(S.valHooks.option.get(n),r))&&(i=!0);return i||(e.selectedIndex=-1),r}}}}),S.each(["radio","checkbox"],function(){S.valHooks[this]={set:function(e,t){if(S.isArray(t))return e.checked=-1<S.inArray(S(e).val(),t)}},m.checkOn||(S.valHooks[this].get=function(e){return null===e.getAttribute("value")?"on":e.value})});var vt=/^(?:focusinfocus|focusoutblur)$/;S.extend(S.event,{trigger:function(e,t,i,n){var a,r,s,o,l,d,u,c=[i||E],p=f.call(e,"type")?e.type:e,h=f.call(e,"namespace")?e.namespace.split("."):[];if(r=s=i=i||E,3!==i.nodeType&&8!==i.nodeType&&!vt.test(p+S.event.triggered)&&(-1<p.indexOf(".")&&(p=(h=p.split(".")).shift(),h.sort()),l=p.indexOf(":")<0&&"on"+p,(e=e[S.expando]?e:new S.Event(p,"object"==typeof e&&e)).isTrigger=n?2:3,e.namespace=h.join("."),e.rnamespace=e.namespace?new RegExp("(^|\\.)"+h.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,e.result=void 0,e.target||(e.target=i),t=null==t?[e]:S.makeArray(t,[e]),u=S.event.special[p]||{},n||!u.trigger||!1!==u.trigger.apply(i,t))){if(!n&&!u.noBubble&&!S.isWindow(i)){for(o=u.delegateType||p,vt.test(o+p)||(r=r.parentNode);r;r=r.parentNode)c.push(r),s=r;s===(i.ownerDocument||E)&&c.push(s.defaultView||s.parentWindow||C)}for(a=0;(r=c[a++])&&!e.isPropagationStopped();)e.type=1<a?o:u.bindType||p,(d=(H.get(r,"events")||{})[e.type]&&H.get(r,"handle"))&&d.apply(r,t),(d=l&&r[l])&&d.apply&&N(r)&&(e.result=d.apply(r,t),!1===e.result&&e.preventDefault());return e.type=p,n||e.isDefaultPrevented()||u._default&&!1!==u._default.apply(c.pop(),t)||!N(i)||l&&S.isFunction(i[p])&&!S.isWindow(i)&&((s=i[l])&&(i[l]=null),i[S.event.triggered=p](),S.event.triggered=void 0,s&&(i[l]=s)),e.result}},simulate:function(e,t,i){var n=S.extend(new S.Event,i,{type:e,isSimulated:!0});S.event.trigger(n,null,t)}}),S.fn.extend({trigger:function(e,t){return this.each(function(){S.event.trigger(e,t,this)})},triggerHandler:function(e,t){var i=this[0];if(i)return S.event.trigger(e,t,i,!0)}}),S.each("blur focus focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup error contextmenu".split(" "),function(e,i){S.fn[i]=function(e,t){return 0<arguments.length?this.on(i,null,e,t):this.trigger(i)}}),S.fn.extend({hover:function(e,t){return this.mouseenter(e).mouseleave(t||e)}}),m.focusin="onfocusin"in C,m.focusin||S.each({focus:"focusin",blur:"focusout"},function(i,n){function a(e){S.event.simulate(n,e.target,S.event.fix(e))}S.event.special[n]={setup:function(){var e=this.ownerDocument||this,t=H.access(e,n);t||e.addEventListener(i,a,!0),H.access(e,n,(t||0)+1)},teardown:function(){var e=this.ownerDocument||this,t=H.access(e,n)-1;t?H.access(e,n,t):(e.removeEventListener(i,a,!0),H.remove(e,n))}}});var mt=C.location,gt=S.now(),yt=/\?/;S.parseJSON=function(e){return JSON.parse(e+"")},S.parseXML=function(e){var t;if(!e||"string"!=typeof e)return null;try{t=(new C.DOMParser).parseFromString(e,"text/xml")}catch(e){t=void 0}return t&&!t.getElementsByTagName("parsererror").length||S.error("Invalid XML: "+e),t};var bt=/#.*$/,xt=/([?&])_=[^&]*/,wt=/^(.*?):[ \t]*([^\r\n]*)$/gm,Tt=/^(?:GET|HEAD)$/,Ct=/^\/\//,Et={},St={},kt="*/".concat("*"),Mt=E.createElement("a");function Pt(r){return function(e,t){"string"!=typeof e&&(t=e,e="*");var i,n=0,a=e.toLowerCase().match(z)||[];if(S.isFunction(t))for(;i=a[n++];)"+"===i[0]?(i=i.slice(1)||"*",(r[i]=r[i]||[]).unshift(t)):(r[i]=r[i]||[]).push(t)}}function $t(t,a,r,s){var o={},l=t===St;function d(e){var n;return o[e]=!0,S.each(t[e]||[],function(e,t){var i=t(a,r,s);return"string"!=typeof i||l||o[i]?l?!(n=i):void 0:(a.dataTypes.unshift(i),d(i),!1)}),n}return d(a.dataTypes[0])||!o["*"]&&d("*")}function Lt(e,t){var i,n,a=S.ajaxSettings.flatOptions||{};for(i in t)void 0!==t[i]&&((a[i]?e:n=n||{})[i]=t[i]);return n&&S.extend(!0,e,n),e}Mt.href=mt.href,S.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:mt.href,type:"GET",isLocal:/^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(mt.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":kt,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":S.parseJSON,"text xml":S.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(e,t){return t?Lt(Lt(e,S.ajaxSettings),t):Lt(S.ajaxSettings,e)},ajaxPrefilter:Pt(Et),ajaxTransport:Pt(St),ajax:function(e,t){"object"==typeof e&&(t=e,e=void 0),t=t||{};var u,c,p,i,h,n,f,a,v=S.ajaxSetup({},t),m=v.context||v,g=v.context&&(m.nodeType||m.jquery)?S(m):S.event,y=S.Deferred(),b=S.Callbacks("once memory"),x=v.statusCode||{},r={},s={},w=0,o="canceled",T={readyState:0,getResponseHeader:function(e){var t;if(2===w){if(!i)for(i={};t=wt.exec(p);)i[t[1].toLowerCase()]=t[2];t=i[e.toLowerCase()]}return null==t?null:t},getAllResponseHeaders:function(){return 2===w?p:null},setRequestHeader:function(e,t){var i=e.toLowerCase();return w||(e=s[i]=s[i]||e,r[e]=t),this},overrideMimeType:function(e){return w||(v.mimeType=e),this},statusCode:function(e){var t;if(e)if(w<2)for(t in e)x[t]=[x[t],e[t]];else T.always(e[T.status]);return this},abort:function(e){var t=e||o;return u&&u.abort(t),l(0,t),this}};if(y.promise(T).complete=b.add,T.success=T.done,T.error=T.fail,v.url=((e||v.url||mt.href)+"").replace(bt,"").replace(Ct,mt.protocol+"//"),v.type=t.method||t.type||v.method||v.type,v.dataTypes=S.trim(v.dataType||"*").toLowerCase().match(z)||[""],null==v.crossDomain){n=E.createElement("a");try{n.href=v.url,n.href=n.href,v.crossDomain=Mt.protocol+"//"+Mt.host!=n.protocol+"//"+n.host}catch(e){v.crossDomain=!0}}if(v.data&&v.processData&&"string"!=typeof v.data&&(v.data=S.param(v.data,v.traditional)),$t(Et,v,t,T),2===w)return T;for(a in(f=S.event&&v.global)&&0==S.active++&&S.event.trigger("ajaxStart"),v.type=v.type.toUpperCase(),v.hasContent=!Tt.test(v.type),c=v.url,v.hasContent||(v.data&&(c=v.url+=(yt.test(c)?"&":"?")+v.data,delete v.data),!1===v.cache&&(v.url=xt.test(c)?c.replace(xt,"$1_="+gt++):c+(yt.test(c)?"&":"?")+"_="+gt++)),v.ifModified&&(S.lastModified[c]&&T.setRequestHeader("If-Modified-Since",S.lastModified[c]),S.etag[c]&&T.setRequestHeader("If-None-Match",S.etag[c])),(v.data&&v.hasContent&&!1!==v.contentType||t.contentType)&&T.setRequestHeader("Content-Type",v.contentType),T.setRequestHeader("Accept",v.dataTypes[0]&&v.accepts[v.dataTypes[0]]?v.accepts[v.dataTypes[0]]+("*"!==v.dataTypes[0]?", "+kt+"; q=0.01":""):v.accepts["*"]),v.headers)T.setRequestHeader(a,v.headers[a]);if(v.beforeSend&&(!1===v.beforeSend.call(m,T,v)||2===w))return T.abort();for(a in o="abort",{success:1,error:1,complete:1})T[a](v[a]);if(u=$t(St,v,t,T)){if(T.readyState=1,f&&g.trigger("ajaxSend",[T,v]),2===w)return T;v.async&&0<v.timeout&&(h=C.setTimeout(function(){T.abort("timeout")},v.timeout));try{w=1,u.send(r,l)}catch(e){if(!(w<2))throw e;l(-1,e)}}else l(-1,"No Transport");function l(e,t,i,n){var a,r,s,o,l,d=t;2!==w&&(w=2,h&&C.clearTimeout(h),u=void 0,p=n||"",T.readyState=0<e?4:0,a=200<=e&&e<300||304===e,i&&(o=function(e,t,i){for(var n,a,r,s,o=e.contents,l=e.dataTypes;"*"===l[0];)l.shift(),void 0===n&&(n=e.mimeType||t.getResponseHeader("Content-Type"));if(n)for(a in o)if(o[a]&&o[a].test(n)){l.unshift(a);break}if(l[0]in i)r=l[0];else{for(a in i){if(!l[0]||e.converters[a+" "+l[0]]){r=a;break}s=s||a}r=r||s}if(r)return r!==l[0]&&l.unshift(r),i[r]}(v,T,i)),o=function(e,t,i,n){var a,r,s,o,l,d={},u=e.dataTypes.slice();if(u[1])for(s in e.converters)d[s.toLowerCase()]=e.converters[s];for(r=u.shift();r;)if(e.responseFields[r]&&(i[e.responseFields[r]]=t),!l&&n&&e.dataFilter&&(t=e.dataFilter(t,e.dataType)),l=r,r=u.shift())if("*"===r)r=l;else if("*"!==l&&l!==r){if(!(s=d[l+" "+r]||d["* "+r]))for(a in d)if((o=a.split(" "))[1]===r&&(s=d[l+" "+o[0]]||d["* "+o[0]])){!0===s?s=d[a]:!0!==d[a]&&(r=o[0],u.unshift(o[1]));break}if(!0!==s)if(s&&e.throws)t=s(t);else try{t=s(t)}catch(e){return{state:"parsererror",error:s?e:"No conversion from "+l+" to "+r}}}return{state:"success",data:t}}(v,o,T,a),a?(v.ifModified&&((l=T.getResponseHeader("Last-Modified"))&&(S.lastModified[c]=l),(l=T.getResponseHeader("etag"))&&(S.etag[c]=l)),204===e||"HEAD"===v.type?d="nocontent":304===e?d="notmodified":(d=o.state,r=o.data,a=!(s=o.error))):(s=d,!e&&d||(d="error",e<0&&(e=0))),T.status=e,T.statusText=(t||d)+"",a?y.resolveWith(m,[r,d,T]):y.rejectWith(m,[T,d,s]),T.statusCode(x),x=void 0,f&&g.trigger(a?"ajaxSuccess":"ajaxError",[T,v,a?r:s]),b.fireWith(m,[T,d]),f&&(g.trigger("ajaxComplete",[T,v]),--S.active||S.event.trigger("ajaxStop")))}return T},getJSON:function(e,t,i){return S.get(e,t,i,"json")},getScript:function(e,t){return S.get(e,void 0,t,"script")}}),S.each(["get","post"],function(e,a){S[a]=function(e,t,i,n){return S.isFunction(t)&&(n=n||i,i=t,t=void 0),S.ajax(S.extend({url:e,type:a,dataType:n,data:t,success:i},S.isPlainObject(e)&&e))}}),S._evalUrl=function(e){return S.ajax({url:e,type:"GET",dataType:"script",async:!1,global:!1,throws:!0})},S.fn.extend({wrapAll:function(t){var e;return S.isFunction(t)?this.each(function(e){S(this).wrapAll(t.call(this,e))}):(this[0]&&(e=S(t,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&e.insertBefore(this[0]),e.map(function(){for(var e=this;e.firstElementChild;)e=e.firstElementChild;return e}).append(this)),this)},wrapInner:function(i){return S.isFunction(i)?this.each(function(e){S(this).wrapInner(i.call(this,e))}):this.each(function(){var e=S(this),t=e.contents();t.length?t.wrapAll(i):e.append(i)})},wrap:function(t){var i=S.isFunction(t);return this.each(function(e){S(this).wrapAll(i?t.call(this,e):t)})},unwrap:function(){return this.parent().each(function(){S.nodeName(this,"body")||S(this).replaceWith(this.childNodes)}).end()}}),S.expr.filters.hidden=function(e){return!S.expr.filters.visible(e)},S.expr.filters.visible=function(e){return 0<e.offsetWidth||0<e.offsetHeight||0<e.getClientRects().length};var Dt=/%20/g,zt=/\[\]$/,It=/\r?\n/g,Nt=/^(?:submit|button|image|reset|file)$/i,At=/^(?:input|select|textarea|keygen)/i;function Ot(i,e,n,a){var t;if(S.isArray(e))S.each(e,function(e,t){n||zt.test(i)?a(i,t):Ot(i+"["+("object"==typeof t&&null!=t?e:"")+"]",t,n,a)});else if(n||"object"!==S.type(e))a(i,e);else for(t in e)Ot(i+"["+t+"]",e[t],n,a)}S.param=function(e,t){function i(e,t){t=S.isFunction(t)?t():null==t?"":t,a[a.length]=encodeURIComponent(e)+"="+encodeURIComponent(t)}var n,a=[];if(void 0===t&&(t=S.ajaxSettings&&S.ajaxSettings.traditional),S.isArray(e)||e.jquery&&!S.isPlainObject(e))S.each(e,function(){i(this.name,this.value)});else for(n in e)Ot(n,e[n],t,i);return a.join("&").replace(Dt,"+")},S.fn.extend({serialize:function(){return S.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var e=S.prop(this,"elements");return e?S.makeArray(e):this}).filter(function(){var e=this.type;return this.name&&!S(this).is(":disabled")&&At.test(this.nodeName)&&!Nt.test(e)&&(this.checked||!Y.test(e))}).map(function(e,t){var i=S(this).val();return null==i?null:S.isArray(i)?S.map(i,function(e){return{name:t.name,value:e.replace(It,"\r\n")}}):{name:t.name,value:i.replace(It,"\r\n")}}).get()}}),S.ajaxSettings.xhr=function(){try{return new C.XMLHttpRequest}catch(e){}};var Ht={0:200,1223:204},jt=S.ajaxSettings.xhr();m.cors=!!jt&&"withCredentials"in jt,m.ajax=jt=!!jt,S.ajaxTransport(function(a){var r,s;if(m.cors||jt&&!a.crossDomain)return{send:function(e,t){var i,n=a.xhr();if(n.open(a.type,a.url,a.async,a.username,a.password),a.xhrFields)for(i in a.xhrFields)n[i]=a.xhrFields[i];for(i in a.mimeType&&n.overrideMimeType&&n.overrideMimeType(a.mimeType),a.crossDomain||e["X-Requested-With"]||(e["X-Requested-With"]="XMLHttpRequest"),e)n.setRequestHeader(i,e[i]);r=function(e){return function(){r&&(r=s=n.onload=n.onerror=n.onabort=n.onreadystatechange=null,"abort"===e?n.abort():"error"===e?"number"!=typeof n.status?t(0,"error"):t(n.status,n.statusText):t(Ht[n.status]||n.status,n.statusText,"text"!==(n.responseType||"text")||"string"!=typeof n.responseText?{binary:n.response}:{text:n.responseText},n.getAllResponseHeaders()))}},n.onload=r(),s=n.onerror=r("error"),void 0!==n.onabort?n.onabort=s:n.onreadystatechange=function(){4===n.readyState&&C.setTimeout(function(){r&&s()})},r=r("abort");try{n.send(a.hasContent&&a.data||null)}catch(e){if(r)throw e}},abort:function(){r&&r()}}}),S.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(e){return S.globalEval(e),e}}}),S.ajaxPrefilter("script",function(e){void 0===e.cache&&(e.cache=!1),e.crossDomain&&(e.type="GET")}),S.ajaxTransport("script",function(i){var n,a;if(i.crossDomain)return{send:function(e,t){n=S("<script>").prop({charset:i.scriptCharset,src:i.url}).on("load error",a=function(e){n.remove(),a=null,e&&t("error"===e.type?404:200,e.type)}),E.head.appendChild(n[0])},abort:function(){a&&a()}}});var qt=[],Bt=/(=)\?(?=&|$)|\?\?/;S.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var e=qt.pop()||S.expando+"_"+gt++;return this[e]=!0,e}}),S.ajaxPrefilter("json jsonp",function(e,t,i){var n,a,r,s=!1!==e.jsonp&&(Bt.test(e.url)?"url":"string"==typeof e.data&&0===(e.contentType||"").indexOf("application/x-www-form-urlencoded")&&Bt.test(e.data)&&"data");if(s||"jsonp"===e.dataTypes[0])return n=e.jsonpCallback=S.isFunction(e.jsonpCallback)?e.jsonpCallback():e.jsonpCallback,s?e[s]=e[s].replace(Bt,"$1"+n):!1!==e.jsonp&&(e.url+=(yt.test(e.url)?"&":"?")+e.jsonp+"="+n),e.converters["script json"]=function(){return r||S.error(n+" was not called"),r[0]},e.dataTypes[0]="json",a=C[n],C[n]=function(){r=arguments},i.always(function(){void 0===a?S(C).removeProp(n):C[n]=a,e[n]&&(e.jsonpCallback=t.jsonpCallback,qt.push(n)),r&&S.isFunction(a)&&a(r[0]),r=a=void 0}),"script"}),S.parseHTML=function(e,t,i){if(!e||"string"!=typeof e)return null;"boolean"==typeof t&&(i=t,t=!1),t=t||E;var n=x.exec(e),a=!i&&[];return n?[t.createElement(n[1])]:(n=ie([e],t,a),a&&a.length&&S(a).remove(),S.merge([],n.childNodes))};var Ft=S.fn.load;function Rt(e){return S.isWindow(e)?e:9===e.nodeType&&e.defaultView}S.fn.load=function(e,t,i){if("string"!=typeof e&&Ft)return Ft.apply(this,arguments);var n,a,r,s=this,o=e.indexOf(" ");return-1<o&&(n=S.trim(e.slice(o)),e=e.slice(0,o)),S.isFunction(t)?(i=t,t=void 0):t&&"object"==typeof t&&(a="POST"),0<s.length&&S.ajax({url:e,type:a||"GET",dataType:"html",data:t}).done(function(e){r=arguments,s.html(n?S("<div>").append(S.parseHTML(e)).find(n):e)}).always(i&&function(e,t){s.each(function(){i.apply(this,r||[e.responseText,t,e])})}),this},S.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(e,t){S.fn[t]=function(e){return this.on(t,e)}}),S.expr.filters.animated=function(t){return S.grep(S.timers,function(e){return t===e.elem}).length},S.offset={setOffset:function(e,t,i){var n,a,r,s,o,l,d=S.css(e,"position"),u=S(e),c={};"static"===d&&(e.style.position="relative"),o=u.offset(),r=S.css(e,"top"),l=S.css(e,"left"),a=("absolute"===d||"fixed"===d)&&-1<(r+l).indexOf("auto")?(s=(n=u.position()).top,n.left):(s=parseFloat(r)||0,parseFloat(l)||0),S.isFunction(t)&&(t=t.call(e,i,S.extend({},o))),null!=t.top&&(c.top=t.top-o.top+s),null!=t.left&&(c.left=t.left-o.left+a),"using"in t?t.using.call(e,c):u.css(c)}},S.fn.extend({offset:function(t){if(arguments.length)return void 0===t?this:this.each(function(e){S.offset.setOffset(this,t,e)});var e,i,n=this[0],a={top:0,left:0},r=n&&n.ownerDocument;return r?(e=r.documentElement,S.contains(e,n)?(a=n.getBoundingClientRect(),i=Rt(r),{top:a.top+i.pageYOffset-e.clientTop,left:a.left+i.pageXOffset-e.clientLeft}):a):void 0},position:function(){if(this[0]){var e,t,i=this[0],n={top:0,left:0};return"fixed"===S.css(i,"position")?t=i.getBoundingClientRect():(e=this.offsetParent(),t=this.offset(),S.nodeName(e[0],"html")||(n=e.offset()),n.top+=S.css(e[0],"borderTopWidth",!0),n.left+=S.css(e[0],"borderLeftWidth",!0)),{top:t.top-n.top-S.css(i,"marginTop",!0),left:t.left-n.left-S.css(i,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){for(var e=this.offsetParent;e&&"static"===S.css(e,"position");)e=e.offsetParent;return e||Ae})}}),S.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(t,a){var r="pageYOffset"===a;S.fn[t]=function(e){return A(this,function(e,t,i){var n=Rt(e);if(void 0===i)return n?n[a]:e[t];n?n.scrollTo(r?n.pageXOffset:i,r?i:n.pageYOffset):e[t]=i},t,e,arguments.length)}}),S.each(["top","left"],function(e,i){S.cssHooks[i]=je(m.pixelPosition,function(e,t){if(t)return t=He(e,i),Ie.test(t)?S(e).position()[i]+"px":t})}),S.each({Height:"height",Width:"width"},function(r,s){S.each({padding:"inner"+r,content:s,"":"outer"+r},function(n,e){S.fn[e]=function(e,t){var i=arguments.length&&(n||"boolean"!=typeof e),a=n||(!0===e||!0===t?"margin":"border");return A(this,function(e,t,i){var n;return S.isWindow(e)?e.document.documentElement["client"+r]:9===e.nodeType?(n=e.documentElement,Math.max(e.body["scroll"+r],n["scroll"+r],e.body["offset"+r],n["offset"+r],n["client"+r])):void 0===i?S.css(e,t,a):S.style(e,t,i,a)},s,i?e:void 0,i,null)}})}),S.fn.extend({bind:function(e,t,i){return this.on(e,null,t,i)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,i,n){return this.on(t,e,i,n)},undelegate:function(e,t,i){return 1===arguments.length?this.off(e,"**"):this.off(t,e||"**",i)},size:function(){return this.length}}),S.fn.andSelf=S.fn.addBack,"function"==typeof define&&define.amd&&define("jquery",[],function(){return S});var Xt=C.jQuery,Gt=C.$;return S.noConflict=function(e){return C.$===S&&(C.$=Gt),e&&C.jQuery===S&&(C.jQuery=Xt),S},e||(C.jQuery=C.$=S),S}),$(document).ready(function(){new Swiper(".swiper-hero",{navigation:{nextEl:".swiper-button-next",prevEl:".swiper-button-prev"},autoplay:{delay:3500},loop:!0,roundLengths:!0,autoHeight:!1,slidesPerView:1,spaceBetween:0});var e=new Swiper(".swiperdev-controls",{spaceBetween:0,slidesPerView:4,loop:!1,freeMode:!0,watchSlidesVisibility:!0,watchSlidesProgress:!0});new Swiper(".swiperdev-main",{navigation:{nextEl:".swiper-button-next",prevEl:".swiper-button-prev"},autoHeight:!1,autoplay:{delay:4500},roundLengths:!0,slidesPerView:1,spaceBetween:10,loop:!1,thumbs:{swiper:e}});$(function(){$(".dropdown-toggle").click(function(){$(this).next(".dropdown").toggle(),$(".header").hasClass("sticky-mob")?$(".nav-mobile ul").addClass("ul-sticky"):$(".nav-mobile ul").removeClass("ul-sticky")}),$(document).click(function(e){var t=e.target;$(t).is(".dropdown-toggle")||$(t).parents().is(".dropdown-toggle")||$(".dropdown").hide()})}),$(".section-portfolio .button-expand").on("click",function(){$(".section-portfolio .col.display-toggle").hasClass("hidden")?($(".section-portfolio .col.display-toggle").removeClass("hidden"),setTimeout(function(){$(".section-portfolio .col.display-toggle").removeClass("visuallyhidden")},20)):($(".section-portfolio .col.display-toggle").addClass("visuallyhidden"),$(".section-portfolio .col.display-toggle").one("transitionend",function(e){$(".section-portfolio .col.display-toggle").addClass("hidden")})),$(".section-portfolio .icon-rotate").toggleClass("rotate")}),$(".section-portfolio .button-expand").on("click",function(e){e.preventDefault(),$(".section-portfolio .section-description.display-toggle").toggleClass("invisible")});var t,i=document.getElementsByClassName("nav-item");function n(e){return function(){$(".nav-item").removeClass("isactive"),$(i[e]).addClass("isactive"),$("html, body").animate({scrollTop:$($(this).attr("href")).offset().top},500,"linear")}}for(t=0;t<i.length;t++)$(i[t]).on("click",n(t));var a,r=document.getElementsByClassName("nav-item-mob");for(a=0;a<r.length;a++)$(r[a]).on("click",function(){$("html, body").animate({scrollTop:$($(this).attr("href")).offset().top},500,"linear")});$(".button-scroll").on("click",function(e){e.preventDefault(),$("html, body").animate({scrollTop:$($(this).attr("href")).offset().top},500,"linear")}),$(".button-hardskills").on("click",function(){$(".col.skill").not("hidden")&&($(".col.skill").addClass("visuallyhidden"),$(".col.skill").addClass("hidden")),$(".col.skill.hard-skill").removeClass("hidden"),setTimeout(function(){$(".col.skill.hard-skill").removeClass("visuallyhidden")},20)}),$(".button-softskills").on("click",function(){$(".col.skill").not("hidden")&&($(".col.skill").addClass("visuallyhidden"),$(".col.skill").addClass("hidden")),$(".col.skill.soft-skill").removeClass("hidden"),setTimeout(function(){$(".col.skill.soft-skill").removeClass("visuallyhidden")},20)}),$(".button-approaches").on("click",function(){$(".col.skill").not("hidden")&&($(".col.skill").addClass("visuallyhidden"),$(".col.skill").addClass("hidden")),$(".col.skill.approach").removeClass("hidden"),setTimeout(function(){$(".col.skill.approach").removeClass("visuallyhidden")},20)}),$(".button-tools").on("click",function(){$(".col.skill").not("hidden")&&($(".col.skill").addClass("visuallyhidden"),$(".col.skill").addClass("hidden")),$(".col.skill.tool").removeClass("hidden"),setTimeout(function(){$(".col.skill.tool").removeClass("visuallyhidden")},20)}),$(".button-all").on("click",function(){$(".col.skill").hasClass("hidden")&&($(".col.skill").removeClass("hidden"),setTimeout(function(){$(".col.skill").removeClass("visuallyhidden")},20))});var s,o=document.getElementsByClassName("button-tab");function l(e){return function(){$(".button-tab").removeClass("active"),$(o[e]).addClass("active")}}for(s=0;s<o.length;s++)$(o[s]).on("click",l(s));function d(e){if(e.matches){window.onscroll=function(){i()};var t=(n=document.getElementById("header")).offsetTop;function i(){window.pageYOffset>=t?n.classList.add("sticky-mob"):n.classList.remove("sticky-mob")}}else{window.onscroll=function(){i()};var n;t=(n=document.getElementById("header")).offsetTop;function i(){window.pageYOffset>=t?n.classList.add("sticky"):n.classList.remove("sticky")}}}$(".button-hardskills").click();var u=window.matchMedia("(max-width: 640px)");d(u),u.addListener(d)}),function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t():"function"==typeof define&&define.amd?define(t):(e=e||self).Swiper=t()}(this,function(){"use strict";var v="undefined"==typeof document?{body:{},addEventListener:function(){},removeEventListener:function(){},activeElement:{blur:function(){},nodeName:""},querySelector:function(){return null},querySelectorAll:function(){return[]},getElementById:function(){return null},createEvent:function(){return{initEvent:function(){}}},createElement:function(){return{children:[],childNodes:[],style:{},setAttribute:function(){},getElementsByTagName:function(){return[]}}},location:{hash:""}}:document,Z="undefined"==typeof window?{document:v,navigator:{userAgent:""},location:{},history:{},CustomEvent:function(){return this},addEventListener:function(){},removeEventListener:function(){},getComputedStyle:function(){return{getPropertyValue:function(){return""}}},Image:function(){},Date:function(){},screen:{},setTimeout:function(){},clearTimeout:function(){}}:window,l=function(e){for(var t=0;t<e.length;t+=1)this[t]=e[t];return this.length=e.length,this};function D(e,t){var i=[],n=0;if(e&&!t&&e instanceof l)return e;if(e)if("string"==typeof e){var a,r,s=e.trim();if(0<=s.indexOf("<")&&0<=s.indexOf(">")){var o="div";for(0===s.indexOf("<li")&&(o="ul"),0===s.indexOf("<tr")&&(o="tbody"),0!==s.indexOf("<td")&&0!==s.indexOf("<th")||(o="tr"),0===s.indexOf("<tbody")&&(o="table"),0===s.indexOf("<option")&&(o="select"),(r=v.createElement(o)).innerHTML=s,n=0;n<r.childNodes.length;n+=1)i.push(r.childNodes[n])}else for(a=t||"#"!==e[0]||e.match(/[ .<>:~]/)?(t||v).querySelectorAll(e.trim()):[v.getElementById(e.trim().split("#")[1])],n=0;n<a.length;n+=1)a[n]&&i.push(a[n])}else if(e.nodeType||e===Z||e===v)i.push(e);else if(0<e.length&&e[0].nodeType)for(n=0;n<e.length;n+=1)i.push(e[n]);return new l(i)}function r(e){for(var t=[],i=0;i<e.length;i+=1)-1===t.indexOf(e[i])&&t.push(e[i]);return t}D.fn=l.prototype,D.Class=l,D.Dom7=l;var t={addClass:function(e){if(void 0===e)return this;for(var t=e.split(" "),i=0;i<t.length;i+=1)for(var n=0;n<this.length;n+=1)void 0!==this[n]&&void 0!==this[n].classList&&this[n].classList.add(t[i]);return this},removeClass:function(e){for(var t=e.split(" "),i=0;i<t.length;i+=1)for(var n=0;n<this.length;n+=1)void 0!==this[n]&&void 0!==this[n].classList&&this[n].classList.remove(t[i]);return this},hasClass:function(e){return!!this[0]&&this[0].classList.contains(e)},toggleClass:function(e){for(var t=e.split(" "),i=0;i<t.length;i+=1)for(var n=0;n<this.length;n+=1)void 0!==this[n]&&void 0!==this[n].classList&&this[n].classList.toggle(t[i]);return this},attr:function(e,t){var i=arguments;if(1===arguments.length&&"string"==typeof e)return this[0]?this[0].getAttribute(e):void 0;for(var n=0;n<this.length;n+=1)if(2===i.length)this[n].setAttribute(e,t);else for(var a in e)this[n][a]=e[a],this[n].setAttribute(a,e[a]);return this},removeAttr:function(e){for(var t=0;t<this.length;t+=1)this[t].removeAttribute(e);return this},data:function(e,t){var i;if(void 0!==t){for(var n=0;n<this.length;n+=1)(i=this[n]).dom7ElementDataStorage||(i.dom7ElementDataStorage={}),i.dom7ElementDataStorage[e]=t;return this}if(i=this[0])return i.dom7ElementDataStorage&&e in i.dom7ElementDataStorage?i.dom7ElementDataStorage[e]:i.getAttribute("data-"+e)||void 0},transform:function(e){for(var t=0;t<this.length;t+=1){var i=this[t].style;i.webkitTransform=e,i.transform=e}return this},transition:function(e){"string"!=typeof e&&(e+="ms");for(var t=0;t<this.length;t+=1){var i=this[t].style;i.webkitTransitionDuration=e,i.transitionDuration=e}return this},on:function(){for(var e,t=[],i=arguments.length;i--;)t[i]=arguments[i];var n=t[0],r=t[1],s=t[2],a=t[3];function o(e){var t=e.target;if(t){var i=e.target.dom7EventData||[];if(i.indexOf(e)<0&&i.unshift(e),D(t).is(r))s.apply(t,i);else for(var n=D(t).parents(),a=0;a<n.length;a+=1)D(n[a]).is(r)&&s.apply(n[a],i)}}function l(e){var t=e&&e.target&&e.target.dom7EventData||[];t.indexOf(e)<0&&t.unshift(e),s.apply(this,t)}"function"==typeof t[1]&&(n=(e=t)[0],s=e[1],a=e[2],r=void 0),a=a||!1;for(var d,u=n.split(" "),c=0;c<this.length;c+=1){var p=this[c];if(r)for(d=0;d<u.length;d+=1){var h=u[d];p.dom7LiveListeners||(p.dom7LiveListeners={}),p.dom7LiveListeners[h]||(p.dom7LiveListeners[h]=[]),p.dom7LiveListeners[h].push({listener:s,proxyListener:o}),p.addEventListener(h,o,a)}else for(d=0;d<u.length;d+=1){var f=u[d];p.dom7Listeners||(p.dom7Listeners={}),p.dom7Listeners[f]||(p.dom7Listeners[f]=[]),p.dom7Listeners[f].push({listener:s,proxyListener:l}),p.addEventListener(f,l,a)}}return this},off:function(){for(var e,t=[],i=arguments.length;i--;)t[i]=arguments[i];var n=t[0],a=t[1],r=t[2],s=t[3];"function"==typeof t[1]&&(n=(e=t)[0],r=e[1],s=e[2],a=void 0),s=s||!1;for(var o=n.split(" "),l=0;l<o.length;l+=1)for(var d=o[l],u=0;u<this.length;u+=1){var c=this[u],p=void 0;if(!a&&c.dom7Listeners?p=c.dom7Listeners[d]:a&&c.dom7LiveListeners&&(p=c.dom7LiveListeners[d]),p&&p.length)for(var h=p.length-1;0<=h;h-=1){var f=p[h];r&&f.listener===r?(c.removeEventListener(d,f.proxyListener,s),p.splice(h,1)):r&&f.listener&&f.listener.dom7proxy&&f.listener.dom7proxy===r?(c.removeEventListener(d,f.proxyListener,s),p.splice(h,1)):r||(c.removeEventListener(d,f.proxyListener,s),p.splice(h,1))}}return this},trigger:function(){for(var e=[],t=arguments.length;t--;)e[t]=arguments[t];for(var i=e[0].split(" "),n=e[1],a=0;a<i.length;a+=1)for(var r=i[a],s=0;s<this.length;s+=1){var o=this[s],l=void 0;try{l=new Z.CustomEvent(r,{detail:n,bubbles:!0,cancelable:!0})}catch(e){(l=v.createEvent("Event")).initEvent(r,!0,!0),l.detail=n}o.dom7EventData=e.filter(function(e,t){return 0<t}),o.dispatchEvent(l),o.dom7EventData=[],delete o.dom7EventData}return this},transitionEnd:function(t){var i,n=["webkitTransitionEnd","transitionend"],a=this;function r(e){if(e.target===this)for(t.call(this,e),i=0;i<n.length;i+=1)a.off(n[i],r)}if(t)for(i=0;i<n.length;i+=1)a.on(n[i],r);return this},outerWidth:function(e){if(0<this.length){if(e){var t=this.styles();return this[0].offsetWidth+parseFloat(t.getPropertyValue("margin-right"))+parseFloat(t.getPropertyValue("margin-left"))}return this[0].offsetWidth}return null},outerHeight:function(e){if(0<this.length){if(e){var t=this.styles();return this[0].offsetHeight+parseFloat(t.getPropertyValue("margin-top"))+parseFloat(t.getPropertyValue("margin-bottom"))}return this[0].offsetHeight}return null},offset:function(){if(0<this.length){var e=this[0],t=e.getBoundingClientRect(),i=v.body,n=e.clientTop||i.clientTop||0,a=e.clientLeft||i.clientLeft||0,r=e===Z?Z.scrollY:e.scrollTop,s=e===Z?Z.scrollX:e.scrollLeft;return{top:t.top+r-n,left:t.left+s-a}}return null},css:function(e,t){var i;if(1===arguments.length){if("string"!=typeof e){for(i=0;i<this.length;i+=1)for(var n in e)this[i].style[n]=e[n];return this}if(this[0])return Z.getComputedStyle(this[0],null).getPropertyValue(e)}if(2!==arguments.length||"string"!=typeof e)return this;for(i=0;i<this.length;i+=1)this[i].style[e]=t;return this},each:function(e){if(!e)return this;for(var t=0;t<this.length;t+=1)if(!1===e.call(this[t],t,this[t]))return this;return this},html:function(e){if(void 0===e)return this[0]?this[0].innerHTML:void 0;for(var t=0;t<this.length;t+=1)this[t].innerHTML=e;return this},text:function(e){if(void 0===e)return this[0]?this[0].textContent.trim():null;for(var t=0;t<this.length;t+=1)this[t].textContent=e;return this},is:function(e){var t,i,n=this[0];if(!n||void 0===e)return!1;if("string"==typeof e){if(n.matches)return n.matches(e);if(n.webkitMatchesSelector)return n.webkitMatchesSelector(e);if(n.msMatchesSelector)return n.msMatchesSelector(e);for(t=D(e),i=0;i<t.length;i+=1)if(t[i]===n)return!0;return!1}if(e===v)return n===v;if(e===Z)return n===Z;if(e.nodeType||e instanceof l){for(t=e.nodeType?[e]:e,i=0;i<t.length;i+=1)if(t[i]===n)return!0;return!1}return!1},index:function(){var e,t=this[0];if(t){for(e=0;null!==(t=t.previousSibling);)1===t.nodeType&&(e+=1);return e}},eq:function(e){if(void 0===e)return this;var t,i=this.length;return new l(i-1<e?[]:e<0?(t=i+e)<0?[]:[this[t]]:[this[e]])},append:function(){for(var e,t=[],i=arguments.length;i--;)t[i]=arguments[i];for(var n=0;n<t.length;n+=1){e=t[n];for(var a=0;a<this.length;a+=1)if("string"==typeof e){var r=v.createElement("div");for(r.innerHTML=e;r.firstChild;)this[a].appendChild(r.firstChild)}else if(e instanceof l)for(var s=0;s<e.length;s+=1)this[a].appendChild(e[s]);else this[a].appendChild(e)}return this},prepend:function(e){var t,i;for(t=0;t<this.length;t+=1)if("string"==typeof e){var n=v.createElement("div");for(n.innerHTML=e,i=n.childNodes.length-1;0<=i;i-=1)this[t].insertBefore(n.childNodes[i],this[t].childNodes[0])}else if(e instanceof l)for(i=0;i<e.length;i+=1)this[t].insertBefore(e[i],this[t].childNodes[0]);else this[t].insertBefore(e,this[t].childNodes[0]);return this},next:function(e){return 0<this.length?e?this[0].nextElementSibling&&D(this[0].nextElementSibling).is(e)?new l([this[0].nextElementSibling]):new l([]):this[0].nextElementSibling?new l([this[0].nextElementSibling]):new l([]):new l([])},nextAll:function(e){var t=[],i=this[0];if(!i)return new l([]);for(;i.nextElementSibling;){var n=i.nextElementSibling;e?D(n).is(e)&&t.push(n):t.push(n),i=n}return new l(t)},prev:function(e){if(0<this.length){var t=this[0];return e?t.previousElementSibling&&D(t.previousElementSibling).is(e)?new l([t.previousElementSibling]):new l([]):t.previousElementSibling?new l([t.previousElementSibling]):new l([])}return new l([])},prevAll:function(e){var t=[],i=this[0];if(!i)return new l([]);for(;i.previousElementSibling;){var n=i.previousElementSibling;e?D(n).is(e)&&t.push(n):t.push(n),i=n}return new l(t)},parent:function(e){for(var t=[],i=0;i<this.length;i+=1)null!==this[i].parentNode&&(e?D(this[i].parentNode).is(e)&&t.push(this[i].parentNode):t.push(this[i].parentNode));return D(r(t))},parents:function(e){for(var t=[],i=0;i<this.length;i+=1)for(var n=this[i].parentNode;n;)e?D(n).is(e)&&t.push(n):t.push(n),n=n.parentNode;return D(r(t))},closest:function(e){var t=this;return void 0===e?new l([]):(t.is(e)||(t=t.parents(e).eq(0)),t)},find:function(e){for(var t=[],i=0;i<this.length;i+=1)for(var n=this[i].querySelectorAll(e),a=0;a<n.length;a+=1)t.push(n[a]);return new l(t)},children:function(e){for(var t=[],i=0;i<this.length;i+=1)for(var n=this[i].childNodes,a=0;a<n.length;a+=1)e?1===n[a].nodeType&&D(n[a]).is(e)&&t.push(n[a]):1===n[a].nodeType&&t.push(n[a]);return new l(r(t))},remove:function(){for(var e=0;e<this.length;e+=1)this[e].parentNode&&this[e].parentNode.removeChild(this[e]);return this},add:function(){for(var e=[],t=arguments.length;t--;)e[t]=arguments[t];var i,n;for(i=0;i<e.length;i+=1){var a=D(e[i]);for(n=0;n<a.length;n+=1)this[this.length]=a[n],this.length+=1}return this},styles:function(){return this[0]?Z.getComputedStyle(this[0],null):{}}};Object.keys(t).forEach(function(e){D.fn[e]=t[e]});function e(e){void 0===e&&(e={});var t=this;t.params=e,t.eventsListeners={},t.params&&t.params.on&&Object.keys(t.params.on).forEach(function(e){t.on(e,t.params.on[e])})}var i,n,a,s,ee={deleteProps:function(e){var t=e;Object.keys(t).forEach(function(e){try{t[e]=null}catch(e){}try{delete t[e]}catch(e){}})},nextTick:function(e,t){return void 0===t&&(t=0),setTimeout(e,t)},now:function(){return Date.now()},getTranslate:function(e,t){var i,n,a;void 0===t&&(t="x");var r=Z.getComputedStyle(e,null);return Z.WebKitCSSMatrix?(6<(n=r.transform||r.webkitTransform).split(",").length&&(n=n.split(", ").map(function(e){return e.replace(",",".")}).join(", ")),a=new Z.WebKitCSSMatrix("none"===n?"":n)):i=(a=r.MozTransform||r.OTransform||r.MsTransform||r.msTransform||r.transform||r.getPropertyValue("transform").replace("translate(","matrix(1, 0, 0, 1,")).toString().split(","),"x"===t&&(n=Z.WebKitCSSMatrix?a.m41:16===i.length?parseFloat(i[12]):parseFloat(i[4])),"y"===t&&(n=Z.WebKitCSSMatrix?a.m42:16===i.length?parseFloat(i[13]):parseFloat(i[5])),n||0},parseUrlQuery:function(e){var t,i,n,a,r={},s=e||Z.location.href;if("string"==typeof s&&s.length)for(a=(i=(s=-1<s.indexOf("?")?s.replace(/\S*\?/,""):"").split("&").filter(function(e){return""!==e})).length,t=0;t<a;t+=1)n=i[t].replace(/#\S+/g,"").split("="),r[decodeURIComponent(n[0])]=void 0===n[1]?void 0:decodeURIComponent(n[1])||"";return r},isObject:function(e){return"object"==typeof e&&null!==e&&e.constructor&&e.constructor===Object},extend:function(){for(var e=[],t=arguments.length;t--;)e[t]=arguments[t];for(var i=Object(e[0]),n=1;n<e.length;n+=1){var a=e[n];if(null!=a)for(var r=Object.keys(Object(a)),s=0,o=r.length;s<o;s+=1){var l=r[s],d=Object.getOwnPropertyDescriptor(a,l);void 0!==d&&d.enumerable&&(ee.isObject(i[l])&&ee.isObject(a[l])?ee.extend(i[l],a[l]):!ee.isObject(i[l])&&ee.isObject(a[l])?(i[l]={},ee.extend(i[l],a[l])):i[l]=a[l])}}return i}},te=(a=v.createElement("div"),{touch:Z.Modernizr&&!0===Z.Modernizr.touch||!!(0<Z.navigator.maxTouchPoints||"ontouchstart"in Z||Z.DocumentTouch&&v instanceof Z.DocumentTouch),pointerEvents:!!(Z.navigator.pointerEnabled||Z.PointerEvent||"maxTouchPoints"in Z.navigator&&0<Z.navigator.maxTouchPoints),prefixedPointerEvents:!!Z.navigator.msPointerEnabled,transition:(n=a.style,"transition"in n||"webkitTransition"in n||"MozTransition"in n),transforms3d:Z.Modernizr&&!0===Z.Modernizr.csstransforms3d||(i=a.style,"webkitPerspective"in i||"MozPerspective"in i||"OPerspective"in i||"MsPerspective"in i||"perspective"in i),flexbox:function(){for(var e=a.style,t="alignItems webkitAlignItems webkitBoxAlign msFlexAlign mozBoxAlign webkitFlexDirection msFlexDirection mozBoxDirection mozBoxOrient webkitBoxDirection webkitBoxOrient".split(" "),i=0;i<t.length;i+=1)if(t[i]in e)return!0;return!1}(),observer:"MutationObserver"in Z||"WebkitMutationObserver"in Z,passiveListener:function(){var e=!1;try{var t=Object.defineProperty({},"passive",{get:function(){e=!0}});Z.addEventListener("testPassiveListener",null,t)}catch(e){}return e}(),gestures:"ongesturestart"in Z}),z={isIE:!!Z.navigator.userAgent.match(/Trident/g)||!!Z.navigator.userAgent.match(/MSIE/g),isEdge:!!Z.navigator.userAgent.match(/Edge/g),isSafari:(s=Z.navigator.userAgent.toLowerCase(),0<=s.indexOf("safari")&&s.indexOf("chrome")<0&&s.indexOf("android")<0),isUiWebView:/(iPhone|iPod|iPad).*AppleWebKit(?!.*Safari)/i.test(Z.navigator.userAgent)},o={components:{configurable:!0}};e.prototype.on=function(e,t,i){var n=this;if("function"!=typeof t)return n;var a=i?"unshift":"push";return e.split(" ").forEach(function(e){n.eventsListeners[e]||(n.eventsListeners[e]=[]),n.eventsListeners[e][a](t)}),n},e.prototype.once=function(i,n,e){var a=this;if("function"!=typeof n)return a;function r(){for(var e=[],t=arguments.length;t--;)e[t]=arguments[t];n.apply(a,e),a.off(i,r),r.f7proxy&&delete r.f7proxy}return r.f7proxy=n,a.on(i,r,e)},e.prototype.off=function(e,n){var a=this;return a.eventsListeners&&e.split(" ").forEach(function(i){void 0===n?a.eventsListeners[i]=[]:a.eventsListeners[i]&&a.eventsListeners[i].length&&a.eventsListeners[i].forEach(function(e,t){(e===n||e.f7proxy&&e.f7proxy===n)&&a.eventsListeners[i].splice(t,1)})}),a},e.prototype.emit=function(){for(var e=[],t=arguments.length;t--;)e[t]=arguments[t];var i,n,a,r=this;return r.eventsListeners&&(a="string"==typeof e[0]||Array.isArray(e[0])?(i=e[0],n=e.slice(1,e.length),r):(i=e[0].events,n=e[0].data,e[0].context||r),(Array.isArray(i)?i:i.split(" ")).forEach(function(e){if(r.eventsListeners&&r.eventsListeners[e]){var t=[];r.eventsListeners[e].forEach(function(e){t.push(e)}),t.forEach(function(e){e.apply(a,n)})}})),r},e.prototype.useModulesParams=function(i){var n=this;n.modules&&Object.keys(n.modules).forEach(function(e){var t=n.modules[e];t.params&&ee.extend(i,t.params)})},e.prototype.useModules=function(n){void 0===n&&(n={});var a=this;a.modules&&Object.keys(a.modules).forEach(function(e){var i=a.modules[e],t=n[e]||{};i.instance&&Object.keys(i.instance).forEach(function(e){var t=i.instance[e];a[e]="function"==typeof t?t.bind(a):t}),i.on&&a.on&&Object.keys(i.on).forEach(function(e){a.on(e,i.on[e])}),i.create&&i.create.bind(a)(t)})},o.components.set=function(e){this.use&&this.use(e)},e.installModule=function(t){for(var e=[],i=arguments.length-1;0<i--;)e[i]=arguments[i+1];var n=this;n.prototype.modules||(n.prototype.modules={});var a=t.name||Object.keys(n.prototype.modules).length+"_"+ee.now();return(n.prototype.modules[a]=t).proto&&Object.keys(t.proto).forEach(function(e){n.prototype[e]=t.proto[e]}),t.static&&Object.keys(t.static).forEach(function(e){n[e]=t.static[e]}),t.install&&t.install.apply(n,e),n},e.use=function(e){for(var t=[],i=arguments.length-1;0<i--;)t[i]=arguments[i+1];var n=this;return Array.isArray(e)?(e.forEach(function(e){return n.installModule(e)}),n):n.installModule.apply(n,[e].concat(t))},Object.defineProperties(e,o);var d={updateSize:function(){var e,t,i=this,n=i.$el;e=void 0!==i.params.width?i.params.width:n[0].clientWidth,t=void 0!==i.params.height?i.params.height:n[0].clientHeight,0===e&&i.isHorizontal()||0===t&&i.isVertical()||(e=e-parseInt(n.css("padding-left"),10)-parseInt(n.css("padding-right"),10),t=t-parseInt(n.css("padding-top"),10)-parseInt(n.css("padding-bottom"),10),ee.extend(i,{width:e,height:t,size:i.isHorizontal()?e:t}))},updateSlides:function(){var e=this,t=e.params,i=e.$wrapperEl,n=e.size,a=e.rtlTranslate,r=e.wrongRTL,s=e.virtual&&t.virtual.enabled,o=s?e.virtual.slides.length:e.slides.length,l=i.children("."+e.params.slideClass),d=s?e.virtual.slides.length:l.length,u=[],c=[],p=[],h=t.slidesOffsetBefore;"function"==typeof h&&(h=t.slidesOffsetBefore.call(e));var f=t.slidesOffsetAfter;"function"==typeof f&&(f=t.slidesOffsetAfter.call(e));var v=e.snapGrid.length,m=e.snapGrid.length,g=t.spaceBetween,y=-h,b=0,x=0;if(void 0!==n){var w,T;"string"==typeof g&&0<=g.indexOf("%")&&(g=parseFloat(g.replace("%",""))/100*n),e.virtualSize=-g,a?l.css({marginLeft:"",marginTop:""}):l.css({marginRight:"",marginBottom:""}),1<t.slidesPerColumn&&(w=Math.floor(d/t.slidesPerColumn)===d/e.params.slidesPerColumn?d:Math.ceil(d/t.slidesPerColumn)*t.slidesPerColumn,"auto"!==t.slidesPerView&&"row"===t.slidesPerColumnFill&&(w=Math.max(w,t.slidesPerView*t.slidesPerColumn)));for(var C,E=t.slidesPerColumn,S=w/E,k=Math.floor(d/t.slidesPerColumn),M=0;M<d;M+=1){T=0;var P=l.eq(M);if(1<t.slidesPerColumn){var $=void 0,L=void 0,D=void 0;"column"===t.slidesPerColumnFill?(D=M-(L=Math.floor(M/E))*E,(k<L||L===k&&D===E-1)&&E<=(D+=1)&&(D=0,L+=1),$=L+D*w/E,P.css({"-webkit-box-ordinal-group":$,"-moz-box-ordinal-group":$,"-ms-flex-order":$,"-webkit-order":$,order:$})):L=M-(D=Math.floor(M/S))*S,P.css("margin-"+(e.isHorizontal()?"top":"left"),0!==D&&t.spaceBetween&&t.spaceBetween+"px").attr("data-swiper-column",L).attr("data-swiper-row",D)}if("none"!==P.css("display")){if("auto"===t.slidesPerView){var z=Z.getComputedStyle(P[0],null),I=P[0].style.transform,N=P[0].style.webkitTransform;if(I&&(P[0].style.transform="none"),N&&(P[0].style.webkitTransform="none"),t.roundLengths)T=e.isHorizontal()?P.outerWidth(!0):P.outerHeight(!0);else if(e.isHorizontal()){var A=parseFloat(z.getPropertyValue("width")),O=parseFloat(z.getPropertyValue("padding-left")),H=parseFloat(z.getPropertyValue("padding-right")),j=parseFloat(z.getPropertyValue("margin-left")),q=parseFloat(z.getPropertyValue("margin-right")),B=z.getPropertyValue("box-sizing");T=B&&"border-box"===B?A+j+q:A+O+H+j+q}else{var F=parseFloat(z.getPropertyValue("height")),R=parseFloat(z.getPropertyValue("padding-top")),X=parseFloat(z.getPropertyValue("padding-bottom")),G=parseFloat(z.getPropertyValue("margin-top")),V=parseFloat(z.getPropertyValue("margin-bottom")),W=z.getPropertyValue("box-sizing");T=W&&"border-box"===W?F+G+V:F+R+X+G+V}I&&(P[0].style.transform=I),N&&(P[0].style.webkitTransform=N),t.roundLengths&&(T=Math.floor(T))}else T=(n-(t.slidesPerView-1)*g)/t.slidesPerView,t.roundLengths&&(T=Math.floor(T)),l[M]&&(e.isHorizontal()?l[M].style.width=T+"px":l[M].style.height=T+"px");l[M]&&(l[M].swiperSlideSize=T),p.push(T),t.centeredSlides?(y=y+T/2+b/2+g,0===b&&0!==M&&(y=y-n/2-g),0===M&&(y=y-n/2-g),Math.abs(y)<.001&&(y=0),t.roundLengths&&(y=Math.floor(y)),x%t.slidesPerGroup==0&&u.push(y),c.push(y)):(t.roundLengths&&(y=Math.floor(y)),x%t.slidesPerGroup==0&&u.push(y),c.push(y),y=y+T+g),e.virtualSize+=T+g,b=T,x+=1}}if(e.virtualSize=Math.max(e.virtualSize,n)+f,a&&r&&("slide"===t.effect||"coverflow"===t.effect)&&i.css({width:e.virtualSize+t.spaceBetween+"px"}),te.flexbox&&!t.setWrapperSize||(e.isHorizontal()?i.css({width:e.virtualSize+t.spaceBetween+"px"}):i.css({height:e.virtualSize+t.spaceBetween+"px"})),1<t.slidesPerColumn&&(e.virtualSize=(T+t.spaceBetween)*w,e.virtualSize=Math.ceil(e.virtualSize/t.slidesPerColumn)-t.spaceBetween,e.isHorizontal()?i.css({width:e.virtualSize+t.spaceBetween+"px"}):i.css({height:e.virtualSize+t.spaceBetween+"px"}),t.centeredSlides)){C=[];for(var Y=0;Y<u.length;Y+=1){var _=u[Y];t.roundLengths&&(_=Math.floor(_)),u[Y]<e.virtualSize+u[0]&&C.push(_)}u=C}if(!t.centeredSlides){C=[];for(var U=0;U<u.length;U+=1){var K=u[U];t.roundLengths&&(K=Math.floor(K)),u[U]<=e.virtualSize-n&&C.push(K)}u=C,1<Math.floor(e.virtualSize-n)-Math.floor(u[u.length-1])&&u.push(e.virtualSize-n)}if(0===u.length&&(u=[0]),0!==t.spaceBetween&&(e.isHorizontal()?a?l.css({marginLeft:g+"px"}):l.css({marginRight:g+"px"}):l.css({marginBottom:g+"px"})),t.centerInsufficientSlides){var Q=0;if(p.forEach(function(e){Q+=e+(t.spaceBetween?t.spaceBetween:0)}),(Q-=t.spaceBetween)<n){var J=(n-Q)/2;u.forEach(function(e,t){u[t]=e-J}),c.forEach(function(e,t){c[t]=e+J})}}ee.extend(e,{slides:l,snapGrid:u,slidesGrid:c,slidesSizesGrid:p}),d!==o&&e.emit("slidesLengthChange"),u.length!==v&&(e.params.watchOverflow&&e.checkOverflow(),e.emit("snapGridLengthChange")),c.length!==m&&e.emit("slidesGridLengthChange"),(t.watchSlidesProgress||t.watchSlidesVisibility)&&e.updateSlidesOffset()}},updateAutoHeight:function(e){var t,i=this,n=[],a=0;if("number"==typeof e?i.setTransition(e):!0===e&&i.setTransition(i.params.speed),"auto"!==i.params.slidesPerView&&1<i.params.slidesPerView)for(t=0;t<Math.ceil(i.params.slidesPerView);t+=1){var r=i.activeIndex+t;if(r>i.slides.length)break;n.push(i.slides.eq(r)[0])}else n.push(i.slides.eq(i.activeIndex)[0]);for(t=0;t<n.length;t+=1)if(void 0!==n[t]){var s=n[t].offsetHeight;a=a<s?s:a}a&&i.$wrapperEl.css("height",a+"px")},updateSlidesOffset:function(){for(var e=this.slides,t=0;t<e.length;t+=1)e[t].swiperSlideOffset=this.isHorizontal()?e[t].offsetLeft:e[t].offsetTop},updateSlidesProgress:function(e){void 0===e&&(e=this&&this.translate||0);var t=this,i=t.params,n=t.slides,a=t.rtlTranslate;if(0!==n.length){void 0===n[0].swiperSlideOffset&&t.updateSlidesOffset();var r=-e;a&&(r=e),n.removeClass(i.slideVisibleClass),t.visibleSlidesIndexes=[],t.visibleSlides=[];for(var s=0;s<n.length;s+=1){var o=n[s],l=(r+(i.centeredSlides?t.minTranslate():0)-o.swiperSlideOffset)/(o.swiperSlideSize+i.spaceBetween);if(i.watchSlidesVisibility){var d=-(r-o.swiperSlideOffset),u=d+t.slidesSizesGrid[s];(0<=d&&d<t.size||0<u&&u<=t.size||d<=0&&u>=t.size)&&(t.visibleSlides.push(o),t.visibleSlidesIndexes.push(s),n.eq(s).addClass(i.slideVisibleClass))}o.progress=a?-l:l}t.visibleSlides=D(t.visibleSlides)}},updateProgress:function(e){void 0===e&&(e=this&&this.translate||0);var t=this,i=t.params,n=t.maxTranslate()-t.minTranslate(),a=t.progress,r=t.isBeginning,s=t.isEnd,o=r,l=s;s=0==n?r=!(a=0):(r=(a=(e-t.minTranslate())/n)<=0,1<=a),ee.extend(t,{progress:a,isBeginning:r,isEnd:s}),(i.watchSlidesProgress||i.watchSlidesVisibility)&&t.updateSlidesProgress(e),r&&!o&&t.emit("reachBeginning toEdge"),s&&!l&&t.emit("reachEnd toEdge"),(o&&!r||l&&!s)&&t.emit("fromEdge"),t.emit("progress",a)},updateSlidesClasses:function(){var e,t=this,i=t.slides,n=t.params,a=t.$wrapperEl,r=t.activeIndex,s=t.realIndex,o=t.virtual&&n.virtual.enabled;i.removeClass(n.slideActiveClass+" "+n.slideNextClass+" "+n.slidePrevClass+" "+n.slideDuplicateActiveClass+" "+n.slideDuplicateNextClass+" "+n.slideDuplicatePrevClass),(e=o?t.$wrapperEl.find("."+n.slideClass+'[data-swiper-slide-index="'+r+'"]'):i.eq(r)).addClass(n.slideActiveClass),n.loop&&(e.hasClass(n.slideDuplicateClass)?a.children("."+n.slideClass+":not(."+n.slideDuplicateClass+')[data-swiper-slide-index="'+s+'"]').addClass(n.slideDuplicateActiveClass):a.children("."+n.slideClass+"."+n.slideDuplicateClass+'[data-swiper-slide-index="'+s+'"]').addClass(n.slideDuplicateActiveClass));var l=e.nextAll("."+n.slideClass).eq(0).addClass(n.slideNextClass);n.loop&&0===l.length&&(l=i.eq(0)).addClass(n.slideNextClass);var d=e.prevAll("."+n.slideClass).eq(0).addClass(n.slidePrevClass);n.loop&&0===d.length&&(d=i.eq(-1)).addClass(n.slidePrevClass),n.loop&&(l.hasClass(n.slideDuplicateClass)?a.children("."+n.slideClass+":not(."+n.slideDuplicateClass+')[data-swiper-slide-index="'+l.attr("data-swiper-slide-index")+'"]').addClass(n.slideDuplicateNextClass):a.children("."+n.slideClass+"."+n.slideDuplicateClass+'[data-swiper-slide-index="'+l.attr("data-swiper-slide-index")+'"]').addClass(n.slideDuplicateNextClass),d.hasClass(n.slideDuplicateClass)?a.children("."+n.slideClass+":not(."+n.slideDuplicateClass+')[data-swiper-slide-index="'+d.attr("data-swiper-slide-index")+'"]').addClass(n.slideDuplicatePrevClass):a.children("."+n.slideClass+"."+n.slideDuplicateClass+'[data-swiper-slide-index="'+d.attr("data-swiper-slide-index")+'"]').addClass(n.slideDuplicatePrevClass))},updateActiveIndex:function(e){var t,i=this,n=i.rtlTranslate?i.translate:-i.translate,a=i.slidesGrid,r=i.snapGrid,s=i.params,o=i.activeIndex,l=i.realIndex,d=i.snapIndex,u=e;if(void 0===u){for(var c=0;c<a.length;c+=1)void 0!==a[c+1]?n>=a[c]&&n<a[c+1]-(a[c+1]-a[c])/2?u=c:n>=a[c]&&n<a[c+1]&&(u=c+1):n>=a[c]&&(u=c);s.normalizeSlideIndex&&(u<0||void 0===u)&&(u=0)}if((t=0<=r.indexOf(n)?r.indexOf(n):Math.floor(u/s.slidesPerGroup))>=r.length&&(t=r.length-1),u!==o){var p=parseInt(i.slides.eq(u).attr("data-swiper-slide-index")||u,10);ee.extend(i,{snapIndex:t,realIndex:p,previousIndex:o,activeIndex:u}),i.emit("activeIndexChange"),i.emit("snapIndexChange"),l!==p&&i.emit("realIndexChange"),i.emit("slideChange")}else t!==d&&(i.snapIndex=t,i.emit("snapIndexChange"))},updateClickedSlide:function(e){var t=this,i=t.params,n=D(e.target).closest("."+i.slideClass)[0],a=!1;if(n)for(var r=0;r<t.slides.length;r+=1)t.slides[r]===n&&(a=!0);if(!n||!a)return t.clickedSlide=void 0,void(t.clickedIndex=void 0);t.clickedSlide=n,t.virtual&&t.params.virtual.enabled?t.clickedIndex=parseInt(D(n).attr("data-swiper-slide-index"),10):t.clickedIndex=D(n).index(),i.slideToClickedSlide&&void 0!==t.clickedIndex&&t.clickedIndex!==t.activeIndex&&t.slideToClickedSlide()}},u={getTranslate:function(e){void 0===e&&(e=this.isHorizontal()?"x":"y");var t=this.params,i=this.rtlTranslate,n=this.translate,a=this.$wrapperEl;if(t.virtualTranslate)return i?-n:n;var r=ee.getTranslate(a[0],e);return i&&(r=-r),r||0},setTranslate:function(e,t){var i=this,n=i.rtlTranslate,a=i.params,r=i.$wrapperEl,s=i.progress,o=0,l=0;i.isHorizontal()?o=n?-e:e:l=e,a.roundLengths&&(o=Math.floor(o),l=Math.floor(l)),a.virtualTranslate||(te.transforms3d?r.transform("translate3d("+o+"px, "+l+"px, 0px)"):r.transform("translate("+o+"px, "+l+"px)")),i.previousTranslate=i.translate,i.translate=i.isHorizontal()?o:l;var d=i.maxTranslate()-i.minTranslate();(0==d?0:(e-i.minTranslate())/d)!==s&&i.updateProgress(e),i.emit("setTranslate",i.translate,t)},minTranslate:function(){return-this.snapGrid[0]},maxTranslate:function(){return-this.snapGrid[this.snapGrid.length-1]}},c={slideTo:function(e,t,i,n){void 0===e&&(e=0),void 0===t&&(t=this.params.speed),void 0===i&&(i=!0);var a=this,r=e;r<0&&(r=0);var s=a.params,o=a.snapGrid,l=a.slidesGrid,d=a.previousIndex,u=a.activeIndex,c=a.rtlTranslate;if(a.animating&&s.preventInteractionOnTransition)return!1;var p=Math.floor(r/s.slidesPerGroup);p>=o.length&&(p=o.length-1),(u||s.initialSlide||0)===(d||0)&&i&&a.emit("beforeSlideChangeStart");var h,f=-o[p];if(a.updateProgress(f),s.normalizeSlideIndex)for(var v=0;v<l.length;v+=1)-Math.floor(100*f)>=Math.floor(100*l[v])&&(r=v);if(a.initialized&&r!==u){if(!a.allowSlideNext&&f<a.translate&&f<a.minTranslate())return!1;if(!a.allowSlidePrev&&f>a.translate&&f>a.maxTranslate()&&(u||0)!==r)return!1}return h=u<r?"next":r<u?"prev":"reset",c&&-f===a.translate||!c&&f===a.translate?(a.updateActiveIndex(r),s.autoHeight&&a.updateAutoHeight(),a.updateSlidesClasses(),"slide"!==s.effect&&a.setTranslate(f),"reset"!=h&&(a.transitionStart(i,h),a.transitionEnd(i,h)),!1):(0!==t&&te.transition?(a.setTransition(t),a.setTranslate(f),a.updateActiveIndex(r),a.updateSlidesClasses(),a.emit("beforeTransitionStart",t,n),a.transitionStart(i,h),a.animating||(a.animating=!0,a.onSlideToWrapperTransitionEnd||(a.onSlideToWrapperTransitionEnd=function(e){a&&!a.destroyed&&e.target===this&&(a.$wrapperEl[0].removeEventListener("transitionend",a.onSlideToWrapperTransitionEnd),a.$wrapperEl[0].removeEventListener("webkitTransitionEnd",a.onSlideToWrapperTransitionEnd),a.onSlideToWrapperTransitionEnd=null,delete a.onSlideToWrapperTransitionEnd,a.transitionEnd(i,h))}),a.$wrapperEl[0].addEventListener("transitionend",a.onSlideToWrapperTransitionEnd),a.$wrapperEl[0].addEventListener("webkitTransitionEnd",a.onSlideToWrapperTransitionEnd))):(a.setTransition(0),a.setTranslate(f),a.updateActiveIndex(r),a.updateSlidesClasses(),a.emit("beforeTransitionStart",t,n),a.transitionStart(i,h),a.transitionEnd(i,h)),!0)},slideToLoop:function(e,t,i,n){void 0===e&&(e=0),void 0===t&&(t=this.params.speed),void 0===i&&(i=!0);var a=e;return this.params.loop&&(a+=this.loopedSlides),this.slideTo(a,t,i,n)},slideNext:function(e,t,i){void 0===e&&(e=this.params.speed),void 0===t&&(t=!0);var n=this,a=n.params,r=n.animating;return a.loop?!r&&(n.loopFix(),n._clientLeft=n.$wrapperEl[0].clientLeft,n.slideTo(n.activeIndex+a.slidesPerGroup,e,t,i)):n.slideTo(n.activeIndex+a.slidesPerGroup,e,t,i)},slidePrev:function(e,t,i){void 0===e&&(e=this.params.speed),void 0===t&&(t=!0);var n=this,a=n.params,r=n.animating,s=n.snapGrid,o=n.slidesGrid,l=n.rtlTranslate;if(a.loop){if(r)return!1;n.loopFix(),n._clientLeft=n.$wrapperEl[0].clientLeft}function d(e){return e<0?-Math.floor(Math.abs(e)):Math.floor(e)}var u,c=d(l?n.translate:-n.translate),p=s.map(function(e){return d(e)}),h=(o.map(function(e){return d(e)}),s[p.indexOf(c)],s[p.indexOf(c)-1]);return void 0!==h&&(u=o.indexOf(h))<0&&(u=n.activeIndex-1),n.slideTo(u,e,t,i)},slideReset:function(e,t,i){return void 0===e&&(e=this.params.speed),void 0===t&&(t=!0),this.slideTo(this.activeIndex,e,t,i)},slideToClosest:function(e,t,i){void 0===e&&(e=this.params.speed),void 0===t&&(t=!0);var n=this,a=n.activeIndex,r=Math.floor(a/n.params.slidesPerGroup);if(r<n.snapGrid.length-1){var s=n.rtlTranslate?n.translate:-n.translate,o=n.snapGrid[r];(n.snapGrid[r+1]-o)/2<s-o&&(a=n.params.slidesPerGroup)}return n.slideTo(a,e,t,i)},slideToClickedSlide:function(){var e,t=this,i=t.params,n=t.$wrapperEl,a="auto"===i.slidesPerView?t.slidesPerViewDynamic():i.slidesPerView,r=t.clickedIndex;if(i.loop){if(t.animating)return;e=parseInt(D(t.clickedSlide).attr("data-swiper-slide-index"),10),i.centeredSlides?r<t.loopedSlides-a/2||r>t.slides.length-t.loopedSlides+a/2?(t.loopFix(),r=n.children("."+i.slideClass+'[data-swiper-slide-index="'+e+'"]:not(.'+i.slideDuplicateClass+")").eq(0).index(),ee.nextTick(function(){t.slideTo(r)})):t.slideTo(r):r>t.slides.length-a?(t.loopFix(),r=n.children("."+i.slideClass+'[data-swiper-slide-index="'+e+'"]:not(.'+i.slideDuplicateClass+")").eq(0).index(),ee.nextTick(function(){t.slideTo(r)})):t.slideTo(r)}else t.slideTo(r)}},p={loopCreate:function(){var n=this,e=n.params,t=n.$wrapperEl;t.children("."+e.slideClass+"."+e.slideDuplicateClass).remove();var a=t.children("."+e.slideClass);if(e.loopFillGroupWithBlank){var i=e.slidesPerGroup-a.length%e.slidesPerGroup;if(i!==e.slidesPerGroup){for(var r=0;r<i;r+=1){var s=D(v.createElement("div")).addClass(e.slideClass+" "+e.slideBlankClass);t.append(s)}a=t.children("."+e.slideClass)}}"auto"!==e.slidesPerView||e.loopedSlides||(e.loopedSlides=a.length),n.loopedSlides=parseInt(e.loopedSlides||e.slidesPerView,10),n.loopedSlides+=e.loopAdditionalSlides,n.loopedSlides>a.length&&(n.loopedSlides=a.length);var o=[],l=[];a.each(function(e,t){var i=D(t);e<n.loopedSlides&&l.push(t),e<a.length&&e>=a.length-n.loopedSlides&&o.push(t),i.attr("data-swiper-slide-index",e)});for(var d=0;d<l.length;d+=1)t.append(D(l[d].cloneNode(!0)).addClass(e.slideDuplicateClass));for(var u=o.length-1;0<=u;u-=1)t.prepend(D(o[u].cloneNode(!0)).addClass(e.slideDuplicateClass))},loopFix:function(){var e,t=this,i=t.params,n=t.activeIndex,a=t.slides,r=t.loopedSlides,s=t.allowSlidePrev,o=t.allowSlideNext,l=t.snapGrid,d=t.rtlTranslate;t.allowSlidePrev=!0,t.allowSlideNext=!0;var u=-l[n]-t.getTranslate();n<r?(e=a.length-3*r+n,e+=r,t.slideTo(e,0,!1,!0)&&0!=u&&t.setTranslate((d?-t.translate:t.translate)-u)):("auto"===i.slidesPerView&&2*r<=n||n>=a.length-r)&&(e=-a.length+n+r,e+=r,t.slideTo(e,0,!1,!0)&&0!=u&&t.setTranslate((d?-t.translate:t.translate)-u)),t.allowSlidePrev=s,t.allowSlideNext=o},loopDestroy:function(){var e=this.$wrapperEl,t=this.params,i=this.slides;e.children("."+t.slideClass+"."+t.slideDuplicateClass+",."+t.slideClass+"."+t.slideBlankClass).remove(),i.removeAttr("data-swiper-slide-index")}},h={setGrabCursor:function(e){if(!(te.touch||!this.params.simulateTouch||this.params.watchOverflow&&this.isLocked)){var t=this.el;t.style.cursor="move",t.style.cursor=e?"-webkit-grabbing":"-webkit-grab",t.style.cursor=e?"-moz-grabbin":"-moz-grab",t.style.cursor=e?"grabbing":"grab"}},unsetGrabCursor:function(){te.touch||this.params.watchOverflow&&this.isLocked||(this.el.style.cursor="")}},f={appendSlide:function(e){var t=this,i=t.$wrapperEl,n=t.params;if(n.loop&&t.loopDestroy(),"object"==typeof e&&"length"in e)for(var a=0;a<e.length;a+=1)e[a]&&i.append(e[a]);else i.append(e);n.loop&&t.loopCreate(),n.observer&&te.observer||t.update()},prependSlide:function(e){var t=this,i=t.params,n=t.$wrapperEl,a=t.activeIndex;i.loop&&t.loopDestroy();var r=a+1;if("object"==typeof e&&"length"in e){for(var s=0;s<e.length;s+=1)e[s]&&n.prepend(e[s]);r=a+e.length}else n.prepend(e);i.loop&&t.loopCreate(),i.observer&&te.observer||t.update(),t.slideTo(r,0,!1)},addSlide:function(e,t){var i=this,n=i.$wrapperEl,a=i.params,r=i.activeIndex;a.loop&&(r-=i.loopedSlides,i.loopDestroy(),i.slides=n.children("."+a.slideClass));var s=i.slides.length;if(e<=0)i.prependSlide(t);else if(s<=e)i.appendSlide(t);else{for(var o=e<r?r+1:r,l=[],d=s-1;e<=d;d-=1){var u=i.slides.eq(d);u.remove(),l.unshift(u)}if("object"==typeof t&&"length"in t){for(var c=0;c<t.length;c+=1)t[c]&&n.append(t[c]);o=e<r?r+t.length:r}else n.append(t);for(var p=0;p<l.length;p+=1)n.append(l[p]);a.loop&&i.loopCreate(),a.observer&&te.observer||i.update(),a.loop?i.slideTo(o+i.loopedSlides,0,!1):i.slideTo(o,0,!1)}},removeSlide:function(e){var t=this,i=t.params,n=t.$wrapperEl,a=t.activeIndex;i.loop&&(a-=t.loopedSlides,t.loopDestroy(),t.slides=n.children("."+i.slideClass));var r,s=a;if("object"==typeof e&&"length"in e){for(var o=0;o<e.length;o+=1)r=e[o],t.slides[r]&&t.slides.eq(r).remove(),r<s&&(s-=1);s=Math.max(s,0)}else r=e,t.slides[r]&&t.slides.eq(r).remove(),r<s&&(s-=1),s=Math.max(s,0);i.loop&&t.loopCreate(),i.observer&&te.observer||t.update(),i.loop?t.slideTo(s+t.loopedSlides,0,!1):t.slideTo(s,0,!1)},removeAllSlides:function(){for(var e=[],t=0;t<this.slides.length;t+=1)e.push(t);this.removeSlide(e)}},m=function(){var e=Z.navigator.userAgent,t={ios:!1,android:!1,androidChrome:!1,desktop:!1,windows:!1,iphone:!1,ipod:!1,ipad:!1,cordova:Z.cordova||Z.phonegap,phonegap:Z.cordova||Z.phonegap},i=e.match(/(Windows Phone);?[\s\/]+([\d.]+)?/),n=e.match(/(Android);?[\s\/]+([\d.]+)?/),a=e.match(/(iPad).*OS\s([\d_]+)/),r=e.match(/(iPod)(.*OS\s([\d_]+))?/),s=!a&&e.match(/(iPhone\sOS|iOS)\s([\d_]+)/);if(i&&(t.os="windows",t.osVersion=i[2],t.windows=!0),n&&!i&&(t.os="android",t.osVersion=n[2],t.android=!0,t.androidChrome=0<=e.toLowerCase().indexOf("chrome")),(a||s||r)&&(t.os="ios",t.ios=!0),s&&!r&&(t.osVersion=s[2].replace(/_/g,"."),t.iphone=!0),a&&(t.osVersion=a[2].replace(/_/g,"."),t.ipad=!0),r&&(t.osVersion=r[3]?r[3].replace(/_/g,"."):null,t.iphone=!0),t.ios&&t.osVersion&&0<=e.indexOf("Version/")&&"10"===t.osVersion.split(".")[0]&&(t.osVersion=e.toLowerCase().split("version/")[1].split(" ")[0]),t.desktop=!(t.os||t.android||t.webView),t.webView=(s||a||r)&&e.match(/.*AppleWebKit(?!.*Safari)/i),t.os&&"ios"===t.os){var o=t.osVersion.split("."),l=v.querySelector('meta[name="viewport"]');t.minimalUi=!t.webView&&(r||s)&&(1*o[0]==7?1<=1*o[1]:7<1*o[0])&&l&&0<=l.getAttribute("content").indexOf("minimal-ui")}return t.pixelRatio=Z.devicePixelRatio||1,t}();function g(){var e=this,t=e.params,i=e.el;if(!i||0!==i.offsetWidth){t.breakpoints&&e.setBreakpoint();var n=e.allowSlideNext,a=e.allowSlidePrev,r=e.snapGrid;if(e.allowSlideNext=!0,e.allowSlidePrev=!0,e.updateSize(),e.updateSlides(),t.freeMode){var s=Math.min(Math.max(e.translate,e.maxTranslate()),e.minTranslate());e.setTranslate(s),e.updateActiveIndex(),e.updateSlidesClasses(),t.autoHeight&&e.updateAutoHeight()}else e.updateSlidesClasses(),("auto"===t.slidesPerView||1<t.slidesPerView)&&e.isEnd&&!e.params.centeredSlides?e.slideTo(e.slides.length-1,0,!1,!0):e.slideTo(e.activeIndex,0,!1,!0);e.allowSlidePrev=a,e.allowSlideNext=n,e.params.watchOverflow&&r!==e.snapGrid&&e.checkOverflow()}}var y={init:!0,direction:"horizontal",touchEventsTarget:"container",initialSlide:0,speed:300,preventInteractionOnTransition:!1,edgeSwipeDetection:!1,edgeSwipeThreshold:20,freeMode:!1,freeModeMomentum:!0,freeModeMomentumRatio:1,freeModeMomentumBounce:!0,freeModeMomentumBounceRatio:1,freeModeMomentumVelocityRatio:1,freeModeSticky:!1,freeModeMinimumVelocity:.02,autoHeight:!1,setWrapperSize:!1,virtualTranslate:!1,effect:"slide",breakpoints:void 0,breakpointsInverse:!1,spaceBetween:0,slidesPerView:1,slidesPerColumn:1,slidesPerColumnFill:"column",slidesPerGroup:1,centeredSlides:!1,slidesOffsetBefore:0,slidesOffsetAfter:0,normalizeSlideIndex:!0,centerInsufficientSlides:!1,watchOverflow:!1,roundLengths:!1,touchRatio:1,touchAngle:45,simulateTouch:!0,shortSwipes:!0,longSwipes:!0,longSwipesRatio:.5,longSwipesMs:300,followFinger:!0,allowTouchMove:!0,threshold:0,touchMoveStopPropagation:!0,touchStartPreventDefault:!0,touchStartForcePreventDefault:!1,touchReleaseOnEdges:!1,uniqueNavElements:!0,resistance:!0,resistanceRatio:.85,watchSlidesProgress:!1,watchSlidesVisibility:!1,grabCursor:!1,preventClicks:!0,preventClicksPropagation:!0,slideToClickedSlide:!1,preloadImages:!0,updateOnImagesReady:!0,loop:!1,loopAdditionalSlides:0,loopedSlides:null,loopFillGroupWithBlank:!1,allowSlidePrev:!0,allowSlideNext:!0,swipeHandler:null,noSwiping:!0,noSwipingClass:"swiper-no-swiping",noSwipingSelector:null,passiveListeners:!0,containerModifierClass:"swiper-container-",slideClass:"swiper-slide",slideBlankClass:"swiper-slide-invisible-blank",slideActiveClass:"swiper-slide-active",slideDuplicateActiveClass:"swiper-slide-duplicate-active",slideVisibleClass:"swiper-slide-visible",slideDuplicateClass:"swiper-slide-duplicate",slideNextClass:"swiper-slide-next",slideDuplicateNextClass:"swiper-slide-duplicate-next",slidePrevClass:"swiper-slide-prev",slideDuplicatePrevClass:"swiper-slide-duplicate-prev",wrapperClass:"swiper-wrapper",runCallbacksOnInit:!0},b={update:d,translate:u,transition:{setTransition:function(e,t){this.$wrapperEl.transition(e),this.emit("setTransition",e,t)},transitionStart:function(e,t){void 0===e&&(e=!0);var i=this,n=i.activeIndex,a=i.params,r=i.previousIndex;a.autoHeight&&i.updateAutoHeight();var s=t;if(s=s||(r<n?"next":n<r?"prev":"reset"),i.emit("transitionStart"),e&&n!==r){if("reset"===s)return void i.emit("slideResetTransitionStart");i.emit("slideChangeTransitionStart"),"next"===s?i.emit("slideNextTransitionStart"):i.emit("slidePrevTransitionStart")}},transitionEnd:function(e,t){void 0===e&&(e=!0);var i=this,n=i.activeIndex,a=i.previousIndex;i.animating=!1,i.setTransition(0);var r=t;if(r=r||(a<n?"next":n<a?"prev":"reset"),i.emit("transitionEnd"),e&&n!==a){if("reset"===r)return void i.emit("slideResetTransitionEnd");i.emit("slideChangeTransitionEnd"),"next"===r?i.emit("slideNextTransitionEnd"):i.emit("slidePrevTransitionEnd")}}},slide:c,loop:p,grabCursor:h,manipulation:f,events:{attachEvents:function(){var e=this,t=e.params,i=e.touchEvents,n=e.el,a=e.wrapperEl;e.onTouchStart=function(e){var t=this,i=t.touchEventsData,n=t.params,a=t.touches;if(!t.animating||!n.preventInteractionOnTransition){var r=e;if(r.originalEvent&&(r=r.originalEvent),i.isTouchEvent="touchstart"===r.type,(i.isTouchEvent||!("which"in r)||3!==r.which)&&!(!i.isTouchEvent&&"button"in r&&0<r.button||i.isTouched&&i.isMoved))if(n.noSwiping&&D(r.target).closest(n.noSwipingSelector?n.noSwipingSelector:"."+n.noSwipingClass)[0])t.allowClick=!0;else if(!n.swipeHandler||D(r).closest(n.swipeHandler)[0]){a.currentX="touchstart"===r.type?r.targetTouches[0].pageX:r.pageX,a.currentY="touchstart"===r.type?r.targetTouches[0].pageY:r.pageY;var s=a.currentX,o=a.currentY,l=n.edgeSwipeDetection||n.iOSEdgeSwipeDetection,d=n.edgeSwipeThreshold||n.iOSEdgeSwipeThreshold;if(!l||!(s<=d||s>=Z.screen.width-d)){if(ee.extend(i,{isTouched:!0,isMoved:!1,allowTouchCallbacks:!0,isScrolling:void 0,startMoving:void 0}),a.startX=s,a.startY=o,i.touchStartTime=ee.now(),t.allowClick=!0,t.updateSize(),t.swipeDirection=void 0,0<n.threshold&&(i.allowThresholdMove=!1),"touchstart"!==r.type){var u=!0;D(r.target).is(i.formElements)&&(u=!1),v.activeElement&&D(v.activeElement).is(i.formElements)&&v.activeElement!==r.target&&v.activeElement.blur();var c=u&&t.allowTouchMove&&n.touchStartPreventDefault;(n.touchStartForcePreventDefault||c)&&r.preventDefault()}t.emit("touchStart",r)}}}}.bind(e),e.onTouchMove=function(e){var t=this,i=t.touchEventsData,n=t.params,a=t.touches,r=t.rtlTranslate,s=e;if(s.originalEvent&&(s=s.originalEvent),i.isTouched){if(!i.isTouchEvent||"mousemove"!==s.type){var o="touchmove"===s.type?s.targetTouches[0].pageX:s.pageX,l="touchmove"===s.type?s.targetTouches[0].pageY:s.pageY;if(s.preventedByNestedSwiper)return a.startX=o,void(a.startY=l);if(!t.allowTouchMove)return t.allowClick=!1,void(i.isTouched&&(ee.extend(a,{startX:o,startY:l,currentX:o,currentY:l}),i.touchStartTime=ee.now()));if(i.isTouchEvent&&n.touchReleaseOnEdges&&!n.loop)if(t.isVertical()){if(l<a.startY&&t.translate<=t.maxTranslate()||l>a.startY&&t.translate>=t.minTranslate())return i.isTouched=!1,void(i.isMoved=!1)}else if(o<a.startX&&t.translate<=t.maxTranslate()||o>a.startX&&t.translate>=t.minTranslate())return;if(i.isTouchEvent&&v.activeElement&&s.target===v.activeElement&&D(s.target).is(i.formElements))return i.isMoved=!0,void(t.allowClick=!1);if(i.allowTouchCallbacks&&t.emit("touchMove",s),!(s.targetTouches&&1<s.targetTouches.length)){a.currentX=o,a.currentY=l;var d,u=a.currentX-a.startX,c=a.currentY-a.startY;if(!(t.params.threshold&&Math.sqrt(Math.pow(u,2)+Math.pow(c,2))<t.params.threshold))if(void 0===i.isScrolling&&(t.isHorizontal()&&a.currentY===a.startY||t.isVertical()&&a.currentX===a.startX?i.isScrolling=!1:25<=u*u+c*c&&(d=180*Math.atan2(Math.abs(c),Math.abs(u))/Math.PI,i.isScrolling=t.isHorizontal()?d>n.touchAngle:90-d>n.touchAngle)),i.isScrolling&&t.emit("touchMoveOpposite",s),void 0===i.startMoving&&(a.currentX===a.startX&&a.currentY===a.startY||(i.startMoving=!0)),i.isScrolling)i.isTouched=!1;else if(i.startMoving){t.allowClick=!1,s.preventDefault(),n.touchMoveStopPropagation&&!n.nested&&s.stopPropagation(),i.isMoved||(n.loop&&t.loopFix(),i.startTranslate=t.getTranslate(),t.setTransition(0),t.animating&&t.$wrapperEl.trigger("webkitTransitionEnd transitionend"),i.allowMomentumBounce=!1,!n.grabCursor||!0!==t.allowSlideNext&&!0!==t.allowSlidePrev||t.setGrabCursor(!0),t.emit("sliderFirstMove",s)),t.emit("sliderMove",s),i.isMoved=!0;var p=t.isHorizontal()?u:c;a.diff=p,p*=n.touchRatio,r&&(p=-p),t.swipeDirection=0<p?"prev":"next",i.currentTranslate=p+i.startTranslate;var h=!0,f=n.resistanceRatio;if(n.touchReleaseOnEdges&&(f=0),0<p&&i.currentTranslate>t.minTranslate()?(h=!1,n.resistance&&(i.currentTranslate=t.minTranslate()-1+Math.pow(-t.minTranslate()+i.startTranslate+p,f))):p<0&&i.currentTranslate<t.maxTranslate()&&(h=!1,n.resistance&&(i.currentTranslate=t.maxTranslate()+1-Math.pow(t.maxTranslate()-i.startTranslate-p,f))),h&&(s.preventedByNestedSwiper=!0),!t.allowSlideNext&&"next"===t.swipeDirection&&i.currentTranslate<i.startTranslate&&(i.currentTranslate=i.startTranslate),!t.allowSlidePrev&&"prev"===t.swipeDirection&&i.currentTranslate>i.startTranslate&&(i.currentTranslate=i.startTranslate),0<n.threshold){if(!(Math.abs(p)>n.threshold||i.allowThresholdMove))return void(i.currentTranslate=i.startTranslate);if(!i.allowThresholdMove)return i.allowThresholdMove=!0,a.startX=a.currentX,a.startY=a.currentY,i.currentTranslate=i.startTranslate,void(a.diff=t.isHorizontal()?a.currentX-a.startX:a.currentY-a.startY)}n.followFinger&&((n.freeMode||n.watchSlidesProgress||n.watchSlidesVisibility)&&(t.updateActiveIndex(),t.updateSlidesClasses()),n.freeMode&&(0===i.velocities.length&&i.velocities.push({position:a[t.isHorizontal()?"startX":"startY"],time:i.touchStartTime}),i.velocities.push({position:a[t.isHorizontal()?"currentX":"currentY"],time:ee.now()})),t.updateProgress(i.currentTranslate),t.setTranslate(i.currentTranslate))}}}}else i.startMoving&&i.isScrolling&&t.emit("touchMoveOpposite",s)}.bind(e),e.onTouchEnd=function(e){var t=this,i=t.touchEventsData,n=t.params,a=t.touches,r=t.rtlTranslate,s=t.$wrapperEl,o=t.slidesGrid,l=t.snapGrid,d=e;if(d.originalEvent&&(d=d.originalEvent),i.allowTouchCallbacks&&t.emit("touchEnd",d),i.allowTouchCallbacks=!1,!i.isTouched)return i.isMoved&&n.grabCursor&&t.setGrabCursor(!1),i.isMoved=!1,void(i.startMoving=!1);n.grabCursor&&i.isMoved&&i.isTouched&&(!0===t.allowSlideNext||!0===t.allowSlidePrev)&&t.setGrabCursor(!1);var u,c=ee.now(),p=c-i.touchStartTime;if(t.allowClick&&(t.updateClickedSlide(d),t.emit("tap",d),p<300&&300<c-i.lastClickTime&&(i.clickTimeout&&clearTimeout(i.clickTimeout),i.clickTimeout=ee.nextTick(function(){t&&!t.destroyed&&t.emit("click",d)},300)),p<300&&c-i.lastClickTime<300&&(i.clickTimeout&&clearTimeout(i.clickTimeout),t.emit("doubleTap",d))),i.lastClickTime=ee.now(),ee.nextTick(function(){t.destroyed||(t.allowClick=!0)}),!i.isTouched||!i.isMoved||!t.swipeDirection||0===a.diff||i.currentTranslate===i.startTranslate)return i.isTouched=!1,i.isMoved=!1,void(i.startMoving=!1);if(i.isTouched=!1,i.isMoved=!1,i.startMoving=!1,u=n.followFinger?r?t.translate:-t.translate:-i.currentTranslate,n.freeMode){if(u<-t.minTranslate())return void t.slideTo(t.activeIndex);if(u>-t.maxTranslate())return void(t.slides.length<l.length?t.slideTo(l.length-1):t.slideTo(t.slides.length-1));if(n.freeModeMomentum){if(1<i.velocities.length){var h=i.velocities.pop(),f=i.velocities.pop(),v=h.position-f.position,m=h.time-f.time;t.velocity=v/m,t.velocity/=2,Math.abs(t.velocity)<n.freeModeMinimumVelocity&&(t.velocity=0),(150<m||300<ee.now()-h.time)&&(t.velocity=0)}else t.velocity=0;t.velocity*=n.freeModeMomentumVelocityRatio,i.velocities.length=0;var g=1e3*n.freeModeMomentumRatio,y=t.velocity*g,b=t.translate+y;r&&(b=-b);var x,w,T=!1,C=20*Math.abs(t.velocity)*n.freeModeMomentumBounceRatio;if(b<t.maxTranslate())n.freeModeMomentumBounce?(b+t.maxTranslate()<-C&&(b=t.maxTranslate()-C),x=t.maxTranslate(),T=!0,i.allowMomentumBounce=!0):b=t.maxTranslate(),n.loop&&n.centeredSlides&&(w=!0);else if(b>t.minTranslate())n.freeModeMomentumBounce?(b-t.minTranslate()>C&&(b=t.minTranslate()+C),x=t.minTranslate(),T=!0,i.allowMomentumBounce=!0):b=t.minTranslate(),n.loop&&n.centeredSlides&&(w=!0);else if(n.freeModeSticky){for(var E,S=0;S<l.length;S+=1)if(l[S]>-b){E=S;break}b=-(b=Math.abs(l[E]-b)<Math.abs(l[E-1]-b)||"next"===t.swipeDirection?l[E]:l[E-1])}if(w&&t.once("transitionEnd",function(){t.loopFix()}),0!==t.velocity)g=r?Math.abs((-b-t.translate)/t.velocity):Math.abs((b-t.translate)/t.velocity);else if(n.freeModeSticky)return void t.slideToClosest();n.freeModeMomentumBounce&&T?(t.updateProgress(x),t.setTransition(g),t.setTranslate(b),t.transitionStart(!0,t.swipeDirection),t.animating=!0,s.transitionEnd(function(){t&&!t.destroyed&&i.allowMomentumBounce&&(t.emit("momentumBounce"),t.setTransition(n.speed),t.setTranslate(x),s.transitionEnd(function(){t&&!t.destroyed&&t.transitionEnd()}))})):t.velocity?(t.updateProgress(b),t.setTransition(g),t.setTranslate(b),t.transitionStart(!0,t.swipeDirection),t.animating||(t.animating=!0,s.transitionEnd(function(){t&&!t.destroyed&&t.transitionEnd()}))):t.updateProgress(b),t.updateActiveIndex(),t.updateSlidesClasses()}else if(n.freeModeSticky)return void t.slideToClosest();(!n.freeModeMomentum||p>=n.longSwipesMs)&&(t.updateProgress(),t.updateActiveIndex(),t.updateSlidesClasses())}else{for(var k=0,M=t.slidesSizesGrid[0],P=0;P<o.length;P+=n.slidesPerGroup)void 0!==o[P+n.slidesPerGroup]?u>=o[P]&&u<o[P+n.slidesPerGroup]&&(M=o[(k=P)+n.slidesPerGroup]-o[P]):u>=o[P]&&(k=P,M=o[o.length-1]-o[o.length-2]);var $=(u-o[k])/M;if(p>n.longSwipesMs){if(!n.longSwipes)return void t.slideTo(t.activeIndex);"next"===t.swipeDirection&&($>=n.longSwipesRatio?t.slideTo(k+n.slidesPerGroup):t.slideTo(k)),"prev"===t.swipeDirection&&($>1-n.longSwipesRatio?t.slideTo(k+n.slidesPerGroup):t.slideTo(k))}else{if(!n.shortSwipes)return void t.slideTo(t.activeIndex);"next"===t.swipeDirection&&t.slideTo(k+n.slidesPerGroup),"prev"===t.swipeDirection&&t.slideTo(k)}}}.bind(e),e.onClick=function(e){this.allowClick||(this.params.preventClicks&&e.preventDefault(),this.params.preventClicksPropagation&&this.animating&&(e.stopPropagation(),e.stopImmediatePropagation()))}.bind(e);var r="container"===t.touchEventsTarget?n:a,s=!!t.nested;if(te.touch||!te.pointerEvents&&!te.prefixedPointerEvents){if(te.touch){var o=!("touchstart"!==i.start||!te.passiveListener||!t.passiveListeners)&&{passive:!0,capture:!1};r.addEventListener(i.start,e.onTouchStart,o),r.addEventListener(i.move,e.onTouchMove,te.passiveListener?{passive:!1,capture:s}:s),r.addEventListener(i.end,e.onTouchEnd,o)}(t.simulateTouch&&!m.ios&&!m.android||t.simulateTouch&&!te.touch&&m.ios)&&(r.addEventListener("mousedown",e.onTouchStart,!1),v.addEventListener("mousemove",e.onTouchMove,s),v.addEventListener("mouseup",e.onTouchEnd,!1))}else r.addEventListener(i.start,e.onTouchStart,!1),v.addEventListener(i.move,e.onTouchMove,s),v.addEventListener(i.end,e.onTouchEnd,!1);(t.preventClicks||t.preventClicksPropagation)&&r.addEventListener("click",e.onClick,!0),e.on(m.ios||m.android?"resize orientationchange observerUpdate":"resize observerUpdate",g,!0)},detachEvents:function(){var e=this,t=e.params,i=e.touchEvents,n=e.el,a=e.wrapperEl,r="container"===t.touchEventsTarget?n:a,s=!!t.nested;if(te.touch||!te.pointerEvents&&!te.prefixedPointerEvents){if(te.touch){var o=!("onTouchStart"!==i.start||!te.passiveListener||!t.passiveListeners)&&{passive:!0,capture:!1};r.removeEventListener(i.start,e.onTouchStart,o),r.removeEventListener(i.move,e.onTouchMove,s),r.removeEventListener(i.end,e.onTouchEnd,o)}(t.simulateTouch&&!m.ios&&!m.android||t.simulateTouch&&!te.touch&&m.ios)&&(r.removeEventListener("mousedown",e.onTouchStart,!1),v.removeEventListener("mousemove",e.onTouchMove,s),v.removeEventListener("mouseup",e.onTouchEnd,!1))}else r.removeEventListener(i.start,e.onTouchStart,!1),v.removeEventListener(i.move,e.onTouchMove,s),v.removeEventListener(i.end,e.onTouchEnd,!1);(t.preventClicks||t.preventClicksPropagation)&&r.removeEventListener("click",e.onClick,!0),e.off(m.ios||m.android?"resize orientationchange observerUpdate":"resize observerUpdate",g)}},breakpoints:{setBreakpoint:function(){var e=this,t=e.activeIndex,i=e.initialized,n=e.loopedSlides;void 0===n&&(n=0);var a=e.params,r=a.breakpoints;if(r&&(!r||0!==Object.keys(r).length)){var s=e.getBreakpoint(r);if(s&&e.currentBreakpoint!==s){var o=s in r?r[s]:void 0;o&&["slidesPerView","spaceBetween","slidesPerGroup"].forEach(function(e){var t=o[e];void 0!==t&&(o[e]="slidesPerView"!==e||"AUTO"!==t&&"auto"!==t?"slidesPerView"===e?parseFloat(t):parseInt(t,10):"auto")});var l=o||e.originalParams,d=l.direction&&l.direction!==a.direction,u=a.loop&&(l.slidesPerView!==a.slidesPerView||d);d&&i&&e.changeDirection(),ee.extend(e.params,l),ee.extend(e,{allowTouchMove:e.params.allowTouchMove,allowSlideNext:e.params.allowSlideNext,allowSlidePrev:e.params.allowSlidePrev}),e.currentBreakpoint=s,u&&i&&(e.loopDestroy(),e.loopCreate(),e.updateSlides(),e.slideTo(t-n+e.loopedSlides,0,!1)),e.emit("breakpoint",l)}}},getBreakpoint:function(e){if(e){var t=!1,i=[];Object.keys(e).forEach(function(e){i.push(e)}),i.sort(function(e,t){return parseInt(e,10)-parseInt(t,10)});for(var n=0;n<i.length;n+=1){var a=i[n];this.params.breakpointsInverse?a<=Z.innerWidth&&(t=a):a>=Z.innerWidth&&!t&&(t=a)}return t||"max"}}},checkOverflow:{checkOverflow:function(){var e=this,t=e.isLocked;e.isLocked=1===e.snapGrid.length,e.allowSlideNext=!e.isLocked,e.allowSlidePrev=!e.isLocked,t!==e.isLocked&&e.emit(e.isLocked?"lock":"unlock"),t&&t!==e.isLocked&&(e.isEnd=!1,e.navigation.update())}},classes:{addClasses:function(){var t=this.classNames,i=this.params,e=this.rtl,n=this.$el,a=[];a.push("initialized"),a.push(i.direction),i.freeMode&&a.push("free-mode"),te.flexbox||a.push("no-flexbox"),i.autoHeight&&a.push("autoheight"),e&&a.push("rtl"),1<i.slidesPerColumn&&a.push("multirow"),m.android&&a.push("android"),m.ios&&a.push("ios"),(z.isIE||z.isEdge)&&(te.pointerEvents||te.prefixedPointerEvents)&&a.push("wp8-"+i.direction),a.forEach(function(e){t.push(i.containerModifierClass+e)}),n.addClass(t.join(" "))},removeClasses:function(){var e=this.$el,t=this.classNames;e.removeClass(t.join(" "))}},images:{loadImage:function(e,t,i,n,a,r){var s;function o(){r&&r()}e.complete&&a?o():t?((s=new Z.Image).onload=o,s.onerror=o,n&&(s.sizes=n),i&&(s.srcset=i),t&&(s.src=t)):o()},preloadImages:function(){var e=this;function t(){null!=e&&e&&!e.destroyed&&(void 0!==e.imagesLoaded&&(e.imagesLoaded+=1),e.imagesLoaded===e.imagesToLoad.length&&(e.params.updateOnImagesReady&&e.update(),e.emit("imagesReady")))}e.imagesToLoad=e.$el.find("img");for(var i=0;i<e.imagesToLoad.length;i+=1){var n=e.imagesToLoad[i];e.loadImage(n,n.currentSrc||n.getAttribute("src"),n.srcset||n.getAttribute("srcset"),n.sizes||n.getAttribute("sizes"),!0,t)}}}},x={},w=function(p){function h(){for(var e,t,a,i=[],n=arguments.length;n--;)i[n]=arguments[n];a=(a=1===i.length&&i[0].constructor&&i[0].constructor===Object?i[0]:(t=(e=i)[0],e[1]))||{},a=ee.extend({},a),t&&!a.el&&(a.el=t),p.call(this,a),Object.keys(b).forEach(function(t){Object.keys(b[t]).forEach(function(e){h.prototype[e]||(h.prototype[e]=b[t][e])})});var r=this;void 0===r.modules&&(r.modules={}),Object.keys(r.modules).forEach(function(e){var t=r.modules[e];if(t.params){var i=Object.keys(t.params)[0],n=t.params[i];if("object"!=typeof n||null===n)return;if(!(i in a&&"enabled"in n))return;!0===a[i]&&(a[i]={enabled:!0}),"object"!=typeof a[i]||"enabled"in a[i]||(a[i].enabled=!0),a[i]||(a[i]={enabled:!1})}});var s=ee.extend({},y);r.useModulesParams(s),r.params=ee.extend({},s,x,a),r.originalParams=ee.extend({},r.params),r.passedParams=ee.extend({},a);var o=(r.$=D)(r.params.el);if(t=o[0]){if(1<o.length){var l=[];return o.each(function(e,t){var i=ee.extend({},a,{el:t});l.push(new h(i))}),l}t.swiper=r,o.data("swiper",r);var d,u,c=o.children("."+r.params.wrapperClass);return ee.extend(r,{$el:o,el:t,$wrapperEl:c,wrapperEl:c[0],classNames:[],slides:D(),slidesGrid:[],snapGrid:[],slidesSizesGrid:[],isHorizontal:function(){return"horizontal"===r.params.direction},isVertical:function(){return"vertical"===r.params.direction},rtl:"rtl"===t.dir.toLowerCase()||"rtl"===o.css("direction"),rtlTranslate:"horizontal"===r.params.direction&&("rtl"===t.dir.toLowerCase()||"rtl"===o.css("direction")),wrongRTL:"-webkit-box"===c.css("display"),activeIndex:0,realIndex:0,isBeginning:!0,isEnd:!1,translate:0,previousTranslate:0,progress:0,velocity:0,animating:!1,allowSlideNext:r.params.allowSlideNext,allowSlidePrev:r.params.allowSlidePrev,touchEvents:(d=["touchstart","touchmove","touchend"],u=["mousedown","mousemove","mouseup"],te.pointerEvents?u=["pointerdown","pointermove","pointerup"]:te.prefixedPointerEvents&&(u=["MSPointerDown","MSPointerMove","MSPointerUp"]),r.touchEventsTouch={start:d[0],move:d[1],end:d[2]},r.touchEventsDesktop={start:u[0],move:u[1],end:u[2]},te.touch||!r.params.simulateTouch?r.touchEventsTouch:r.touchEventsDesktop),touchEventsData:{isTouched:void 0,isMoved:void 0,allowTouchCallbacks:void 0,touchStartTime:void 0,isScrolling:void 0,currentTranslate:void 0,startTranslate:void 0,allowThresholdMove:void 0,formElements:"input, select, option, textarea, button, video",lastClickTime:ee.now(),clickTimeout:void 0,velocities:[],allowMomentumBounce:void 0,isTouchEvent:void 0,startMoving:void 0},allowClick:!0,allowTouchMove:r.params.allowTouchMove,touches:{startX:0,startY:0,currentX:0,currentY:0,diff:0},imagesToLoad:[],imagesLoaded:0}),r.useModules(),r.params.init&&r.init(),r}}p&&(h.__proto__=p);var e={extendedDefaults:{configurable:!0},defaults:{configurable:!0},Class:{configurable:!0},$:{configurable:!0}};return((h.prototype=Object.create(p&&p.prototype)).constructor=h).prototype.slidesPerViewDynamic=function(){var e=this,t=e.params,i=e.slides,n=e.slidesGrid,a=e.size,r=e.activeIndex,s=1;if(t.centeredSlides){for(var o,l=i[r].swiperSlideSize,d=r+1;d<i.length;d+=1)i[d]&&!o&&(s+=1,a<(l+=i[d].swiperSlideSize)&&(o=!0));for(var u=r-1;0<=u;u-=1)i[u]&&!o&&(s+=1,a<(l+=i[u].swiperSlideSize)&&(o=!0))}else for(var c=r+1;c<i.length;c+=1)n[c]-n[r]<a&&(s+=1);return s},h.prototype.update=function(){var i=this;if(i&&!i.destroyed){var e=i.snapGrid,t=i.params;t.breakpoints&&i.setBreakpoint(),i.updateSize(),i.updateSlides(),i.updateProgress(),i.updateSlidesClasses(),i.params.freeMode?(n(),i.params.autoHeight&&i.updateAutoHeight()):(("auto"===i.params.slidesPerView||1<i.params.slidesPerView)&&i.isEnd&&!i.params.centeredSlides?i.slideTo(i.slides.length-1,0,!1,!0):i.slideTo(i.activeIndex,0,!1,!0))||n(),t.watchOverflow&&e!==i.snapGrid&&i.checkOverflow(),i.emit("update")}function n(){var e=i.rtlTranslate?-1*i.translate:i.translate,t=Math.min(Math.max(e,i.maxTranslate()),i.minTranslate());i.setTranslate(t),i.updateActiveIndex(),i.updateSlidesClasses()}},h.prototype.changeDirection=function(i,e){void 0===e&&(e=!0);var t=this,n=t.params.direction;return(i=i||("horizontal"===n?"vertical":"horizontal"))===n||"horizontal"!==i&&"vertical"!==i||("vertical"===n&&(t.$el.removeClass(t.params.containerModifierClass+"vertical wp8-vertical").addClass(""+t.params.containerModifierClass+i),(z.isIE||z.isEdge)&&(te.pointerEvents||te.prefixedPointerEvents)&&t.$el.addClass(t.params.containerModifierClass+"wp8-"+i)),"horizontal"===n&&(t.$el.removeClass(t.params.containerModifierClass+"horizontal wp8-horizontal").addClass(""+t.params.containerModifierClass+i),(z.isIE||z.isEdge)&&(te.pointerEvents||te.prefixedPointerEvents)&&t.$el.addClass(t.params.containerModifierClass+"wp8-"+i)),t.params.direction=i,t.slides.each(function(e,t){"vertical"===i?t.style.width="":t.style.height=""}),t.emit("changeDirection"),e&&t.update()),t},h.prototype.init=function(){var e=this;e.initialized||(e.emit("beforeInit"),e.params.breakpoints&&e.setBreakpoint(),e.addClasses(),e.params.loop&&e.loopCreate(),e.updateSize(),e.updateSlides(),e.params.watchOverflow&&e.checkOverflow(),e.params.grabCursor&&e.setGrabCursor(),e.params.preloadImages&&e.preloadImages(),e.params.loop?e.slideTo(e.params.initialSlide+e.loopedSlides,0,e.params.runCallbacksOnInit):e.slideTo(e.params.initialSlide,0,e.params.runCallbacksOnInit),e.attachEvents(),e.initialized=!0,e.emit("init"))},h.prototype.destroy=function(e,t){void 0===e&&(e=!0),void 0===t&&(t=!0);var i=this,n=i.params,a=i.$el,r=i.$wrapperEl,s=i.slides;return void 0===i.params||i.destroyed||(i.emit("beforeDestroy"),i.initialized=!1,i.detachEvents(),n.loop&&i.loopDestroy(),t&&(i.removeClasses(),a.removeAttr("style"),r.removeAttr("style"),s&&s.length&&s.removeClass([n.slideVisibleClass,n.slideActiveClass,n.slideNextClass,n.slidePrevClass].join(" ")).removeAttr("style").removeAttr("data-swiper-slide-index").removeAttr("data-swiper-column").removeAttr("data-swiper-row")),i.emit("destroy"),Object.keys(i.eventsListeners).forEach(function(e){i.off(e)}),!1!==e&&(i.$el[0].swiper=null,i.$el.data("swiper",null),ee.deleteProps(i)),i.destroyed=!0),null},h.extendDefaults=function(e){ee.extend(x,e)},e.extendedDefaults.get=function(){return x},e.defaults.get=function(){return y},e.Class.get=function(){return p},e.$.get=function(){return D},Object.defineProperties(h,e),h}(e),T={name:"device",proto:{device:m},static:{device:m}},C={name:"support",proto:{support:te},static:{support:te}},E={name:"browser",proto:{browser:z},static:{browser:z}},S={name:"resize",create:function(){var e=this;ee.extend(e,{resize:{resizeHandler:function(){e&&!e.destroyed&&e.initialized&&(e.emit("beforeResize"),e.emit("resize"))},orientationChangeHandler:function(){e&&!e.destroyed&&e.initialized&&e.emit("orientationchange")}}})},on:{init:function(){Z.addEventListener("resize",this.resize.resizeHandler),Z.addEventListener("orientationchange",this.resize.orientationChangeHandler)},destroy:function(){Z.removeEventListener("resize",this.resize.resizeHandler),Z.removeEventListener("orientationchange",this.resize.orientationChangeHandler)}}},k={func:Z.MutationObserver||Z.WebkitMutationObserver,attach:function(e,t){void 0===t&&(t={});var i=this,n=new k.func(function(e){if(1!==e.length){var t=function(){i.emit("observerUpdate",e[0])};Z.requestAnimationFrame?Z.requestAnimationFrame(t):Z.setTimeout(t,0)}else i.emit("observerUpdate",e[0])});n.observe(e,{attributes:void 0===t.attributes||t.attributes,childList:void 0===t.childList||t.childList,characterData:void 0===t.characterData||t.characterData}),i.observer.observers.push(n)},init:function(){var e=this;if(te.observer&&e.params.observer){if(e.params.observeParents)for(var t=e.$el.parents(),i=0;i<t.length;i+=1)e.observer.attach(t[i]);e.observer.attach(e.$el[0],{childList:e.params.observeSlideChildren}),e.observer.attach(e.$wrapperEl[0],{attributes:!1})}},destroy:function(){this.observer.observers.forEach(function(e){e.disconnect()}),this.observer.observers=[]}},M={name:"observer",params:{observer:!1,observeParents:!1,observeSlideChildren:!1},create:function(){ee.extend(this,{observer:{init:k.init.bind(this),attach:k.attach.bind(this),destroy:k.destroy.bind(this),observers:[]}})},on:{init:function(){this.observer.init()},destroy:function(){this.observer.destroy()}}},P={update:function(e){var t=this,i=t.params,n=i.slidesPerView,a=i.slidesPerGroup,r=i.centeredSlides,s=t.params.virtual,o=s.addSlidesBefore,l=s.addSlidesAfter,d=t.virtual,u=d.from,c=d.to,p=d.slides,h=d.slidesGrid,f=d.renderSlide,v=d.offset;t.updateActiveIndex();var m,g,y,b=t.activeIndex||0;m=t.rtlTranslate?"right":t.isHorizontal()?"left":"top",y=r?(g=Math.floor(n/2)+a+o,Math.floor(n/2)+a+l):(g=n+(a-1)+o,a+l);var x=Math.max((b||0)-y,0),w=Math.min((b||0)+g,p.length-1),T=(t.slidesGrid[x]||0)-(t.slidesGrid[0]||0);function C(){t.updateSlides(),t.updateProgress(),t.updateSlidesClasses(),t.lazy&&t.params.lazy.enabled&&t.lazy.load()}if(ee.extend(t.virtual,{from:x,to:w,offset:T,slidesGrid:t.slidesGrid}),u===x&&c===w&&!e)return t.slidesGrid!==h&&T!==v&&t.slides.css(m,T+"px"),void t.updateProgress();if(t.params.virtual.renderExternal)return t.params.virtual.renderExternal.call(t,{offset:T,from:x,to:w,slides:function(){for(var e=[],t=x;t<=w;t+=1)e.push(p[t]);return e}()}),void C();var E=[],S=[];if(e)t.$wrapperEl.find("."+t.params.slideClass).remove();else for(var k=u;k<=c;k+=1)(k<x||w<k)&&t.$wrapperEl.find("."+t.params.slideClass+'[data-swiper-slide-index="'+k+'"]').remove();for(var M=0;M<p.length;M+=1)x<=M&&M<=w&&(void 0===c||e?S.push(M):(c<M&&S.push(M),M<u&&E.push(M)));S.forEach(function(e){t.$wrapperEl.append(f(p[e],e))}),E.sort(function(e,t){return t-e}).forEach(function(e){t.$wrapperEl.prepend(f(p[e],e))}),t.$wrapperEl.children(".swiper-slide").css(m,T+"px"),C()},renderSlide:function(e,t){var i=this,n=i.params.virtual;if(n.cache&&i.virtual.cache[t])return i.virtual.cache[t];var a=n.renderSlide?D(n.renderSlide.call(i,e,t)):D('<div class="'+i.params.slideClass+'" data-swiper-slide-index="'+t+'">'+e+"</div>");return a.attr("data-swiper-slide-index")||a.attr("data-swiper-slide-index",t),n.cache&&(i.virtual.cache[t]=a),a},appendSlide:function(e){if("object"==typeof e&&"length"in e)for(var t=0;t<e.length;t+=1)e[t]&&this.virtual.slides.push(e[t]);else this.virtual.slides.push(e);this.virtual.update(!0)},prependSlide:function(e){var t=this,i=t.activeIndex,n=i+1,a=1;if(Array.isArray(e)){for(var r=0;r<e.length;r+=1)e[r]&&t.virtual.slides.unshift(e[r]);n=i+e.length,a=e.length}else t.virtual.slides.unshift(e);if(t.params.virtual.cache){var s=t.virtual.cache,o={};Object.keys(s).forEach(function(e){o[parseInt(e,10)+a]=s[e]}),t.virtual.cache=o}t.virtual.update(!0),t.slideTo(n,0)},removeSlide:function(e){var t=this;if(null!=e){var i=t.activeIndex;if(Array.isArray(e))for(var n=e.length-1;0<=n;n-=1)t.virtual.slides.splice(e[n],1),t.params.virtual.cache&&delete t.virtual.cache[e[n]],e[n]<i&&(i-=1),i=Math.max(i,0);else t.virtual.slides.splice(e,1),t.params.virtual.cache&&delete t.virtual.cache[e],e<i&&(i-=1),i=Math.max(i,0);t.virtual.update(!0),t.slideTo(i,0)}},removeAllSlides:function(){var e=this;e.virtual.slides=[],e.params.virtual.cache&&(e.virtual.cache={}),e.virtual.update(!0),e.slideTo(0,0)}},$={name:"virtual",params:{virtual:{enabled:!1,slides:[],cache:!0,renderSlide:null,renderExternal:null,addSlidesBefore:0,addSlidesAfter:0}},create:function(){var e=this;ee.extend(e,{virtual:{update:P.update.bind(e),appendSlide:P.appendSlide.bind(e),prependSlide:P.prependSlide.bind(e),removeSlide:P.removeSlide.bind(e),removeAllSlides:P.removeAllSlides.bind(e),renderSlide:P.renderSlide.bind(e),slides:e.params.virtual.slides,cache:{}}})},on:{beforeInit:function(){var e=this;if(e.params.virtual.enabled){e.classNames.push(e.params.containerModifierClass+"virtual");var t={watchSlidesProgress:!0};ee.extend(e.params,t),ee.extend(e.originalParams,t),e.params.initialSlide||e.virtual.update()}},setTranslate:function(){this.params.virtual.enabled&&this.virtual.update()}}},L={handle:function(e){var t=this,i=t.rtlTranslate,n=e;n.originalEvent&&(n=n.originalEvent);var a=n.keyCode||n.charCode;if(!t.allowSlideNext&&(t.isHorizontal()&&39===a||t.isVertical()&&40===a))return!1;if(!t.allowSlidePrev&&(t.isHorizontal()&&37===a||t.isVertical()&&38===a))return!1;if(!(n.shiftKey||n.altKey||n.ctrlKey||n.metaKey||v.activeElement&&v.activeElement.nodeName&&("input"===v.activeElement.nodeName.toLowerCase()||"textarea"===v.activeElement.nodeName.toLowerCase()))){if(t.params.keyboard.onlyInViewport&&(37===a||39===a||38===a||40===a)){var r=!1;if(0<t.$el.parents("."+t.params.slideClass).length&&0===t.$el.parents("."+t.params.slideActiveClass).length)return;var s=Z.innerWidth,o=Z.innerHeight,l=t.$el.offset();i&&(l.left-=t.$el[0].scrollLeft);for(var d=[[l.left,l.top],[l.left+t.width,l.top],[l.left,l.top+t.height],[l.left+t.width,l.top+t.height]],u=0;u<d.length;u+=1){var c=d[u];0<=c[0]&&c[0]<=s&&0<=c[1]&&c[1]<=o&&(r=!0)}if(!r)return}t.isHorizontal()?(37!==a&&39!==a||(n.preventDefault?n.preventDefault():n.returnValue=!1),(39===a&&!i||37===a&&i)&&t.slideNext(),(37===a&&!i||39===a&&i)&&t.slidePrev()):(38!==a&&40!==a||(n.preventDefault?n.preventDefault():n.returnValue=!1),40===a&&t.slideNext(),38===a&&t.slidePrev()),t.emit("keyPress",a)}},enable:function(){this.keyboard.enabled||(D(v).on("keydown",this.keyboard.handle),this.keyboard.enabled=!0)},disable:function(){this.keyboard.enabled&&(D(v).off("keydown",this.keyboard.handle),this.keyboard.enabled=!1)}},I={name:"keyboard",params:{keyboard:{enabled:!1,onlyInViewport:!0}},create:function(){ee.extend(this,{keyboard:{enabled:!1,enable:L.enable.bind(this),disable:L.disable.bind(this),handle:L.handle.bind(this)}})},on:{init:function(){this.params.keyboard.enabled&&this.keyboard.enable()},destroy:function(){this.keyboard.enabled&&this.keyboard.disable()}}},N={lastScrollTime:ee.now(),event:-1<Z.navigator.userAgent.indexOf("firefox")?"DOMMouseScroll":function(){var e="onwheel",t=e in v;if(!t){var i=v.createElement("div");i.setAttribute(e,"return;"),t="function"==typeof i[e]}return!t&&v.implementation&&v.implementation.hasFeature&&!0!==v.implementation.hasFeature("","")&&(t=v.implementation.hasFeature("Events.wheel","3.0")),t}()?"wheel":"mousewheel",normalize:function(e){var t=0,i=0,n=0,a=0;return"detail"in e&&(i=e.detail),"wheelDelta"in e&&(i=-e.wheelDelta/120),"wheelDeltaY"in e&&(i=-e.wheelDeltaY/120),"wheelDeltaX"in e&&(t=-e.wheelDeltaX/120),"axis"in e&&e.axis===e.HORIZONTAL_AXIS&&(t=i,i=0),n=10*t,a=10*i,"deltaY"in e&&(a=e.deltaY),"deltaX"in e&&(n=e.deltaX),(n||a)&&e.deltaMode&&(1===e.deltaMode?(n*=40,a*=40):(n*=800,a*=800)),n&&!t&&(t=n<1?-1:1),a&&!i&&(i=a<1?-1:1),{spinX:t,spinY:i,pixelX:n,pixelY:a}},handleMouseEnter:function(){this.mouseEntered=!0},handleMouseLeave:function(){this.mouseEntered=!1},handle:function(e){var t=e,i=this,n=i.params.mousewheel;if(!i.mouseEntered&&!n.releaseOnEdges)return!0;t.originalEvent&&(t=t.originalEvent);var a=0,r=i.rtlTranslate?-1:1,s=N.normalize(t);if(n.forceToAxis)if(i.isHorizontal()){if(!(Math.abs(s.pixelX)>Math.abs(s.pixelY)))return!0;a=s.pixelX*r}else{if(!(Math.abs(s.pixelY)>Math.abs(s.pixelX)))return!0;a=s.pixelY}else a=Math.abs(s.pixelX)>Math.abs(s.pixelY)?-s.pixelX*r:-s.pixelY;if(0===a)return!0;if(n.invert&&(a=-a),i.params.freeMode){i.params.loop&&i.loopFix();var o=i.getTranslate()+a*n.sensitivity,l=i.isBeginning,d=i.isEnd;if(o>=i.minTranslate()&&(o=i.minTranslate()),o<=i.maxTranslate()&&(o=i.maxTranslate()),i.setTransition(0),i.setTranslate(o),i.updateProgress(),i.updateActiveIndex(),i.updateSlidesClasses(),(!l&&i.isBeginning||!d&&i.isEnd)&&i.updateSlidesClasses(),i.params.freeModeSticky&&(clearTimeout(i.mousewheel.timeout),i.mousewheel.timeout=ee.nextTick(function(){i.slideToClosest()},300)),i.emit("scroll",t),i.params.autoplay&&i.params.autoplayDisableOnInteraction&&i.autoplay.stop(),o===i.minTranslate()||o===i.maxTranslate())return!0}else{if(60<ee.now()-i.mousewheel.lastScrollTime)if(a<0)if(i.isEnd&&!i.params.loop||i.animating){if(n.releaseOnEdges)return!0}else i.slideNext(),i.emit("scroll",t);else if(i.isBeginning&&!i.params.loop||i.animating){if(n.releaseOnEdges)return!0}else i.slidePrev(),i.emit("scroll",t);i.mousewheel.lastScrollTime=(new Z.Date).getTime()}return t.preventDefault?t.preventDefault():t.returnValue=!1,!1},enable:function(){var e=this;if(!N.event)return!1;if(e.mousewheel.enabled)return!1;var t=e.$el;return"container"!==e.params.mousewheel.eventsTarged&&(t=D(e.params.mousewheel.eventsTarged)),t.on("mouseenter",e.mousewheel.handleMouseEnter),t.on("mouseleave",e.mousewheel.handleMouseLeave),t.on(N.event,e.mousewheel.handle),e.mousewheel.enabled=!0},disable:function(){var e=this;if(!N.event)return!1;if(!e.mousewheel.enabled)return!1;var t=e.$el;return"container"!==e.params.mousewheel.eventsTarged&&(t=D(e.params.mousewheel.eventsTarged)),t.off(N.event,e.mousewheel.handle),!(e.mousewheel.enabled=!1)}},A={update:function(){var e=this,t=e.params.navigation;if(!e.params.loop){var i=e.navigation,n=i.$nextEl,a=i.$prevEl;a&&0<a.length&&(e.isBeginning?a.addClass(t.disabledClass):a.removeClass(t.disabledClass),a[e.params.watchOverflow&&e.isLocked?"addClass":"removeClass"](t.lockClass)),n&&0<n.length&&(e.isEnd?n.addClass(t.disabledClass):n.removeClass(t.disabledClass),n[e.params.watchOverflow&&e.isLocked?"addClass":"removeClass"](t.lockClass))}},onPrevClick:function(e){e.preventDefault(),this.isBeginning&&!this.params.loop||this.slidePrev()},onNextClick:function(e){e.preventDefault(),this.isEnd&&!this.params.loop||this.slideNext()},init:function(){var e,t,i=this,n=i.params.navigation;(n.nextEl||n.prevEl)&&(n.nextEl&&(e=D(n.nextEl),i.params.uniqueNavElements&&"string"==typeof n.nextEl&&1<e.length&&1===i.$el.find(n.nextEl).length&&(e=i.$el.find(n.nextEl))),n.prevEl&&(t=D(n.prevEl),i.params.uniqueNavElements&&"string"==typeof n.prevEl&&1<t.length&&1===i.$el.find(n.prevEl).length&&(t=i.$el.find(n.prevEl))),e&&0<e.length&&e.on("click",i.navigation.onNextClick),t&&0<t.length&&t.on("click",i.navigation.onPrevClick),ee.extend(i.navigation,{$nextEl:e,nextEl:e&&e[0],$prevEl:t,prevEl:t&&t[0]}))},destroy:function(){var e=this,t=e.navigation,i=t.$nextEl,n=t.$prevEl;i&&i.length&&(i.off("click",e.navigation.onNextClick),i.removeClass(e.params.navigation.disabledClass)),n&&n.length&&(n.off("click",e.navigation.onPrevClick),n.removeClass(e.params.navigation.disabledClass))}},O={update:function(){var e=this,t=e.rtl,a=e.params.pagination;if(a.el&&e.pagination.el&&e.pagination.$el&&0!==e.pagination.$el.length){var r,i=e.virtual&&e.params.virtual.enabled?e.virtual.slides.length:e.slides.length,n=e.pagination.$el,s=e.params.loop?Math.ceil((i-2*e.loopedSlides)/e.params.slidesPerGroup):e.snapGrid.length;if(e.params.loop?((r=Math.ceil((e.activeIndex-e.loopedSlides)/e.params.slidesPerGroup))>i-1-2*e.loopedSlides&&(r-=i-2*e.loopedSlides),s-1<r&&(r-=s),r<0&&"bullets"!==e.params.paginationType&&(r=s+r)):r=void 0!==e.snapIndex?e.snapIndex:e.activeIndex||0,"bullets"===a.type&&e.pagination.bullets&&0<e.pagination.bullets.length){var o,l,d,u=e.pagination.bullets;if(a.dynamicBullets&&(e.pagination.bulletSize=u.eq(0)[e.isHorizontal()?"outerWidth":"outerHeight"](!0),n.css(e.isHorizontal()?"width":"height",e.pagination.bulletSize*(a.dynamicMainBullets+4)+"px"),1<a.dynamicMainBullets&&void 0!==e.previousIndex&&(e.pagination.dynamicBulletIndex+=r-e.previousIndex,e.pagination.dynamicBulletIndex>a.dynamicMainBullets-1?e.pagination.dynamicBulletIndex=a.dynamicMainBullets-1:e.pagination.dynamicBulletIndex<0&&(e.pagination.dynamicBulletIndex=0)),o=r-e.pagination.dynamicBulletIndex,d=((l=o+(Math.min(u.length,a.dynamicMainBullets)-1))+o)/2),u.removeClass(a.bulletActiveClass+" "+a.bulletActiveClass+"-next "+a.bulletActiveClass+"-next-next "+a.bulletActiveClass+"-prev "+a.bulletActiveClass+"-prev-prev "+a.bulletActiveClass+"-main"),1<n.length)u.each(function(e,t){var i=D(t),n=i.index();n===r&&i.addClass(a.bulletActiveClass),a.dynamicBullets&&(o<=n&&n<=l&&i.addClass(a.bulletActiveClass+"-main"),n===o&&i.prev().addClass(a.bulletActiveClass+"-prev").prev().addClass(a.bulletActiveClass+"-prev-prev"),n===l&&i.next().addClass(a.bulletActiveClass+"-next").next().addClass(a.bulletActiveClass+"-next-next"))});else if(u.eq(r).addClass(a.bulletActiveClass),a.dynamicBullets){for(var c=u.eq(o),p=u.eq(l),h=o;h<=l;h+=1)u.eq(h).addClass(a.bulletActiveClass+"-main");c.prev().addClass(a.bulletActiveClass+"-prev").prev().addClass(a.bulletActiveClass+"-prev-prev"),p.next().addClass(a.bulletActiveClass+"-next").next().addClass(a.bulletActiveClass+"-next-next")}if(a.dynamicBullets){var f=Math.min(u.length,a.dynamicMainBullets+4),v=(e.pagination.bulletSize*f-e.pagination.bulletSize)/2-d*e.pagination.bulletSize,m=t?"right":"left";u.css(e.isHorizontal()?m:"top",v+"px")}}if("fraction"===a.type&&(n.find("."+a.currentClass).text(a.formatFractionCurrent(r+1)),n.find("."+a.totalClass).text(a.formatFractionTotal(s))),"progressbar"===a.type){var g;g=a.progressbarOpposite?e.isHorizontal()?"vertical":"horizontal":e.isHorizontal()?"horizontal":"vertical";var y=(r+1)/s,b=1,x=1;"horizontal"==g?b=y:x=y,n.find("."+a.progressbarFillClass).transform("translate3d(0,0,0) scaleX("+b+") scaleY("+x+")").transition(e.params.speed)}"custom"===a.type&&a.renderCustom?(n.html(a.renderCustom(e,r+1,s)),e.emit("paginationRender",e,n[0])):e.emit("paginationUpdate",e,n[0]),n[e.params.watchOverflow&&e.isLocked?"addClass":"removeClass"](a.lockClass)}},render:function(){var e=this,t=e.params.pagination;if(t.el&&e.pagination.el&&e.pagination.$el&&0!==e.pagination.$el.length){var i=e.virtual&&e.params.virtual.enabled?e.virtual.slides.length:e.slides.length,n=e.pagination.$el,a="";if("bullets"===t.type){for(var r=e.params.loop?Math.ceil((i-2*e.loopedSlides)/e.params.slidesPerGroup):e.snapGrid.length,s=0;s<r;s+=1)t.renderBullet?a+=t.renderBullet.call(e,s,t.bulletClass):a+="<"+t.bulletElement+' class="'+t.bulletClass+'"></'+t.bulletElement+">";n.html(a),e.pagination.bullets=n.find("."+t.bulletClass)}"fraction"===t.type&&(a=t.renderFraction?t.renderFraction.call(e,t.currentClass,t.totalClass):'<span class="'+t.currentClass+'"></span> / <span class="'+t.totalClass+'"></span>',n.html(a)),"progressbar"===t.type&&(a=t.renderProgressbar?t.renderProgressbar.call(e,t.progressbarFillClass):'<span class="'+t.progressbarFillClass+'"></span>',n.html(a)),"custom"!==t.type&&e.emit("paginationRender",e.pagination.$el[0])}},init:function(){var i=this,e=i.params.pagination;if(e.el){var t=D(e.el);0!==t.length&&(i.params.uniqueNavElements&&"string"==typeof e.el&&1<t.length&&1===i.$el.find(e.el).length&&(t=i.$el.find(e.el)),"bullets"===e.type&&e.clickable&&t.addClass(e.clickableClass),t.addClass(e.modifierClass+e.type),"bullets"===e.type&&e.dynamicBullets&&(t.addClass(""+e.modifierClass+e.type+"-dynamic"),i.pagination.dynamicBulletIndex=0,e.dynamicMainBullets<1&&(e.dynamicMainBullets=1)),"progressbar"===e.type&&e.progressbarOpposite&&t.addClass(e.progressbarOppositeClass),e.clickable&&t.on("click","."+e.bulletClass,function(e){e.preventDefault();var t=D(this).index()*i.params.slidesPerGroup;i.params.loop&&(t+=i.loopedSlides),i.slideTo(t)}),ee.extend(i.pagination,{$el:t,el:t[0]}))}},destroy:function(){var e=this,t=e.params.pagination;if(t.el&&e.pagination.el&&e.pagination.$el&&0!==e.pagination.$el.length){var i=e.pagination.$el;i.removeClass(t.hiddenClass),i.removeClass(t.modifierClass+t.type),e.pagination.bullets&&e.pagination.bullets.removeClass(t.bulletActiveClass),t.clickable&&i.off("click","."+t.bulletClass)}}},H={setTranslate:function(){var e=this;if(e.params.scrollbar.el&&e.scrollbar.el){var t=e.scrollbar,i=e.rtlTranslate,n=e.progress,a=t.dragSize,r=t.trackSize,s=t.$dragEl,o=t.$el,l=e.params.scrollbar,d=a,u=(r-a)*n;i?0<(u=-u)?(d=a-u,u=0):r<-u+a&&(d=r+u):u<0?(d=a+u,u=0):r<u+a&&(d=r-u),e.isHorizontal()?(te.transforms3d?s.transform("translate3d("+u+"px, 0, 0)"):s.transform("translateX("+u+"px)"),s[0].style.width=d+"px"):(te.transforms3d?s.transform("translate3d(0px, "+u+"px, 0)"):s.transform("translateY("+u+"px)"),s[0].style.height=d+"px"),l.hide&&(clearTimeout(e.scrollbar.timeout),o[0].style.opacity=1,e.scrollbar.timeout=setTimeout(function(){o[0].style.opacity=0,o.transition(400)},1e3))}},setTransition:function(e){this.params.scrollbar.el&&this.scrollbar.el&&this.scrollbar.$dragEl.transition(e)},updateSize:function(){var e=this;if(e.params.scrollbar.el&&e.scrollbar.el){var t=e.scrollbar,i=t.$dragEl,n=t.$el;i[0].style.width="",i[0].style.height="";var a,r=e.isHorizontal()?n[0].offsetWidth:n[0].offsetHeight,s=e.size/e.virtualSize,o=s*(r/e.size);a="auto"===e.params.scrollbar.dragSize?r*s:parseInt(e.params.scrollbar.dragSize,10),e.isHorizontal()?i[0].style.width=a+"px":i[0].style.height=a+"px",n[0].style.display=1<=s?"none":"",e.params.scrollbar.hide&&(n[0].style.opacity=0),ee.extend(t,{trackSize:r,divider:s,moveDivider:o,dragSize:a}),t.$el[e.params.watchOverflow&&e.isLocked?"addClass":"removeClass"](e.params.scrollbar.lockClass)}},setDragPosition:function(e){var t,i=this,n=i.scrollbar,a=i.rtlTranslate,r=n.$el,s=n.dragSize,o=n.trackSize;t=((i.isHorizontal()?"touchstart"===e.type||"touchmove"===e.type?e.targetTouches[0].pageX:e.pageX||e.clientX:"touchstart"===e.type||"touchmove"===e.type?e.targetTouches[0].pageY:e.pageY||e.clientY)-r.offset()[i.isHorizontal()?"left":"top"]-s/2)/(o-s),t=Math.max(Math.min(t,1),0),a&&(t=1-t);var l=i.minTranslate()+(i.maxTranslate()-i.minTranslate())*t;i.updateProgress(l),i.setTranslate(l),i.updateActiveIndex(),i.updateSlidesClasses()},onDragStart:function(e){var t=this,i=t.params.scrollbar,n=t.scrollbar,a=t.$wrapperEl,r=n.$el,s=n.$dragEl;t.scrollbar.isTouched=!0,e.preventDefault(),e.stopPropagation(),a.transition(100),s.transition(100),n.setDragPosition(e),clearTimeout(t.scrollbar.dragTimeout),r.transition(0),i.hide&&r.css("opacity",1),t.emit("scrollbarDragStart",e)},onDragMove:function(e){var t=this.scrollbar,i=this.$wrapperEl,n=t.$el,a=t.$dragEl;this.scrollbar.isTouched&&(e.preventDefault?e.preventDefault():e.returnValue=!1,t.setDragPosition(e),i.transition(0),n.transition(0),a.transition(0),this.emit("scrollbarDragMove",e))},onDragEnd:function(e){var t=this,i=t.params.scrollbar,n=t.scrollbar.$el;t.scrollbar.isTouched&&(t.scrollbar.isTouched=!1,i.hide&&(clearTimeout(t.scrollbar.dragTimeout),t.scrollbar.dragTimeout=ee.nextTick(function(){n.css("opacity",0),n.transition(400)},1e3)),t.emit("scrollbarDragEnd",e),i.snapOnRelease&&t.slideToClosest())},enableDraggable:function(){var e=this;if(e.params.scrollbar.el){var t=e.scrollbar,i=e.touchEventsTouch,n=e.touchEventsDesktop,a=e.params,r=t.$el[0],s=!(!te.passiveListener||!a.passiveListeners)&&{passive:!1,capture:!1},o=!(!te.passiveListener||!a.passiveListeners)&&{passive:!0,capture:!1};te.touch?(r.addEventListener(i.start,e.scrollbar.onDragStart,s),r.addEventListener(i.move,e.scrollbar.onDragMove,s),r.addEventListener(i.end,e.scrollbar.onDragEnd,o)):(r.addEventListener(n.start,e.scrollbar.onDragStart,s),v.addEventListener(n.move,e.scrollbar.onDragMove,s),v.addEventListener(n.end,e.scrollbar.onDragEnd,o))}},disableDraggable:function(){var e=this;if(e.params.scrollbar.el){var t=e.scrollbar,i=e.touchEventsTouch,n=e.touchEventsDesktop,a=e.params,r=t.$el[0],s=!(!te.passiveListener||!a.passiveListeners)&&{passive:!1,capture:!1},o=!(!te.passiveListener||!a.passiveListeners)&&{passive:!0,capture:!1};te.touch?(r.removeEventListener(i.start,e.scrollbar.onDragStart,s),r.removeEventListener(i.move,e.scrollbar.onDragMove,s),r.removeEventListener(i.end,e.scrollbar.onDragEnd,o)):(r.removeEventListener(n.start,e.scrollbar.onDragStart,s),v.removeEventListener(n.move,e.scrollbar.onDragMove,s),v.removeEventListener(n.end,e.scrollbar.onDragEnd,o))}},init:function(){var e=this;if(e.params.scrollbar.el){var t=e.scrollbar,i=e.$el,n=e.params.scrollbar,a=D(n.el);e.params.uniqueNavElements&&"string"==typeof n.el&&1<a.length&&1===i.find(n.el).length&&(a=i.find(n.el));var r=a.find("."+e.params.scrollbar.dragClass);0===r.length&&(r=D('<div class="'+e.params.scrollbar.dragClass+'"></div>'),a.append(r)),ee.extend(t,{$el:a,el:a[0],$dragEl:r,dragEl:r[0]}),n.draggable&&t.enableDraggable()}},destroy:function(){this.scrollbar.disableDraggable()}},j={setTransform:function(e,t){var i=this.rtl,n=D(e),a=i?-1:1,r=n.attr("data-swiper-parallax")||"0",s=n.attr("data-swiper-parallax-x"),o=n.attr("data-swiper-parallax-y"),l=n.attr("data-swiper-parallax-scale"),d=n.attr("data-swiper-parallax-opacity");if(s||o?(s=s||"0",o=o||"0"):this.isHorizontal()?(s=r,o="0"):(o=r,s="0"),s=0<=s.indexOf("%")?parseInt(s,10)*t*a+"%":s*t*a+"px",o=0<=o.indexOf("%")?parseInt(o,10)*t+"%":o*t+"px",null!=d){var u=d-(d-1)*(1-Math.abs(t));n[0].style.opacity=u}if(null==l)n.transform("translate3d("+s+", "+o+", 0px)");else{var c=l-(l-1)*(1-Math.abs(t));n.transform("translate3d("+s+", "+o+", 0px) scale("+c+")")}},setTranslate:function(){var n=this,e=n.$el,t=n.slides,a=n.progress,r=n.snapGrid;e.children("[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y]").each(function(e,t){n.parallax.setTransform(t,a)}),t.each(function(e,t){var i=t.progress;1<n.params.slidesPerGroup&&"auto"!==n.params.slidesPerView&&(i+=Math.ceil(e/2)-a*(r.length-1)),i=Math.min(Math.max(i,-1),1),D(t).find("[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y]").each(function(e,t){n.parallax.setTransform(t,i)})})},setTransition:function(a){void 0===a&&(a=this.params.speed),this.$el.find("[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y]").each(function(e,t){var i=D(t),n=parseInt(i.attr("data-swiper-parallax-duration"),10)||a;0===a&&(n=0),i.transition(n)})}},q={getDistanceBetweenTouches:function(e){if(e.targetTouches.length<2)return 1;var t=e.targetTouches[0].pageX,i=e.targetTouches[0].pageY,n=e.targetTouches[1].pageX,a=e.targetTouches[1].pageY;return Math.sqrt(Math.pow(n-t,2)+Math.pow(a-i,2))},onGestureStart:function(e){var t=this,i=t.params.zoom,n=t.zoom,a=n.gesture;if(n.fakeGestureTouched=!1,n.fakeGestureMoved=!1,!te.gestures){if("touchstart"!==e.type||"touchstart"===e.type&&e.targetTouches.length<2)return;n.fakeGestureTouched=!0,a.scaleStart=q.getDistanceBetweenTouches(e)}a.$slideEl&&a.$slideEl.length||(a.$slideEl=D(e.target).closest(".swiper-slide"),0===a.$slideEl.length&&(a.$slideEl=t.slides.eq(t.activeIndex)),a.$imageEl=a.$slideEl.find("img, svg, canvas"),a.$imageWrapEl=a.$imageEl.parent("."+i.containerClass),a.maxRatio=a.$imageWrapEl.attr("data-swiper-zoom")||i.maxRatio,0!==a.$imageWrapEl.length)?(a.$imageEl.transition(0),t.zoom.isScaling=!0):a.$imageEl=void 0},onGestureChange:function(e){var t=this.params.zoom,i=this.zoom,n=i.gesture;if(!te.gestures){if("touchmove"!==e.type||"touchmove"===e.type&&e.targetTouches.length<2)return;i.fakeGestureMoved=!0,n.scaleMove=q.getDistanceBetweenTouches(e)}n.$imageEl&&0!==n.$imageEl.length&&(i.scale=te.gestures?e.scale*i.currentScale:n.scaleMove/n.scaleStart*i.currentScale,i.scale>n.maxRatio&&(i.scale=n.maxRatio-1+Math.pow(i.scale-n.maxRatio+1,.5)),i.scale<t.minRatio&&(i.scale=t.minRatio+1-Math.pow(t.minRatio-i.scale+1,.5)),n.$imageEl.transform("translate3d(0,0,0) scale("+i.scale+")"))},onGestureEnd:function(e){var t=this.params.zoom,i=this.zoom,n=i.gesture;if(!te.gestures){if(!i.fakeGestureTouched||!i.fakeGestureMoved)return;if("touchend"!==e.type||"touchend"===e.type&&e.changedTouches.length<2&&!m.android)return;i.fakeGestureTouched=!1,i.fakeGestureMoved=!1}n.$imageEl&&0!==n.$imageEl.length&&(i.scale=Math.max(Math.min(i.scale,n.maxRatio),t.minRatio),n.$imageEl.transition(this.params.speed).transform("translate3d(0,0,0) scale("+i.scale+")"),i.currentScale=i.scale,i.isScaling=!1,1===i.scale&&(n.$slideEl=void 0))},onTouchStart:function(e){var t=this.zoom,i=t.gesture,n=t.image;i.$imageEl&&0!==i.$imageEl.length&&(n.isTouched||(m.android&&e.preventDefault(),n.isTouched=!0,n.touchesStart.x="touchstart"===e.type?e.targetTouches[0].pageX:e.pageX,n.touchesStart.y="touchstart"===e.type?e.targetTouches[0].pageY:e.pageY))},onTouchMove:function(e){var t=this,i=t.zoom,n=i.gesture,a=i.image,r=i.velocity;if(n.$imageEl&&0!==n.$imageEl.length&&(t.allowClick=!1,a.isTouched&&n.$slideEl)){a.isMoved||(a.width=n.$imageEl[0].offsetWidth,a.height=n.$imageEl[0].offsetHeight,a.startX=ee.getTranslate(n.$imageWrapEl[0],"x")||0,a.startY=ee.getTranslate(n.$imageWrapEl[0],"y")||0,n.slideWidth=n.$slideEl[0].offsetWidth,n.slideHeight=n.$slideEl[0].offsetHeight,n.$imageWrapEl.transition(0),t.rtl&&(a.startX=-a.startX,a.startY=-a.startY));var s=a.width*i.scale,o=a.height*i.scale;if(!(s<n.slideWidth&&o<n.slideHeight)){if(a.minX=Math.min(n.slideWidth/2-s/2,0),a.maxX=-a.minX,a.minY=Math.min(n.slideHeight/2-o/2,0),a.maxY=-a.minY,a.touchesCurrent.x="touchmove"===e.type?e.targetTouches[0].pageX:e.pageX,a.touchesCurrent.y="touchmove"===e.type?e.targetTouches[0].pageY:e.pageY,!a.isMoved&&!i.isScaling){if(t.isHorizontal()&&(Math.floor(a.minX)===Math.floor(a.startX)&&a.touchesCurrent.x<a.touchesStart.x||Math.floor(a.maxX)===Math.floor(a.startX)&&a.touchesCurrent.x>a.touchesStart.x))return void(a.isTouched=!1);if(!t.isHorizontal()&&(Math.floor(a.minY)===Math.floor(a.startY)&&a.touchesCurrent.y<a.touchesStart.y||Math.floor(a.maxY)===Math.floor(a.startY)&&a.touchesCurrent.y>a.touchesStart.y))return void(a.isTouched=!1)}e.preventDefault(),e.stopPropagation(),a.isMoved=!0,a.currentX=a.touchesCurrent.x-a.touchesStart.x+a.startX,a.currentY=a.touchesCurrent.y-a.touchesStart.y+a.startY,a.currentX<a.minX&&(a.currentX=a.minX+1-Math.pow(a.minX-a.currentX+1,.8)),a.currentX>a.maxX&&(a.currentX=a.maxX-1+Math.pow(a.currentX-a.maxX+1,.8)),a.currentY<a.minY&&(a.currentY=a.minY+1-Math.pow(a.minY-a.currentY+1,.8)),a.currentY>a.maxY&&(a.currentY=a.maxY-1+Math.pow(a.currentY-a.maxY+1,.8)),r.prevPositionX||(r.prevPositionX=a.touchesCurrent.x),r.prevPositionY||(r.prevPositionY=a.touchesCurrent.y),r.prevTime||(r.prevTime=Date.now()),r.x=(a.touchesCurrent.x-r.prevPositionX)/(Date.now()-r.prevTime)/2,r.y=(a.touchesCurrent.y-r.prevPositionY)/(Date.now()-r.prevTime)/2,Math.abs(a.touchesCurrent.x-r.prevPositionX)<2&&(r.x=0),Math.abs(a.touchesCurrent.y-r.prevPositionY)<2&&(r.y=0),r.prevPositionX=a.touchesCurrent.x,r.prevPositionY=a.touchesCurrent.y,r.prevTime=Date.now(),n.$imageWrapEl.transform("translate3d("+a.currentX+"px, "+a.currentY+"px,0)")}}},onTouchEnd:function(){var e=this.zoom,t=e.gesture,i=e.image,n=e.velocity;if(t.$imageEl&&0!==t.$imageEl.length){if(!i.isTouched||!i.isMoved)return i.isTouched=!1,void(i.isMoved=!1);i.isTouched=!1,i.isMoved=!1;var a=300,r=300,s=n.x*a,o=i.currentX+s,l=n.y*r,d=i.currentY+l;0!==n.x&&(a=Math.abs((o-i.currentX)/n.x)),0!==n.y&&(r=Math.abs((d-i.currentY)/n.y));var u=Math.max(a,r);i.currentX=o,i.currentY=d;var c=i.width*e.scale,p=i.height*e.scale;i.minX=Math.min(t.slideWidth/2-c/2,0),i.maxX=-i.minX,i.minY=Math.min(t.slideHeight/2-p/2,0),i.maxY=-i.minY,i.currentX=Math.max(Math.min(i.currentX,i.maxX),i.minX),i.currentY=Math.max(Math.min(i.currentY,i.maxY),i.minY),t.$imageWrapEl.transition(u).transform("translate3d("+i.currentX+"px, "+i.currentY+"px,0)")}},onTransitionEnd:function(){var e=this.zoom,t=e.gesture;t.$slideEl&&this.previousIndex!==this.activeIndex&&(t.$imageEl.transform("translate3d(0,0,0) scale(1)"),t.$imageWrapEl.transform("translate3d(0,0,0)"),e.scale=1,e.currentScale=1,t.$slideEl=void 0,t.$imageEl=void 0,t.$imageWrapEl=void 0)},toggle:function(e){var t=this.zoom;t.scale&&1!==t.scale?t.out():t.in(e)},in:function(e){var t,i,n,a,r,s,o,l,d,u,c,p,h,f,v,m,g=this,y=g.zoom,b=g.params.zoom,x=y.gesture,w=y.image;x.$slideEl||(x.$slideEl=g.clickedSlide?D(g.clickedSlide):g.slides.eq(g.activeIndex),x.$imageEl=x.$slideEl.find("img, svg, canvas"),x.$imageWrapEl=x.$imageEl.parent("."+b.containerClass)),x.$imageEl&&0!==x.$imageEl.length&&(x.$slideEl.addClass(""+b.zoomedSlideClass),i=void 0===w.touchesStart.x&&e?(t="touchend"===e.type?e.changedTouches[0].pageX:e.pageX,"touchend"===e.type?e.changedTouches[0].pageY:e.pageY):(t=w.touchesStart.x,w.touchesStart.y),y.scale=x.$imageWrapEl.attr("data-swiper-zoom")||b.maxRatio,y.currentScale=x.$imageWrapEl.attr("data-swiper-zoom")||b.maxRatio,e?(v=x.$slideEl[0].offsetWidth,m=x.$slideEl[0].offsetHeight,n=x.$slideEl.offset().left+v/2-t,a=x.$slideEl.offset().top+m/2-i,o=x.$imageEl[0].offsetWidth,l=x.$imageEl[0].offsetHeight,d=o*y.scale,u=l*y.scale,h=-(c=Math.min(v/2-d/2,0)),f=-(p=Math.min(m/2-u/2,0)),(r=n*y.scale)<c&&(r=c),h<r&&(r=h),(s=a*y.scale)<p&&(s=p),f<s&&(s=f)):s=r=0,x.$imageWrapEl.transition(300).transform("translate3d("+r+"px, "+s+"px,0)"),x.$imageEl.transition(300).transform("translate3d(0,0,0) scale("+y.scale+")"))},out:function(){var e=this,t=e.zoom,i=e.params.zoom,n=t.gesture;n.$slideEl||(n.$slideEl=e.clickedSlide?D(e.clickedSlide):e.slides.eq(e.activeIndex),n.$imageEl=n.$slideEl.find("img, svg, canvas"),n.$imageWrapEl=n.$imageEl.parent("."+i.containerClass)),n.$imageEl&&0!==n.$imageEl.length&&(t.scale=1,t.currentScale=1,n.$imageWrapEl.transition(300).transform("translate3d(0,0,0)"),n.$imageEl.transition(300).transform("translate3d(0,0,0) scale(1)"),n.$slideEl.removeClass(""+i.zoomedSlideClass),n.$slideEl=void 0)},enable:function(){var e=this,t=e.zoom;if(!t.enabled){t.enabled=!0;var i=!("touchstart"!==e.touchEvents.start||!te.passiveListener||!e.params.passiveListeners)&&{passive:!0,capture:!1};te.gestures?(e.$wrapperEl.on("gesturestart",".swiper-slide",t.onGestureStart,i),e.$wrapperEl.on("gesturechange",".swiper-slide",t.onGestureChange,i),e.$wrapperEl.on("gestureend",".swiper-slide",t.onGestureEnd,i)):"touchstart"===e.touchEvents.start&&(e.$wrapperEl.on(e.touchEvents.start,".swiper-slide",t.onGestureStart,i),e.$wrapperEl.on(e.touchEvents.move,".swiper-slide",t.onGestureChange,i),e.$wrapperEl.on(e.touchEvents.end,".swiper-slide",t.onGestureEnd,i)),e.$wrapperEl.on(e.touchEvents.move,"."+e.params.zoom.containerClass,t.onTouchMove)}},disable:function(){var e=this,t=e.zoom;if(t.enabled){e.zoom.enabled=!1;var i=!("touchstart"!==e.touchEvents.start||!te.passiveListener||!e.params.passiveListeners)&&{passive:!0,capture:!1};te.gestures?(e.$wrapperEl.off("gesturestart",".swiper-slide",t.onGestureStart,i),e.$wrapperEl.off("gesturechange",".swiper-slide",t.onGestureChange,i),e.$wrapperEl.off("gestureend",".swiper-slide",t.onGestureEnd,i)):"touchstart"===e.touchEvents.start&&(e.$wrapperEl.off(e.touchEvents.start,".swiper-slide",t.onGestureStart,i),e.$wrapperEl.off(e.touchEvents.move,".swiper-slide",t.onGestureChange,i),e.$wrapperEl.off(e.touchEvents.end,".swiper-slide",t.onGestureEnd,i)),e.$wrapperEl.off(e.touchEvents.move,"."+e.params.zoom.containerClass,t.onTouchMove)}}},B={loadInSlide:function(e,l){void 0===l&&(l=!0);var d=this,u=d.params.lazy;if(void 0!==e&&0!==d.slides.length){var c=d.virtual&&d.params.virtual.enabled?d.$wrapperEl.children("."+d.params.slideClass+'[data-swiper-slide-index="'+e+'"]'):d.slides.eq(e),t=c.find("."+u.elementClass+":not(."+u.loadedClass+"):not(."+u.loadingClass+")");!c.hasClass(u.elementClass)||c.hasClass(u.loadedClass)||c.hasClass(u.loadingClass)||(t=t.add(c[0])),0!==t.length&&t.each(function(e,t){var n=D(t);n.addClass(u.loadingClass);var a=n.attr("data-background"),r=n.attr("data-src"),s=n.attr("data-srcset"),o=n.attr("data-sizes");d.loadImage(n[0],r||a,s,o,!1,function(){if(null!=d&&d&&(!d||d.params)&&!d.destroyed){if(a?(n.css("background-image",'url("'+a+'")'),n.removeAttr("data-background")):(s&&(n.attr("srcset",s),n.removeAttr("data-srcset")),o&&(n.attr("sizes",o),n.removeAttr("data-sizes")),r&&(n.attr("src",r),n.removeAttr("data-src"))),n.addClass(u.loadedClass).removeClass(u.loadingClass),c.find("."+u.preloaderClass).remove(),d.params.loop&&l){var e=c.attr("data-swiper-slide-index");if(c.hasClass(d.params.slideDuplicateClass)){var t=d.$wrapperEl.children('[data-swiper-slide-index="'+e+'"]:not(.'+d.params.slideDuplicateClass+")");d.lazy.loadInSlide(t.index(),!1)}else{var i=d.$wrapperEl.children("."+d.params.slideDuplicateClass+'[data-swiper-slide-index="'+e+'"]');d.lazy.loadInSlide(i.index(),!1)}}d.emit("lazyImageReady",c[0],n[0])}}),d.emit("lazyImageLoad",c[0],n[0])})}},load:function(){var n=this,t=n.$wrapperEl,i=n.params,a=n.slides,e=n.activeIndex,r=n.virtual&&i.virtual.enabled,s=i.lazy,o=i.slidesPerView;function l(e){if(r){if(t.children("."+i.slideClass+'[data-swiper-slide-index="'+e+'"]').length)return!0}else if(a[e])return!0;return!1}function d(e){return r?D(e).attr("data-swiper-slide-index"):D(e).index()}if("auto"===o&&(o=0),n.lazy.initialImageLoaded||(n.lazy.initialImageLoaded=!0),n.params.watchSlidesVisibility)t.children("."+i.slideVisibleClass).each(function(e,t){var i=r?D(t).attr("data-swiper-slide-index"):D(t).index();n.lazy.loadInSlide(i)});else if(1<o)for(var u=e;u<e+o;u+=1)l(u)&&n.lazy.loadInSlide(u);else n.lazy.loadInSlide(e);if(s.loadPrevNext)if(1<o||s.loadPrevNextAmount&&1<s.loadPrevNextAmount){for(var c=s.loadPrevNextAmount,p=o,h=Math.min(e+p+Math.max(c,p),a.length),f=Math.max(e-Math.max(p,c),0),v=e+o;v<h;v+=1)l(v)&&n.lazy.loadInSlide(v);for(var m=f;m<e;m+=1)l(m)&&n.lazy.loadInSlide(m)}else{var g=t.children("."+i.slideNextClass);0<g.length&&n.lazy.loadInSlide(d(g));var y=t.children("."+i.slidePrevClass);0<y.length&&n.lazy.loadInSlide(d(y))}}},F={LinearSpline:function(e,t){var i,n,a,r,s;return this.x=e,this.y=t,this.lastIndex=e.length-1,this.interpolate=function(e){return e?(s=function(e,t){for(n=-1,i=e.length;1<i-n;)e[a=i+n>>1]<=t?n=a:i=a;return i}(this.x,e),r=s-1,(e-this.x[r])*(this.y[s]-this.y[r])/(this.x[s]-this.x[r])+this.y[r]):0},this},getInterpolateFunction:function(e){var t=this;t.controller.spline||(t.controller.spline=t.params.loop?new F.LinearSpline(t.slidesGrid,e.slidesGrid):new F.LinearSpline(t.snapGrid,e.snapGrid))},setTranslate:function(e,t){var i,n,a=this,r=a.controller.control;function s(e){var t=a.rtlTranslate?-a.translate:a.translate;"slide"===a.params.controller.by&&(a.controller.getInterpolateFunction(e),n=-a.controller.spline.interpolate(-t)),n&&"container"!==a.params.controller.by||(i=(e.maxTranslate()-e.minTranslate())/(a.maxTranslate()-a.minTranslate()),n=(t-a.minTranslate())*i+e.minTranslate()),a.params.controller.inverse&&(n=e.maxTranslate()-n),e.updateProgress(n),e.setTranslate(n,a),e.updateActiveIndex(),e.updateSlidesClasses()}if(Array.isArray(r))for(var o=0;o<r.length;o+=1)r[o]!==t&&r[o]instanceof w&&s(r[o]);else r instanceof w&&t!==r&&s(r)},setTransition:function(t,e){var i,n=this,a=n.controller.control;function r(e){e.setTransition(t,n),0!==t&&(e.transitionStart(),e.params.autoHeight&&ee.nextTick(function(){e.updateAutoHeight()}),e.$wrapperEl.transitionEnd(function(){a&&(e.params.loop&&"slide"===n.params.controller.by&&e.loopFix(),e.transitionEnd())}))}if(Array.isArray(a))for(i=0;i<a.length;i+=1)a[i]!==e&&a[i]instanceof w&&r(a[i]);else a instanceof w&&e!==a&&r(a)}},R={makeElFocusable:function(e){return e.attr("tabIndex","0"),e},addElRole:function(e,t){return e.attr("role",t),e},addElLabel:function(e,t){return e.attr("aria-label",t),e},disableEl:function(e){return e.attr("aria-disabled",!0),e},enableEl:function(e){return e.attr("aria-disabled",!1),e},onEnterKey:function(e){var t=this,i=t.params.a11y;if(13===e.keyCode){var n=D(e.target);t.navigation&&t.navigation.$nextEl&&n.is(t.navigation.$nextEl)&&(t.isEnd&&!t.params.loop||t.slideNext(),t.isEnd?t.a11y.notify(i.lastSlideMessage):t.a11y.notify(i.nextSlideMessage)),t.navigation&&t.navigation.$prevEl&&n.is(t.navigation.$prevEl)&&(t.isBeginning&&!t.params.loop||t.slidePrev(),t.isBeginning?t.a11y.notify(i.firstSlideMessage):t.a11y.notify(i.prevSlideMessage)),t.pagination&&n.is("."+t.params.pagination.bulletClass)&&n[0].click()}},notify:function(e){var t=this.a11y.liveRegion;0!==t.length&&(t.html(""),t.html(e))},updateNavigation:function(){var e=this;if(!e.params.loop){var t=e.navigation,i=t.$nextEl,n=t.$prevEl;n&&0<n.length&&(e.isBeginning?e.a11y.disableEl(n):e.a11y.enableEl(n)),i&&0<i.length&&(e.isEnd?e.a11y.disableEl(i):e.a11y.enableEl(i))}},updatePagination:function(){var n=this,a=n.params.a11y;n.pagination&&n.params.pagination.clickable&&n.pagination.bullets&&n.pagination.bullets.length&&n.pagination.bullets.each(function(e,t){var i=D(t);n.a11y.makeElFocusable(i),n.a11y.addElRole(i,"button"),n.a11y.addElLabel(i,a.paginationBulletMessage.replace(/{{index}}/,i.index()+1))})},init:function(){var e=this;e.$el.append(e.a11y.liveRegion);var t,i,n=e.params.a11y;e.navigation&&e.navigation.$nextEl&&(t=e.navigation.$nextEl),e.navigation&&e.navigation.$prevEl&&(i=e.navigation.$prevEl),t&&(e.a11y.makeElFocusable(t),e.a11y.addElRole(t,"button"),e.a11y.addElLabel(t,n.nextSlideMessage),t.on("keydown",e.a11y.onEnterKey)),i&&(e.a11y.makeElFocusable(i),e.a11y.addElRole(i,"button"),e.a11y.addElLabel(i,n.prevSlideMessage),i.on("keydown",e.a11y.onEnterKey)),e.pagination&&e.params.pagination.clickable&&e.pagination.bullets&&e.pagination.bullets.length&&e.pagination.$el.on("keydown","."+e.params.pagination.bulletClass,e.a11y.onEnterKey)},destroy:function(){var e,t,i=this;i.a11y.liveRegion&&0<i.a11y.liveRegion.length&&i.a11y.liveRegion.remove(),i.navigation&&i.navigation.$nextEl&&(e=i.navigation.$nextEl),i.navigation&&i.navigation.$prevEl&&(t=i.navigation.$prevEl),e&&e.off("keydown",i.a11y.onEnterKey),t&&t.off("keydown",i.a11y.onEnterKey),i.pagination&&i.params.pagination.clickable&&i.pagination.bullets&&i.pagination.bullets.length&&i.pagination.$el.off("keydown","."+i.params.pagination.bulletClass,i.a11y.onEnterKey)}},X={init:function(){var e=this;if(e.params.history){if(!Z.history||!Z.history.pushState)return e.params.history.enabled=!1,void(e.params.hashNavigation.enabled=!0);var t=e.history;t.initialized=!0,t.paths=X.getPathValues(),(t.paths.key||t.paths.value)&&(t.scrollToSlide(0,t.paths.value,e.params.runCallbacksOnInit),e.params.history.replaceState||Z.addEventListener("popstate",e.history.setHistoryPopState))}},destroy:function(){this.params.history.replaceState||Z.removeEventListener("popstate",this.history.setHistoryPopState)},setHistoryPopState:function(){this.history.paths=X.getPathValues(),this.history.scrollToSlide(this.params.speed,this.history.paths.value,!1)},getPathValues:function(){var e=Z.location.pathname.slice(1).split("/").filter(function(e){return""!==e}),t=e.length;return{key:e[t-2],value:e[t-1]}},setHistory:function(e,t){if(this.history.initialized&&this.params.history.enabled){var i=this.slides.eq(t),n=X.slugify(i.attr("data-history"));Z.location.pathname.includes(e)||(n=e+"/"+n);var a=Z.history.state;a&&a.value===n||(this.params.history.replaceState?Z.history.replaceState({value:n},null,n):Z.history.pushState({value:n},null,n))}},slugify:function(e){return e.toString().replace(/\s+/g,"-").replace(/[^\w-]+/g,"").replace(/--+/g,"-").replace(/^-+/,"").replace(/-+$/,"")},scrollToSlide:function(e,t,i){var n=this;if(t)for(var a=0,r=n.slides.length;a<r;a+=1){var s=n.slides.eq(a);if(X.slugify(s.attr("data-history"))===t&&!s.hasClass(n.params.slideDuplicateClass)){var o=s.index();n.slideTo(o,e,i)}}else n.slideTo(0,e,i)}},G={onHashCange:function(){var e=this,t=v.location.hash.replace("#","");if(t!==e.slides.eq(e.activeIndex).attr("data-hash")){var i=e.$wrapperEl.children("."+e.params.slideClass+'[data-hash="'+t+'"]').index();if(void 0===i)return;e.slideTo(i)}},setHash:function(){var e=this;if(e.hashNavigation.initialized&&e.params.hashNavigation.enabled)if(e.params.hashNavigation.replaceState&&Z.history&&Z.history.replaceState)Z.history.replaceState(null,null,"#"+e.slides.eq(e.activeIndex).attr("data-hash")||"");else{var t=e.slides.eq(e.activeIndex),i=t.attr("data-hash")||t.attr("data-history");v.location.hash=i||""}},init:function(){var e=this;if(!(!e.params.hashNavigation.enabled||e.params.history&&e.params.history.enabled)){e.hashNavigation.initialized=!0;var t=v.location.hash.replace("#","");if(t)for(var i=0,n=e.slides.length;i<n;i+=1){var a=e.slides.eq(i);if((a.attr("data-hash")||a.attr("data-history"))===t&&!a.hasClass(e.params.slideDuplicateClass)){var r=a.index();e.slideTo(r,0,e.params.runCallbacksOnInit,!0)}}e.params.hashNavigation.watchState&&D(Z).on("hashchange",e.hashNavigation.onHashCange)}},destroy:function(){this.params.hashNavigation.watchState&&D(Z).off("hashchange",this.hashNavigation.onHashCange)}},V={run:function(){var e=this,t=e.slides.eq(e.activeIndex),i=e.params.autoplay.delay;t.attr("data-swiper-autoplay")&&(i=t.attr("data-swiper-autoplay")||e.params.autoplay.delay),e.autoplay.timeout=ee.nextTick(function(){e.params.autoplay.reverseDirection?e.params.loop?(e.loopFix(),e.slidePrev(e.params.speed,!0,!0),e.emit("autoplay")):e.isBeginning?e.params.autoplay.stopOnLastSlide?e.autoplay.stop():(e.slideTo(e.slides.length-1,e.params.speed,!0,!0),e.emit("autoplay")):(e.slidePrev(e.params.speed,!0,!0),e.emit("autoplay")):e.params.loop?(e.loopFix(),e.slideNext(e.params.speed,!0,!0),e.emit("autoplay")):e.isEnd?e.params.autoplay.stopOnLastSlide?e.autoplay.stop():(e.slideTo(0,e.params.speed,!0,!0),e.emit("autoplay")):(e.slideNext(e.params.speed,!0,!0),e.emit("autoplay"))},i)},start:function(){var e=this;return void 0===e.autoplay.timeout&&!e.autoplay.running&&(e.autoplay.running=!0,e.emit("autoplayStart"),e.autoplay.run(),!0)},stop:function(){var e=this;return!!e.autoplay.running&&void 0!==e.autoplay.timeout&&(e.autoplay.timeout&&(clearTimeout(e.autoplay.timeout),e.autoplay.timeout=void 0),e.autoplay.running=!1,e.emit("autoplayStop"),!0)},pause:function(e){var t=this;t.autoplay.running&&(t.autoplay.paused||(t.autoplay.timeout&&clearTimeout(t.autoplay.timeout),t.autoplay.paused=!0,0!==e&&t.params.autoplay.waitForTransition?(t.$wrapperEl[0].addEventListener("transitionend",t.autoplay.onTransitionEnd),t.$wrapperEl[0].addEventListener("webkitTransitionEnd",t.autoplay.onTransitionEnd)):(t.autoplay.paused=!1,t.autoplay.run())))}},W={setTranslate:function(){for(var e=this,t=e.slides,i=0;i<t.length;i+=1){var n=e.slides.eq(i),a=-n[0].swiperSlideOffset;e.params.virtualTranslate||(a-=e.translate);var r=0;e.isHorizontal()||(r=a,a=0);var s=e.params.fadeEffect.crossFade?Math.max(1-Math.abs(n[0].progress),0):1+Math.min(Math.max(n[0].progress,-1),0);n.css({opacity:s}).transform("translate3d("+a+"px, "+r+"px, 0px)")}},setTransition:function(e){var i=this,t=i.slides,n=i.$wrapperEl;if(t.transition(e),i.params.virtualTranslate&&0!==e){var a=!1;t.transitionEnd(function(){if(!a&&i&&!i.destroyed){a=!0,i.animating=!1;for(var e=["webkitTransitionEnd","transitionend"],t=0;t<e.length;t+=1)n.trigger(e[t])}})}}},Y={setTranslate:function(){var e,t=this,i=t.$el,n=t.$wrapperEl,a=t.slides,r=t.width,s=t.height,o=t.rtlTranslate,l=t.size,d=t.params.cubeEffect,u=t.isHorizontal(),c=t.virtual&&t.params.virtual.enabled,p=0;d.shadow&&(u?(0===(e=n.find(".swiper-cube-shadow")).length&&(e=D('<div class="swiper-cube-shadow"></div>'),n.append(e)),e.css({height:r+"px"})):0===(e=i.find(".swiper-cube-shadow")).length&&(e=D('<div class="swiper-cube-shadow"></div>'),i.append(e)));for(var h=0;h<a.length;h+=1){var f=a.eq(h),v=h;c&&(v=parseInt(f.attr("data-swiper-slide-index"),10));var m=90*v,g=Math.floor(m/360);o&&(m=-m,g=Math.floor(-m/360));var y=Math.max(Math.min(f[0].progress,1),-1),b=0,x=0,w=0;v%4==0?(b=4*-g*l,w=0):(v-1)%4==0?(b=0,w=4*-g*l):(v-2)%4==0?(b=l+4*g*l,w=l):(v-3)%4==0&&(b=-l,w=3*l+4*l*g),o&&(b=-b),u||(x=b,b=0);var T="rotateX("+(u?0:-m)+"deg) rotateY("+(u?m:0)+"deg) translate3d("+b+"px, "+x+"px, "+w+"px)";if(y<=1&&-1<y&&(p=90*v+90*y,o&&(p=90*-v-90*y)),f.transform(T),d.slideShadows){var C=u?f.find(".swiper-slide-shadow-left"):f.find(".swiper-slide-shadow-top"),E=u?f.find(".swiper-slide-shadow-right"):f.find(".swiper-slide-shadow-bottom");0===C.length&&(C=D('<div class="swiper-slide-shadow-'+(u?"left":"top")+'"></div>'),f.append(C)),0===E.length&&(E=D('<div class="swiper-slide-shadow-'+(u?"right":"bottom")+'"></div>'),f.append(E)),C.length&&(C[0].style.opacity=Math.max(-y,0)),E.length&&(E[0].style.opacity=Math.max(y,0))}}if(n.css({"-webkit-transform-origin":"50% 50% -"+l/2+"px","-moz-transform-origin":"50% 50% -"+l/2+"px","-ms-transform-origin":"50% 50% -"+l/2+"px","transform-origin":"50% 50% -"+l/2+"px"}),d.shadow)if(u)e.transform("translate3d(0px, "+(r/2+d.shadowOffset)+"px, "+-r/2+"px) rotateX(90deg) rotateZ(0deg) scale("+d.shadowScale+")");else{var S=Math.abs(p)-90*Math.floor(Math.abs(p)/90),k=1.5-(Math.sin(2*S*Math.PI/360)/2+Math.cos(2*S*Math.PI/360)/2),M=d.shadowScale,P=d.shadowScale/k,$=d.shadowOffset;e.transform("scale3d("+M+", 1, "+P+") translate3d(0px, "+(s/2+$)+"px, "+-s/2/P+"px) rotateX(-90deg)")}var L=z.isSafari||z.isUiWebView?-l/2:0;n.transform("translate3d(0px,0,"+L+"px) rotateX("+(t.isHorizontal()?0:p)+"deg) rotateY("+(t.isHorizontal()?-p:0)+"deg)")},setTransition:function(e){var t=this.$el;this.slides.transition(e).find(".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left").transition(e),this.params.cubeEffect.shadow&&!this.isHorizontal()&&t.find(".swiper-cube-shadow").transition(e)}},_={setTranslate:function(){for(var e=this,t=e.slides,i=e.rtlTranslate,n=0;n<t.length;n+=1){var a=t.eq(n),r=a[0].progress;e.params.flipEffect.limitRotation&&(r=Math.max(Math.min(a[0].progress,1),-1));var s=-180*r,o=0,l=-a[0].swiperSlideOffset,d=0;if(e.isHorizontal()?i&&(s=-s):(d=l,o=-s,s=l=0),a[0].style.zIndex=-Math.abs(Math.round(r))+t.length,e.params.flipEffect.slideShadows){var u=e.isHorizontal()?a.find(".swiper-slide-shadow-left"):a.find(".swiper-slide-shadow-top"),c=e.isHorizontal()?a.find(".swiper-slide-shadow-right"):a.find(".swiper-slide-shadow-bottom");0===u.length&&(u=D('<div class="swiper-slide-shadow-'+(e.isHorizontal()?"left":"top")+'"></div>'),a.append(u)),0===c.length&&(c=D('<div class="swiper-slide-shadow-'+(e.isHorizontal()?"right":"bottom")+'"></div>'),a.append(c)),u.length&&(u[0].style.opacity=Math.max(-r,0)),c.length&&(c[0].style.opacity=Math.max(r,0))}a.transform("translate3d("+l+"px, "+d+"px, 0px) rotateX("+o+"deg) rotateY("+s+"deg)")}},setTransition:function(e){var i=this,t=i.slides,n=i.activeIndex,a=i.$wrapperEl;if(t.transition(e).find(".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left").transition(e),i.params.virtualTranslate&&0!==e){var r=!1;t.eq(n).transitionEnd(function(){if(!r&&i&&!i.destroyed){r=!0,i.animating=!1;for(var e=["webkitTransitionEnd","transitionend"],t=0;t<e.length;t+=1)a.trigger(e[t])}})}}},U={setTranslate:function(){for(var e=this,t=e.width,i=e.height,n=e.slides,a=e.$wrapperEl,r=e.slidesSizesGrid,s=e.params.coverflowEffect,o=e.isHorizontal(),l=e.translate,d=o?t/2-l:i/2-l,u=o?s.rotate:-s.rotate,c=s.depth,p=0,h=n.length;p<h;p+=1){var f=n.eq(p),v=r[p],m=(d-f[0].swiperSlideOffset-v/2)/v*s.modifier,g=o?u*m:0,y=o?0:u*m,b=-c*Math.abs(m),x=o?0:s.stretch*m,w=o?s.stretch*m:0;Math.abs(w)<.001&&(w=0),Math.abs(x)<.001&&(x=0),Math.abs(b)<.001&&(b=0),Math.abs(g)<.001&&(g=0),Math.abs(y)<.001&&(y=0);var T="translate3d("+w+"px,"+x+"px,"+b+"px)  rotateX("+y+"deg) rotateY("+g+"deg)";if(f.transform(T),f[0].style.zIndex=1-Math.abs(Math.round(m)),s.slideShadows){var C=o?f.find(".swiper-slide-shadow-left"):f.find(".swiper-slide-shadow-top"),E=o?f.find(".swiper-slide-shadow-right"):f.find(".swiper-slide-shadow-bottom");0===C.length&&(C=D('<div class="swiper-slide-shadow-'+(o?"left":"top")+'"></div>'),f.append(C)),0===E.length&&(E=D('<div class="swiper-slide-shadow-'+(o?"right":"bottom")+'"></div>'),f.append(E)),C.length&&(C[0].style.opacity=0<m?m:0),E.length&&(E[0].style.opacity=0<-m?-m:0)}}(te.pointerEvents||te.prefixedPointerEvents)&&(a[0].style.perspectiveOrigin=d+"px 50%")},setTransition:function(e){this.slides.transition(e).find(".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left").transition(e)}},K={init:function(){var e=this,t=e.params.thumbs,i=e.constructor;t.swiper instanceof i?(e.thumbs.swiper=t.swiper,ee.extend(e.thumbs.swiper.originalParams,{watchSlidesProgress:!0,slideToClickedSlide:!1}),ee.extend(e.thumbs.swiper.params,{watchSlidesProgress:!0,slideToClickedSlide:!1})):ee.isObject(t.swiper)&&(e.thumbs.swiper=new i(ee.extend({},t.swiper,{watchSlidesVisibility:!0,watchSlidesProgress:!0,slideToClickedSlide:!1})),e.thumbs.swiperCreated=!0),e.thumbs.swiper.$el.addClass(e.params.thumbs.thumbsContainerClass),e.thumbs.swiper.on("tap",e.thumbs.onThumbClick)},onThumbClick:function(){var e=this,t=e.thumbs.swiper;if(t){var i=t.clickedIndex,n=t.clickedSlide;if(!(n&&D(n).hasClass(e.params.thumbs.slideThumbActiveClass)||null==i)){var a;if(a=t.params.loop?parseInt(D(t.clickedSlide).attr("data-swiper-slide-index"),10):i,e.params.loop){var r=e.activeIndex;e.slides.eq(r).hasClass(e.params.slideDuplicateClass)&&(e.loopFix(),e._clientLeft=e.$wrapperEl[0].clientLeft,r=e.activeIndex);var s=e.slides.eq(r).prevAll('[data-swiper-slide-index="'+a+'"]').eq(0).index(),o=e.slides.eq(r).nextAll('[data-swiper-slide-index="'+a+'"]').eq(0).index();a=void 0===s?o:void 0===o?s:o-r<r-s?o:s}e.slideTo(a)}}},update:function(e){var t=this,i=t.thumbs.swiper;if(i){var n="auto"===i.params.slidesPerView?i.slidesPerViewDynamic():i.params.slidesPerView;if(t.realIndex!==i.realIndex){var a,r=i.activeIndex;if(i.params.loop){i.slides.eq(r).hasClass(i.params.slideDuplicateClass)&&(i.loopFix(),i._clientLeft=i.$wrapperEl[0].clientLeft,r=i.activeIndex);var s=i.slides.eq(r).prevAll('[data-swiper-slide-index="'+t.realIndex+'"]').eq(0).index(),o=i.slides.eq(r).nextAll('[data-swiper-slide-index="'+t.realIndex+'"]').eq(0).index();a=void 0===s?o:void 0===o?s:o-r==r-s?r:o-r<r-s?o:s}else a=t.realIndex;i.visibleSlidesIndexes.indexOf(a)<0&&(i.params.centeredSlides?a=r<a?a-Math.floor(n/2)+1:a+Math.floor(n/2)-1:r<a&&(a=a-n+1),i.slideTo(a,e?0:void 0))}var l=1,d=t.params.thumbs.slideThumbActiveClass;if(1<t.params.slidesPerView&&!t.params.centeredSlides&&(l=t.params.slidesPerView),i.slides.removeClass(d),i.params.loop)for(var u=0;u<l;u+=1)i.$wrapperEl.children('[data-swiper-slide-index="'+(t.realIndex+u)+'"]').addClass(d);else for(var c=0;c<l;c+=1)i.slides.eq(t.realIndex+c).addClass(d)}}},Q=[T,C,E,S,M,$,I,{name:"mousewheel",params:{mousewheel:{enabled:!1,releaseOnEdges:!1,invert:!1,forceToAxis:!1,sensitivity:1,eventsTarged:"container"}},create:function(){var e=this;ee.extend(e,{mousewheel:{enabled:!1,enable:N.enable.bind(e),disable:N.disable.bind(e),handle:N.handle.bind(e),handleMouseEnter:N.handleMouseEnter.bind(e),handleMouseLeave:N.handleMouseLeave.bind(e),lastScrollTime:ee.now()}})},on:{init:function(){this.params.mousewheel.enabled&&this.mousewheel.enable()},destroy:function(){this.mousewheel.enabled&&this.mousewheel.disable()}}},{name:"navigation",params:{navigation:{nextEl:null,prevEl:null,hideOnClick:!1,disabledClass:"swiper-button-disabled",hiddenClass:"swiper-button-hidden",lockClass:"swiper-button-lock"}},create:function(){var e=this;ee.extend(e,{navigation:{init:A.init.bind(e),update:A.update.bind(e),destroy:A.destroy.bind(e),onNextClick:A.onNextClick.bind(e),onPrevClick:A.onPrevClick.bind(e)}})},on:{init:function(){this.navigation.init(),this.navigation.update()},toEdge:function(){this.navigation.update()},fromEdge:function(){this.navigation.update()},destroy:function(){this.navigation.destroy()},click:function(e){var t,i=this,n=i.navigation,a=n.$nextEl,r=n.$prevEl;!i.params.navigation.hideOnClick||D(e.target).is(r)||D(e.target).is(a)||(a?t=a.hasClass(i.params.navigation.hiddenClass):r&&(t=r.hasClass(i.params.navigation.hiddenClass)),!0===t?i.emit("navigationShow",i):i.emit("navigationHide",i),a&&a.toggleClass(i.params.navigation.hiddenClass),r&&r.toggleClass(i.params.navigation.hiddenClass))}}},{name:"pagination",params:{pagination:{el:null,bulletElement:"span",clickable:!1,hideOnClick:!1,renderBullet:null,renderProgressbar:null,renderFraction:null,renderCustom:null,progressbarOpposite:!1,type:"bullets",dynamicBullets:!1,dynamicMainBullets:1,formatFractionCurrent:function(e){return e},formatFractionTotal:function(e){return e},bulletClass:"swiper-pagination-bullet",bulletActiveClass:"swiper-pagination-bullet-active",modifierClass:"swiper-pagination-",currentClass:"swiper-pagination-current",totalClass:"swiper-pagination-total",hiddenClass:"swiper-pagination-hidden",progressbarFillClass:"swiper-pagination-progressbar-fill",progressbarOppositeClass:"swiper-pagination-progressbar-opposite",clickableClass:"swiper-pagination-clickable",lockClass:"swiper-pagination-lock"}},create:function(){var e=this;ee.extend(e,{pagination:{init:O.init.bind(e),render:O.render.bind(e),update:O.update.bind(e),destroy:O.destroy.bind(e),dynamicBulletIndex:0}})},on:{init:function(){this.pagination.init(),this.pagination.render(),this.pagination.update()},activeIndexChange:function(){this.params.loop?this.pagination.update():void 0===this.snapIndex&&this.pagination.update()},snapIndexChange:function(){this.params.loop||this.pagination.update()},slidesLengthChange:function(){this.params.loop&&(this.pagination.render(),this.pagination.update())},snapGridLengthChange:function(){this.params.loop||(this.pagination.render(),this.pagination.update())},destroy:function(){this.pagination.destroy()},click:function(e){var t=this;t.params.pagination.el&&t.params.pagination.hideOnClick&&0<t.pagination.$el.length&&!D(e.target).hasClass(t.params.pagination.bulletClass)&&(!0===t.pagination.$el.hasClass(t.params.pagination.hiddenClass)?t.emit("paginationShow",t):t.emit("paginationHide",t),t.pagination.$el.toggleClass(t.params.pagination.hiddenClass))}}},{name:"scrollbar",params:{scrollbar:{el:null,dragSize:"auto",hide:!1,draggable:!1,snapOnRelease:!0,lockClass:"swiper-scrollbar-lock",dragClass:"swiper-scrollbar-drag"}},create:function(){var e=this;ee.extend(e,{scrollbar:{init:H.init.bind(e),destroy:H.destroy.bind(e),updateSize:H.updateSize.bind(e),setTranslate:H.setTranslate.bind(e),setTransition:H.setTransition.bind(e),enableDraggable:H.enableDraggable.bind(e),disableDraggable:H.disableDraggable.bind(e),setDragPosition:H.setDragPosition.bind(e),onDragStart:H.onDragStart.bind(e),onDragMove:H.onDragMove.bind(e),onDragEnd:H.onDragEnd.bind(e),isTouched:!1,timeout:null,dragTimeout:null}})},on:{init:function(){this.scrollbar.init(),this.scrollbar.updateSize(),this.scrollbar.setTranslate()},update:function(){this.scrollbar.updateSize()},resize:function(){this.scrollbar.updateSize()},observerUpdate:function(){this.scrollbar.updateSize()},setTranslate:function(){this.scrollbar.setTranslate()},setTransition:function(e){this.scrollbar.setTransition(e)},destroy:function(){this.scrollbar.destroy()}}},{name:"parallax",params:{parallax:{enabled:!1}},create:function(){ee.extend(this,{parallax:{setTransform:j.setTransform.bind(this),setTranslate:j.setTranslate.bind(this),setTransition:j.setTransition.bind(this)}})},on:{beforeInit:function(){this.params.parallax.enabled&&(this.params.watchSlidesProgress=!0,this.originalParams.watchSlidesProgress=!0)},init:function(){this.params.parallax.enabled&&this.parallax.setTranslate()},setTranslate:function(){this.params.parallax.enabled&&this.parallax.setTranslate()},setTransition:function(e){this.params.parallax.enabled&&this.parallax.setTransition(e)}}},{name:"zoom",params:{zoom:{enabled:!1,maxRatio:3,minRatio:1,toggle:!0,containerClass:"swiper-zoom-container",zoomedSlideClass:"swiper-slide-zoomed"}},create:function(){var n=this,t={enabled:!1,scale:1,currentScale:1,isScaling:!1,gesture:{$slideEl:void 0,slideWidth:void 0,slideHeight:void 0,$imageEl:void 0,$imageWrapEl:void 0,maxRatio:3},image:{isTouched:void 0,isMoved:void 0,currentX:void 0,currentY:void 0,minX:void 0,minY:void 0,maxX:void 0,maxY:void 0,width:void 0,height:void 0,startX:void 0,startY:void 0,touchesStart:{},touchesCurrent:{}},velocity:{x:void 0,y:void 0,prevPositionX:void 0,prevPositionY:void 0,prevTime:void 0}};"onGestureStart onGestureChange onGestureEnd onTouchStart onTouchMove onTouchEnd onTransitionEnd toggle enable disable in out".split(" ").forEach(function(e){t[e]=q[e].bind(n)}),ee.extend(n,{zoom:t});var a=1;Object.defineProperty(n.zoom,"scale",{get:function(){return a},set:function(e){if(a!==e){var t=n.zoom.gesture.$imageEl?n.zoom.gesture.$imageEl[0]:void 0,i=n.zoom.gesture.$slideEl?n.zoom.gesture.$slideEl[0]:void 0;n.emit("zoomChange",e,t,i)}a=e}})},on:{init:function(){this.params.zoom.enabled&&this.zoom.enable()},destroy:function(){this.zoom.disable()},touchStart:function(e){this.zoom.enabled&&this.zoom.onTouchStart(e)},touchEnd:function(e){this.zoom.enabled&&this.zoom.onTouchEnd(e)},doubleTap:function(e){this.params.zoom.enabled&&this.zoom.enabled&&this.params.zoom.toggle&&this.zoom.toggle(e)},transitionEnd:function(){this.zoom.enabled&&this.params.zoom.enabled&&this.zoom.onTransitionEnd()}}},{name:"lazy",params:{lazy:{enabled:!1,loadPrevNext:!1,loadPrevNextAmount:1,loadOnTransitionStart:!1,elementClass:"swiper-lazy",loadingClass:"swiper-lazy-loading",loadedClass:"swiper-lazy-loaded",preloaderClass:"swiper-lazy-preloader"}},create:function(){ee.extend(this,{lazy:{initialImageLoaded:!1,load:B.load.bind(this),loadInSlide:B.loadInSlide.bind(this)}})},on:{beforeInit:function(){this.params.lazy.enabled&&this.params.preloadImages&&(this.params.preloadImages=!1)},init:function(){this.params.lazy.enabled&&!this.params.loop&&0===this.params.initialSlide&&this.lazy.load()},scroll:function(){this.params.freeMode&&!this.params.freeModeSticky&&this.lazy.load()},resize:function(){this.params.lazy.enabled&&this.lazy.load()},scrollbarDragMove:function(){this.params.lazy.enabled&&this.lazy.load()},transitionStart:function(){var e=this;e.params.lazy.enabled&&(e.params.lazy.loadOnTransitionStart||!e.params.lazy.loadOnTransitionStart&&!e.lazy.initialImageLoaded)&&e.lazy.load()},transitionEnd:function(){this.params.lazy.enabled&&!this.params.lazy.loadOnTransitionStart&&this.lazy.load()}}},{name:"controller",params:{controller:{control:void 0,inverse:!1,by:"slide"}},create:function(){var e=this;ee.extend(e,{controller:{control:e.params.controller.control,getInterpolateFunction:F.getInterpolateFunction.bind(e),setTranslate:F.setTranslate.bind(e),setTransition:F.setTransition.bind(e)}})},on:{update:function(){this.controller.control&&this.controller.spline&&(this.controller.spline=void 0,delete this.controller.spline)},resize:function(){this.controller.control&&this.controller.spline&&(this.controller.spline=void 0,delete this.controller.spline)},observerUpdate:function(){this.controller.control&&this.controller.spline&&(this.controller.spline=void 0,delete this.controller.spline)},setTranslate:function(e,t){this.controller.control&&this.controller.setTranslate(e,t)},setTransition:function(e,t){this.controller.control&&this.controller.setTransition(e,t)}}},{name:"a11y",params:{a11y:{enabled:!0,notificationClass:"swiper-notification",prevSlideMessage:"Previous slide",nextSlideMessage:"Next slide",firstSlideMessage:"This is the first slide",lastSlideMessage:"This is the last slide",paginationBulletMessage:"Go to slide {{index}}"}},create:function(){var t=this;ee.extend(t,{a11y:{liveRegion:D('<span class="'+t.params.a11y.notificationClass+'" aria-live="assertive" aria-atomic="true"></span>')}}),Object.keys(R).forEach(function(e){t.a11y[e]=R[e].bind(t)})},on:{init:function(){this.params.a11y.enabled&&(this.a11y.init(),this.a11y.updateNavigation())},toEdge:function(){this.params.a11y.enabled&&this.a11y.updateNavigation()},fromEdge:function(){this.params.a11y.enabled&&this.a11y.updateNavigation()},paginationUpdate:function(){this.params.a11y.enabled&&this.a11y.updatePagination()},destroy:function(){this.params.a11y.enabled&&this.a11y.destroy()}}},{name:"history",params:{history:{enabled:!1,replaceState:!1,key:"slides"}},create:function(){var e=this;ee.extend(e,{history:{init:X.init.bind(e),setHistory:X.setHistory.bind(e),setHistoryPopState:X.setHistoryPopState.bind(e),scrollToSlide:X.scrollToSlide.bind(e),destroy:X.destroy.bind(e)}})},on:{init:function(){this.params.history.enabled&&this.history.init()},destroy:function(){this.params.history.enabled&&this.history.destroy()},transitionEnd:function(){this.history.initialized&&this.history.setHistory(this.params.history.key,this.activeIndex)}}},{name:"hash-navigation",params:{hashNavigation:{enabled:!1,replaceState:!1,watchState:!1}},create:function(){var e=this;ee.extend(e,{hashNavigation:{initialized:!1,init:G.init.bind(e),destroy:G.destroy.bind(e),setHash:G.setHash.bind(e),onHashCange:G.onHashCange.bind(e)}})},on:{init:function(){this.params.hashNavigation.enabled&&this.hashNavigation.init()},destroy:function(){this.params.hashNavigation.enabled&&this.hashNavigation.destroy()},transitionEnd:function(){this.hashNavigation.initialized&&this.hashNavigation.setHash()}}},{name:"autoplay",params:{autoplay:{enabled:!1,delay:3e3,waitForTransition:!0,disableOnInteraction:!0,stopOnLastSlide:!1,reverseDirection:!1}},create:function(){var t=this;ee.extend(t,{autoplay:{running:!1,paused:!1,run:V.run.bind(t),start:V.start.bind(t),stop:V.stop.bind(t),pause:V.pause.bind(t),onTransitionEnd:function(e){t&&!t.destroyed&&t.$wrapperEl&&e.target===this&&(t.$wrapperEl[0].removeEventListener("transitionend",t.autoplay.onTransitionEnd),t.$wrapperEl[0].removeEventListener("webkitTransitionEnd",t.autoplay.onTransitionEnd),t.autoplay.paused=!1,t.autoplay.running?t.autoplay.run():t.autoplay.stop())}}})},on:{init:function(){this.params.autoplay.enabled&&this.autoplay.start()},beforeTransitionStart:function(e,t){this.autoplay.running&&(t||!this.params.autoplay.disableOnInteraction?this.autoplay.pause(e):this.autoplay.stop())},sliderFirstMove:function(){this.autoplay.running&&(this.params.autoplay.disableOnInteraction?this.autoplay.stop():this.autoplay.pause())},destroy:function(){this.autoplay.running&&this.autoplay.stop()}}},{name:"effect-fade",params:{fadeEffect:{crossFade:!1}},create:function(){ee.extend(this,{fadeEffect:{setTranslate:W.setTranslate.bind(this),setTransition:W.setTransition.bind(this)}})},on:{beforeInit:function(){var e=this;if("fade"===e.params.effect){e.classNames.push(e.params.containerModifierClass+"fade");var t={slidesPerView:1,slidesPerColumn:1,slidesPerGroup:1,watchSlidesProgress:!0,spaceBetween:0,virtualTranslate:!0};ee.extend(e.params,t),ee.extend(e.originalParams,t)}},setTranslate:function(){"fade"===this.params.effect&&this.fadeEffect.setTranslate()},setTransition:function(e){"fade"===this.params.effect&&this.fadeEffect.setTransition(e)}}},{name:"effect-cube",params:{cubeEffect:{slideShadows:!0,shadow:!0,shadowOffset:20,shadowScale:.94}},create:function(){ee.extend(this,{cubeEffect:{setTranslate:Y.setTranslate.bind(this),setTransition:Y.setTransition.bind(this)}})},on:{beforeInit:function(){var e=this;if("cube"===e.params.effect){e.classNames.push(e.params.containerModifierClass+"cube"),e.classNames.push(e.params.containerModifierClass+"3d");var t={slidesPerView:1,slidesPerColumn:1,slidesPerGroup:1,watchSlidesProgress:!0,resistanceRatio:0,spaceBetween:0,centeredSlides:!1,virtualTranslate:!0};ee.extend(e.params,t),ee.extend(e.originalParams,t)}},setTranslate:function(){"cube"===this.params.effect&&this.cubeEffect.setTranslate()},setTransition:function(e){"cube"===this.params.effect&&this.cubeEffect.setTransition(e)}}},{name:"effect-flip",params:{flipEffect:{slideShadows:!0,limitRotation:!0}},create:function(){ee.extend(this,{flipEffect:{setTranslate:_.setTranslate.bind(this),setTransition:_.setTransition.bind(this)}})},on:{beforeInit:function(){var e=this;if("flip"===e.params.effect){e.classNames.push(e.params.containerModifierClass+"flip"),e.classNames.push(e.params.containerModifierClass+"3d");var t={slidesPerView:1,slidesPerColumn:1,slidesPerGroup:1,watchSlidesProgress:!0,spaceBetween:0,virtualTranslate:!0};ee.extend(e.params,t),ee.extend(e.originalParams,t)}},setTranslate:function(){"flip"===this.params.effect&&this.flipEffect.setTranslate()},setTransition:function(e){"flip"===this.params.effect&&this.flipEffect.setTransition(e)}}},{name:"effect-coverflow",params:{coverflowEffect:{rotate:50,stretch:0,depth:100,modifier:1,slideShadows:!0}},create:function(){ee.extend(this,{coverflowEffect:{setTranslate:U.setTranslate.bind(this),setTransition:U.setTransition.bind(this)}})},on:{beforeInit:function(){var e=this;"coverflow"===e.params.effect&&(e.classNames.push(e.params.containerModifierClass+"coverflow"),e.classNames.push(e.params.containerModifierClass+"3d"),e.params.watchSlidesProgress=!0,e.originalParams.watchSlidesProgress=!0)},setTranslate:function(){"coverflow"===this.params.effect&&this.coverflowEffect.setTranslate()},setTransition:function(e){"coverflow"===this.params.effect&&this.coverflowEffect.setTransition(e)}}},{name:"thumbs",params:{thumbs:{swiper:null,slideThumbActiveClass:"swiper-slide-thumb-active",thumbsContainerClass:"swiper-container-thumbs"}},create:function(){ee.extend(this,{thumbs:{swiper:null,init:K.init.bind(this),update:K.update.bind(this),onThumbClick:K.onThumbClick.bind(this)}})},on:{beforeInit:function(){var e=this.params.thumbs;e&&e.swiper&&(this.thumbs.init(),this.thumbs.update(!0))},slideChange:function(){this.thumbs.swiper&&this.thumbs.update()},update:function(){this.thumbs.swiper&&this.thumbs.update()},resize:function(){this.thumbs.swiper&&this.thumbs.update()},observerUpdate:function(){this.thumbs.swiper&&this.thumbs.update()},setTransition:function(e){var t=this.thumbs.swiper;t&&t.setTransition(e)},beforeDestroy:function(){var e=this.thumbs.swiper;e&&this.thumbs.swiperCreated&&e&&e.destroy()}}}];return void 0===w.use&&(w.use=w.Class.use,w.installModule=w.Class.installModule),w.use(Q),w});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
